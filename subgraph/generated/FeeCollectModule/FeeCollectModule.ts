// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class FeeCollectModule__getFeesResultRoyaltyAmountsStruct extends ethereum.Tuple {
  get treasuryAmount(): BigInt {
    return this[0].toBigInt();
  }

  get genesisAmount(): BigInt {
    return this[1].toBigInt();
  }

  get previousAmount(): BigInt {
    return this[2].toBigInt();
  }

  get referrerAmount(): BigInt {
    return this[3].toBigInt();
  }

  get adjustedAmount(): BigInt {
    return this[4].toBigInt();
  }
}

export class FeeCollectModule__getFeesResult {
  value0: i32;
  value1: BigInt;
  value2: FeeCollectModule__getFeesResultRoyaltyAmountsStruct;

  constructor(
    value0: i32,
    value1: BigInt,
    value2: FeeCollectModule__getFeesResultRoyaltyAmountsStruct
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromTuple(this.value2));
    return map;
  }

  getTreasuryFee(): i32 {
    return this.value0;
  }

  getGenesisSoulBoundTokenId(): BigInt {
    return this.value1;
  }

  getRoyaltyAmounts(): FeeCollectModule__getFeesResultRoyaltyAmountsStruct {
    return this.value2;
  }
}

export class FeeCollectModule__getPublicationDataResultValue0Struct extends ethereum.Tuple {
  get genesisSoulBoundTokenId(): BigInt {
    return this[0].toBigInt();
  }

  get previousSoulBoundTokenId(): BigInt {
    return this[1].toBigInt();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get amount(): BigInt {
    return this[3].toBigInt();
  }

  get salePrice(): BigInt {
    return this[4].toBigInt();
  }

  get royaltyBasisPoints(): BigInt {
    return this[5].toBigInt();
  }

  get ownershipSoulBoundTokenId(): BigInt {
    return this[6].toBigInt();
  }

  get genesisFee(): i32 {
    return this[7].toI32();
  }

  get previousFee(): i32 {
    return this[8].toI32();
  }
}

export class FeeCollectModule extends ethereum.SmartContract {
  static bind(address: Address): FeeCollectModule {
    return new FeeCollectModule("FeeCollectModule", address);
  }

  MANAGER(): Address {
    let result = super.call("MANAGER", "MANAGER():(address)", []);

    return result[0].toAddress();
  }

  try_MANAGER(): ethereum.CallResult<Address> {
    let result = super.tryCall("MANAGER", "MANAGER():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  MODULE_GLOBALS(): Address {
    let result = super.call("MODULE_GLOBALS", "MODULE_GLOBALS():(address)", []);

    return result[0].toAddress();
  }

  try_MODULE_GLOBALS(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "MODULE_GLOBALS",
      "MODULE_GLOBALS():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getFees(
    publishId: BigInt,
    collectUnits: BigInt
  ): FeeCollectModule__getFeesResult {
    let result = super.call(
      "getFees",
      "getFees(uint256,uint256):(uint16,uint256,(uint256,uint256,uint256,uint256,uint256))",
      [
        ethereum.Value.fromUnsignedBigInt(publishId),
        ethereum.Value.fromUnsignedBigInt(collectUnits)
      ]
    );

    return new FeeCollectModule__getFeesResult(
      result[0].toI32(),
      result[1].toBigInt(),
      changetype<FeeCollectModule__getFeesResultRoyaltyAmountsStruct>(
        result[2].toTuple()
      )
    );
  }

  try_getFees(
    publishId: BigInt,
    collectUnits: BigInt
  ): ethereum.CallResult<FeeCollectModule__getFeesResult> {
    let result = super.tryCall(
      "getFees",
      "getFees(uint256,uint256):(uint16,uint256,(uint256,uint256,uint256,uint256,uint256))",
      [
        ethereum.Value.fromUnsignedBigInt(publishId),
        ethereum.Value.fromUnsignedBigInt(collectUnits)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new FeeCollectModule__getFeesResult(
        value[0].toI32(),
        value[1].toBigInt(),
        changetype<FeeCollectModule__getFeesResultRoyaltyAmountsStruct>(
          value[2].toTuple()
        )
      )
    );
  }

  getPublicationData(
    publishId: BigInt
  ): FeeCollectModule__getPublicationDataResultValue0Struct {
    let result = super.call(
      "getPublicationData",
      "getPublicationData(uint256):((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint16,uint16))",
      [ethereum.Value.fromUnsignedBigInt(publishId)]
    );

    return changetype<FeeCollectModule__getPublicationDataResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getPublicationData(
    publishId: BigInt
  ): ethereum.CallResult<
    FeeCollectModule__getPublicationDataResultValue0Struct
  > {
    let result = super.tryCall(
      "getPublicationData",
      "getPublicationData(uint256):((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint16,uint16))",
      [ethereum.Value.fromUnsignedBigInt(publishId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<FeeCollectModule__getPublicationDataResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get manager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get moduleGlobals(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class InitializePublicationCollectModuleCall extends ethereum.Call {
  get inputs(): InitializePublicationCollectModuleCall__Inputs {
    return new InitializePublicationCollectModuleCall__Inputs(this);
  }

  get outputs(): InitializePublicationCollectModuleCall__Outputs {
    return new InitializePublicationCollectModuleCall__Outputs(this);
  }
}

export class InitializePublicationCollectModuleCall__Inputs {
  _call: InitializePublicationCollectModuleCall;

  constructor(call: InitializePublicationCollectModuleCall) {
    this._call = call;
  }

  get publishId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get ownershipSoulBoundTokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class InitializePublicationCollectModuleCall__Outputs {
  _call: InitializePublicationCollectModuleCall;

  constructor(call: InitializePublicationCollectModuleCall) {
    this._call = call;
  }
}

export class ProcessCollectCall extends ethereum.Call {
  get inputs(): ProcessCollectCall__Inputs {
    return new ProcessCollectCall__Inputs(this);
  }

  get outputs(): ProcessCollectCall__Outputs {
    return new ProcessCollectCall__Outputs(this);
  }
}

export class ProcessCollectCall__Inputs {
  _call: ProcessCollectCall;

  constructor(call: ProcessCollectCall) {
    this._call = call;
  }

  get ownershipSoulBoundTokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get collectorSoulBoundTokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get publishId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get collectUnits(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class ProcessCollectCall__Outputs {
  _call: ProcessCollectCall;

  constructor(call: ProcessCollectCall) {
    this._call = call;
  }
}
