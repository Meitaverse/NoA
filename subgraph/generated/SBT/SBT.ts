// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AdminChanged extends ethereum.Event {
  get params(): AdminChanged__Params {
    return new AdminChanged__Params(this);
  }
}

export class AdminChanged__Params {
  _event: AdminChanged;

  constructor(event: AdminChanged) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get _owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get _owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class ApprovalValue extends ethereum.Event {
  get params(): ApprovalValue__Params {
    return new ApprovalValue__Params(this);
  }
}

export class ApprovalValue__Params {
  _event: ApprovalValue;

  constructor(event: ApprovalValue) {
    this._event = event;
  }

  get _tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class BeaconUpgraded extends ethereum.Event {
  get params(): BeaconUpgraded__Params {
    return new BeaconUpgraded__Params(this);
  }
}

export class BeaconUpgraded__Params {
  _event: BeaconUpgraded;

  constructor(event: BeaconUpgraded) {
    this._event = event;
  }

  get beacon(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class SetMetadataDescriptor extends ethereum.Event {
  get params(): SetMetadataDescriptor__Params {
    return new SetMetadataDescriptor__Params(this);
  }
}

export class SetMetadataDescriptor__Params {
  _event: SetMetadataDescriptor;

  constructor(event: SetMetadataDescriptor) {
    this._event = event;
  }

  get metadataDescriptor(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SlotChanged extends ethereum.Event {
  get params(): SlotChanged__Params {
    return new SlotChanged__Params(this);
  }
}

export class SlotChanged__Params {
  _event: SlotChanged;

  constructor(event: SlotChanged) {
    this._event = event;
  }

  get _tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _oldSlot(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _newSlot(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get _from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TransferValue extends ethereum.Event {
  get params(): TransferValue__Params {
    return new TransferValue__Params(this);
  }
}

export class TransferValue__Params {
  _event: TransferValue;

  constructor(event: TransferValue) {
    this._event = event;
  }

  get _fromTokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _toTokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SBT__createProfileInputVarsStruct extends ethereum.Tuple {
  get wallet(): Address {
    return this[0].toAddress();
  }

  get nickName(): string {
    return this[1].toString();
  }

  get imageURI(): string {
    return this[2].toString();
  }
}

export class SBT extends ethereum.SmartContract {
  static bind(address: Address): SBT {
    return new SBT("SBT", address);
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  MAX_SUPPLY(): BigInt {
    let result = super.call("MAX_SUPPLY", "MAX_SUPPLY():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MAX_SUPPLY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MAX_SUPPLY", "MAX_SUPPLY():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  PAUSER_ROLE(): Bytes {
    let result = super.call("PAUSER_ROLE", "PAUSER_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_PAUSER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("PAUSER_ROLE", "PAUSER_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  UPGRADER_ROLE(): Bytes {
    let result = super.call("UPGRADER_ROLE", "UPGRADER_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_UPGRADER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "UPGRADER_ROLE",
      "UPGRADER_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  allowance(tokenId_: BigInt, operator_: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId_),
        ethereum.Value.fromAddress(operator_)
      ]
    );

    return result[0].toBigInt();
  }

  try_allowance(
    tokenId_: BigInt,
    operator_: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId_),
        ethereum.Value.fromAddress(operator_)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(owner_: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner_)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner_: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner_)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf1(tokenId_: BigInt): BigInt {
    let result = super.call("balanceOf", "balanceOf(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf1(tokenId_: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  contractURI(): string {
    let result = super.call("contractURI", "contractURI():(string)", []);

    return result[0].toString();
  }

  try_contractURI(): ethereum.CallResult<string> {
    let result = super.tryCall("contractURI", "contractURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  createProfile(
    creator: Address,
    vars: SBT__createProfileInputVarsStruct
  ): BigInt {
    let result = super.call(
      "createProfile",
      "createProfile(address,(address,string,string)):(uint256)",
      [ethereum.Value.fromAddress(creator), ethereum.Value.fromTuple(vars)]
    );

    return result[0].toBigInt();
  }

  try_createProfile(
    creator: Address,
    vars: SBT__createProfileInputVarsStruct
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createProfile",
      "createProfile(address,(address,string,string)):(uint256)",
      [ethereum.Value.fromAddress(creator), ethereum.Value.fromTuple(vars)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApproved(tokenId_: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId_: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getBankTreasury(): Address {
    let result = super.call(
      "getBankTreasury",
      "getBankTreasury():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getBankTreasury(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getBankTreasury",
      "getBankTreasury():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getManager(): Address {
    let result = super.call("getManager", "getManager():(address)", []);

    return result[0].toAddress();
  }

  try_getManager(): ethereum.CallResult<Address> {
    let result = super.tryCall("getManager", "getManager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getSBTIdByWallet(wallet: Address): BigInt {
    let result = super.call(
      "getSBTIdByWallet",
      "getSBTIdByWallet(address):(uint256)",
      [ethereum.Value.fromAddress(wallet)]
    );

    return result[0].toBigInt();
  }

  try_getSBTIdByWallet(wallet: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSBTIdByWallet",
      "getSBTIdByWallet(address):(uint256)",
      [ethereum.Value.fromAddress(wallet)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedForAll(owner_: Address, operator_: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(owner_),
        ethereum.Value.fromAddress(operator_)
      ]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner_: Address,
    operator_: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(owner_),
        ethereum.Value.fromAddress(operator_)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedForSlot(
    owner_: Address,
    slot_: BigInt,
    operator_: Address
  ): boolean {
    let result = super.call(
      "isApprovedForSlot",
      "isApprovedForSlot(address,uint256,address):(bool)",
      [
        ethereum.Value.fromAddress(owner_),
        ethereum.Value.fromUnsignedBigInt(slot_),
        ethereum.Value.fromAddress(operator_)
      ]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForSlot(
    owner_: Address,
    slot_: BigInt,
    operator_: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForSlot",
      "isApprovedForSlot(address,uint256,address):(bool)",
      [
        ethereum.Value.fromAddress(owner_),
        ethereum.Value.fromUnsignedBigInt(slot_),
        ethereum.Value.fromAddress(operator_)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isContractWhitelisted(contract_: Address): boolean {
    let result = super.call(
      "isContractWhitelisted",
      "isContractWhitelisted(address):(bool)",
      [ethereum.Value.fromAddress(contract_)]
    );

    return result[0].toBoolean();
  }

  try_isContractWhitelisted(contract_: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isContractWhitelisted",
      "isContractWhitelisted(address):(bool)",
      [ethereum.Value.fromAddress(contract_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  metadataDescriptor(): Address {
    let result = super.call(
      "metadataDescriptor",
      "metadataDescriptor():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_metadataDescriptor(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "metadataDescriptor",
      "metadataDescriptor():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  ownerOf(tokenId_: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId_: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  slotByIndex(index_: BigInt): BigInt {
    let result = super.call("slotByIndex", "slotByIndex(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(index_)
    ]);

    return result[0].toBigInt();
  }

  try_slotByIndex(index_: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "slotByIndex",
      "slotByIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(index_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  slotCount(): BigInt {
    let result = super.call("slotCount", "slotCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_slotCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("slotCount", "slotCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  slotOf(tokenId_: BigInt): BigInt {
    let result = super.call("slotOf", "slotOf(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_)
    ]);

    return result[0].toBigInt();
  }

  try_slotOf(tokenId_: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("slotOf", "slotOf(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  slotURI(slot_: BigInt): string {
    let result = super.call("slotURI", "slotURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(slot_)
    ]);

    return result[0].toString();
  }

  try_slotURI(slot_: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("slotURI", "slotURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(slot_)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  svgLogo(): string {
    let result = super.call("svgLogo", "svgLogo():(string)", []);

    return result[0].toString();
  }

  try_svgLogo(): ethereum.CallResult<string> {
    let result = super.tryCall("svgLogo", "svgLogo():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenByIndex(index_: BigInt): BigInt {
    let result = super.call("tokenByIndex", "tokenByIndex(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(index_)
    ]);

    return result[0].toBigInt();
  }

  try_tokenByIndex(index_: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenByIndex",
      "tokenByIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(index_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenInSlotByIndex(slot_: BigInt, index_: BigInt): BigInt {
    let result = super.call(
      "tokenInSlotByIndex",
      "tokenInSlotByIndex(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(slot_),
        ethereum.Value.fromUnsignedBigInt(index_)
      ]
    );

    return result[0].toBigInt();
  }

  try_tokenInSlotByIndex(
    slot_: BigInt,
    index_: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenInSlotByIndex",
      "tokenInSlotByIndex(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(slot_),
        ethereum.Value.fromUnsignedBigInt(index_)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenOfOwnerByIndex(owner_: Address, index_: BigInt): BigInt {
    let result = super.call(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner_),
        ethereum.Value.fromUnsignedBigInt(index_)
      ]
    );

    return result[0].toBigInt();
  }

  try_tokenOfOwnerByIndex(
    owner_: Address,
    index_: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner_),
        ethereum.Value.fromUnsignedBigInt(index_)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenSupplyInSlot(slot_: BigInt): BigInt {
    let result = super.call(
      "tokenSupplyInSlot",
      "tokenSupplyInSlot(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(slot_)]
    );

    return result[0].toBigInt();
  }

  try_tokenSupplyInSlot(slot_: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenSupplyInSlot",
      "tokenSupplyInSlot(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(slot_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(tokenId_: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId_: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  valueDecimals(): i32 {
    let result = super.call("valueDecimals", "valueDecimals():(uint8)", []);

    return result[0].toI32();
  }

  try_valueDecimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("valueDecimals", "valueDecimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  version(): BigInt {
    let result = super.call("version", "version():(uint256)", []);

    return result[0].toBigInt();
  }

  try_version(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("version", "version():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class Approve1Call extends ethereum.Call {
  get inputs(): Approve1Call__Inputs {
    return new Approve1Call__Inputs(this);
  }

  get outputs(): Approve1Call__Outputs {
    return new Approve1Call__Outputs(this);
  }
}

export class Approve1Call__Inputs {
  _call: Approve1Call;

  constructor(call: Approve1Call) {
    this._call = call;
  }

  get tokenId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get to_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class Approve1Call__Outputs {
  _call: Approve1Call;

  constructor(call: Approve1Call) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class BurnValueCall extends ethereum.Call {
  get inputs(): BurnValueCall__Inputs {
    return new BurnValueCall__Inputs(this);
  }

  get outputs(): BurnValueCall__Outputs {
    return new BurnValueCall__Outputs(this);
  }
}

export class BurnValueCall__Inputs {
  _call: BurnValueCall;

  constructor(call: BurnValueCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BurnValueCall__Outputs {
  _call: BurnValueCall;

  constructor(call: BurnValueCall) {
    this._call = call;
  }
}

export class CreateProfileCall extends ethereum.Call {
  get inputs(): CreateProfileCall__Inputs {
    return new CreateProfileCall__Inputs(this);
  }

  get outputs(): CreateProfileCall__Outputs {
    return new CreateProfileCall__Outputs(this);
  }
}

export class CreateProfileCall__Inputs {
  _call: CreateProfileCall;

  constructor(call: CreateProfileCall) {
    this._call = call;
  }

  get creator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get vars(): CreateProfileCallVarsStruct {
    return changetype<CreateProfileCallVarsStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }
}

export class CreateProfileCall__Outputs {
  _call: CreateProfileCall;

  constructor(call: CreateProfileCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreateProfileCallVarsStruct extends ethereum.Tuple {
  get wallet(): Address {
    return this[0].toAddress();
  }

  get nickName(): string {
    return this[1].toString();
  }

  get imageURI(): string {
    return this[2].toString();
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get decimals(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get manager(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MintValueCall extends ethereum.Call {
  get inputs(): MintValueCall__Inputs {
    return new MintValueCall__Inputs(this);
  }

  get outputs(): MintValueCall__Outputs {
    return new MintValueCall__Outputs(this);
  }
}

export class MintValueCall__Inputs {
  _call: MintValueCall;

  constructor(call: MintValueCall) {
    this._call = call;
  }

  get soulBoundTokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintValueCall__Outputs {
  _call: MintValueCall;

  constructor(call: MintValueCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data_(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved_(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetApprovalForSlotCall extends ethereum.Call {
  get inputs(): SetApprovalForSlotCall__Inputs {
    return new SetApprovalForSlotCall__Inputs(this);
  }

  get outputs(): SetApprovalForSlotCall__Outputs {
    return new SetApprovalForSlotCall__Outputs(this);
  }
}

export class SetApprovalForSlotCall__Inputs {
  _call: SetApprovalForSlotCall;

  constructor(call: SetApprovalForSlotCall) {
    this._call = call;
  }

  get owner_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get slot_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get operator_(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get approved_(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }
}

export class SetApprovalForSlotCall__Outputs {
  _call: SetApprovalForSlotCall;

  constructor(call: SetApprovalForSlotCall) {
    this._call = call;
  }
}

export class SetBankTreasuryCall extends ethereum.Call {
  get inputs(): SetBankTreasuryCall__Inputs {
    return new SetBankTreasuryCall__Inputs(this);
  }

  get outputs(): SetBankTreasuryCall__Outputs {
    return new SetBankTreasuryCall__Outputs(this);
  }
}

export class SetBankTreasuryCall__Inputs {
  _call: SetBankTreasuryCall;

  constructor(call: SetBankTreasuryCall) {
    this._call = call;
  }

  get bankTreasury(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get initialSupply(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetBankTreasuryCall__Outputs {
  _call: SetBankTreasuryCall;

  constructor(call: SetBankTreasuryCall) {
    this._call = call;
  }
}

export class SetProfileImageURICall extends ethereum.Call {
  get inputs(): SetProfileImageURICall__Inputs {
    return new SetProfileImageURICall__Inputs(this);
  }

  get outputs(): SetProfileImageURICall__Outputs {
    return new SetProfileImageURICall__Outputs(this);
  }
}

export class SetProfileImageURICall__Inputs {
  _call: SetProfileImageURICall;

  constructor(call: SetProfileImageURICall) {
    this._call = call;
  }

  get soulBoundTokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get imageURI(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class SetProfileImageURICall__Outputs {
  _call: SetProfileImageURICall;

  constructor(call: SetProfileImageURICall) {
    this._call = call;
  }
}

export class SetSvgLogoCall extends ethereum.Call {
  get inputs(): SetSvgLogoCall__Inputs {
    return new SetSvgLogoCall__Inputs(this);
  }

  get outputs(): SetSvgLogoCall__Outputs {
    return new SetSvgLogoCall__Outputs(this);
  }
}

export class SetSvgLogoCall__Inputs {
  _call: SetSvgLogoCall;

  constructor(call: SetSvgLogoCall) {
    this._call = call;
  }

  get svgLogo_(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetSvgLogoCall__Outputs {
  _call: SetSvgLogoCall;

  constructor(call: SetSvgLogoCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get fromTokenId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get to_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TransferFrom1Call extends ethereum.Call {
  get inputs(): TransferFrom1Call__Inputs {
    return new TransferFrom1Call__Inputs(this);
  }

  get outputs(): TransferFrom1Call__Outputs {
    return new TransferFrom1Call__Outputs(this);
  }
}

export class TransferFrom1Call__Inputs {
  _call: TransferFrom1Call;

  constructor(call: TransferFrom1Call) {
    this._call = call;
  }

  get from_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFrom1Call__Outputs {
  _call: TransferFrom1Call;

  constructor(call: TransferFrom1Call) {
    this._call = call;
  }
}

export class TransferFrom2Call extends ethereum.Call {
  get inputs(): TransferFrom2Call__Inputs {
    return new TransferFrom2Call__Inputs(this);
  }

  get outputs(): TransferFrom2Call__Outputs {
    return new TransferFrom2Call__Outputs(this);
  }
}

export class TransferFrom2Call__Inputs {
  _call: TransferFrom2Call;

  constructor(call: TransferFrom2Call) {
    this._call = call;
  }

  get fromTokenId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get toTokenId_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get value_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFrom2Call__Outputs {
  _call: TransferFrom2Call;

  constructor(call: TransferFrom2Call) {
    this._call = call;
  }
}

export class TransferValueCall extends ethereum.Call {
  get inputs(): TransferValueCall__Inputs {
    return new TransferValueCall__Inputs(this);
  }

  get outputs(): TransferValueCall__Outputs {
    return new TransferValueCall__Outputs(this);
  }
}

export class TransferValueCall__Inputs {
  _call: TransferValueCall;

  constructor(call: TransferValueCall) {
    this._call = call;
  }

  get fromTokenId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get toTokenId_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get value_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferValueCall__Outputs {
  _call: TransferValueCall;

  constructor(call: TransferValueCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}

export class WhitelistContractCall extends ethereum.Call {
  get inputs(): WhitelistContractCall__Inputs {
    return new WhitelistContractCall__Inputs(this);
  }

  get outputs(): WhitelistContractCall__Outputs {
    return new WhitelistContractCall__Outputs(this);
  }
}

export class WhitelistContractCall__Inputs {
  _call: WhitelistContractCall;

  constructor(call: WhitelistContractCall) {
    this._call = call;
  }

  get contract_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get toWhitelist_(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class WhitelistContractCall__Outputs {
  _call: WhitelistContractCall;

  constructor(call: WhitelistContractCall) {
    this._call = call;
  }
}
