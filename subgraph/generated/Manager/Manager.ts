// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Manager__collectInputCollectDataStruct extends ethereum.Tuple {
  get publishId(): BigInt {
    return this[0].toBigInt();
  }

  get collectorSoulBoundTokenId(): BigInt {
    return this[1].toBigInt();
  }

  get collectUnits(): BigInt {
    return this[2].toBigInt();
  }

  get data(): Bytes {
    return this[3].toBytes();
  }
}

export class Manager__createHubInputHubStruct extends ethereum.Tuple {
  get soulBoundTokenId(): BigInt {
    return this[0].toBigInt();
  }

  get name(): string {
    return this[1].toString();
  }

  get description(): string {
    return this[2].toString();
  }

  get imageURI(): string {
    return this[3].toString();
  }
}

export class Manager__createProfileInputVarsStruct extends ethereum.Tuple {
  get wallet(): Address {
    return this[0].toAddress();
  }

  get nickName(): string {
    return this[1].toString();
  }

  get imageURI(): string {
    return this[2].toString();
  }
}

export class Manager__createProjectInputProjectStruct extends ethereum.Tuple {
  get hubId(): BigInt {
    return this[0].toBigInt();
  }

  get soulBoundTokenId(): BigInt {
    return this[1].toBigInt();
  }

  get name(): string {
    return this[2].toString();
  }

  get description(): string {
    return this[3].toString();
  }

  get image(): string {
    return this[4].toString();
  }

  get metadataURI(): string {
    return this[5].toString();
  }

  get descriptor(): Address {
    return this[6].toAddress();
  }

  get defaultRoyaltyPoints(): i32 {
    return this[7].toI32();
  }

  get permitByHubOwner(): boolean {
    return this[8].toBoolean();
  }
}

export class Manager__getGenesisAndPreviousInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }

  getValue2(): BigInt {
    return this.value2;
  }

  getValue3(): BigInt {
    return this.value3;
  }
}

export class Manager__getGenesisAndPreviousPublishIdResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getGenesisPublishId(): BigInt {
    return this.value0;
  }

  getPreviousPublishId(): BigInt {
    return this.value1;
  }
}

export class Manager__getHubInfoResultValue0Struct extends ethereum.Tuple {
  get soulBoundTokenId(): BigInt {
    return this[0].toBigInt();
  }

  get hubOwner(): Address {
    return this[1].toAddress();
  }

  get name(): string {
    return this[2].toString();
  }

  get description(): string {
    return this[3].toString();
  }

  get imageURI(): string {
    return this[4].toString();
  }
}

export class Manager__getProjectInfoResultValue0Struct extends ethereum.Tuple {
  get hubId(): BigInt {
    return this[0].toBigInt();
  }

  get soulBoundTokenId(): BigInt {
    return this[1].toBigInt();
  }

  get name(): string {
    return this[2].toString();
  }

  get description(): string {
    return this[3].toString();
  }

  get image(): string {
    return this[4].toString();
  }

  get metadataURI(): string {
    return this[5].toString();
  }

  get descriptor(): Address {
    return this[6].toAddress();
  }

  get defaultRoyaltyPoints(): i32 {
    return this[7].toI32();
  }

  get permitByHubOwner(): boolean {
    return this[8].toBoolean();
  }
}

export class Manager__getPublicationResultValue0Struct extends ethereum.Tuple {
  get soulBoundTokenId(): BigInt {
    return this[0].toBigInt();
  }

  get hubId(): BigInt {
    return this[1].toBigInt();
  }

  get projectId(): BigInt {
    return this[2].toBigInt();
  }

  get salePrice(): BigInt {
    return this[3].toBigInt();
  }

  get royaltyBasisPoints(): BigInt {
    return this[4].toBigInt();
  }

  get currency(): Address {
    return this[5].toAddress();
  }

  get amount(): BigInt {
    return this[6].toBigInt();
  }

  get name(): string {
    return this[7].toString();
  }

  get description(): string {
    return this[8].toString();
  }

  get canCollect(): boolean {
    return this[9].toBoolean();
  }

  get materialURIs(): Array<string> {
    return this[10].toStringArray();
  }

  get fromTokenIds(): Array<BigInt> {
    return this[11].toBigIntArray();
  }

  get collectModule(): Address {
    return this[12].toAddress();
  }

  get collectModuleInitData(): Bytes {
    return this[13].toBytes();
  }

  get publishModule(): Address {
    return this[14].toAddress();
  }

  get publishModuleInitData(): Bytes {
    return this[15].toBytes();
  }
}

export class Manager__getPublicationByProjectTokenResultValue1Struct extends ethereum.Tuple {
  get soulBoundTokenId(): BigInt {
    return this[0].toBigInt();
  }

  get hubId(): BigInt {
    return this[1].toBigInt();
  }

  get projectId(): BigInt {
    return this[2].toBigInt();
  }

  get salePrice(): BigInt {
    return this[3].toBigInt();
  }

  get royaltyBasisPoints(): BigInt {
    return this[4].toBigInt();
  }

  get currency(): Address {
    return this[5].toAddress();
  }

  get amount(): BigInt {
    return this[6].toBigInt();
  }

  get name(): string {
    return this[7].toString();
  }

  get description(): string {
    return this[8].toString();
  }

  get canCollect(): boolean {
    return this[9].toBoolean();
  }

  get materialURIs(): Array<string> {
    return this[10].toStringArray();
  }

  get fromTokenIds(): Array<BigInt> {
    return this[11].toBigIntArray();
  }

  get collectModule(): Address {
    return this[12].toAddress();
  }

  get collectModuleInitData(): Bytes {
    return this[13].toBytes();
  }

  get publishModule(): Address {
    return this[14].toAddress();
  }

  get publishModuleInitData(): Bytes {
    return this[15].toBytes();
  }
}

export class Manager__getPublicationByProjectTokenResult {
  value0: BigInt;
  value1: Manager__getPublicationByProjectTokenResultValue1Struct;

  constructor(
    value0: BigInt,
    value1: Manager__getPublicationByProjectTokenResultValue1Struct
  ) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromTuple(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): Manager__getPublicationByProjectTokenResultValue1Struct {
    return this.value1;
  }
}

export class Manager__getPublishInfoResultValue0Struct extends ethereum.Tuple {
  get publication(): Manager__getPublishInfoResultValue0PublicationStruct {
    return changetype<Manager__getPublishInfoResultValue0PublicationStruct>(
      this[0].toTuple()
    );
  }

  get previousPublishId(): BigInt {
    return this[1].toBigInt();
  }

  get isMinted(): boolean {
    return this[2].toBoolean();
  }

  get tokenId(): BigInt {
    return this[3].toBigInt();
  }
}

export class Manager__getPublishInfoResultValue0PublicationStruct extends ethereum.Tuple {
  get soulBoundTokenId(): BigInt {
    return this[0].toBigInt();
  }

  get hubId(): BigInt {
    return this[1].toBigInt();
  }

  get projectId(): BigInt {
    return this[2].toBigInt();
  }

  get salePrice(): BigInt {
    return this[3].toBigInt();
  }

  get royaltyBasisPoints(): BigInt {
    return this[4].toBigInt();
  }

  get currency(): Address {
    return this[5].toAddress();
  }

  get amount(): BigInt {
    return this[6].toBigInt();
  }

  get name(): string {
    return this[7].toString();
  }

  get description(): string {
    return this[8].toString();
  }

  get canCollect(): boolean {
    return this[9].toBoolean();
  }

  get materialURIs(): Array<string> {
    return this[10].toStringArray();
  }

  get fromTokenIds(): Array<BigInt> {
    return this[11].toBigIntArray();
  }

  get collectModule(): Address {
    return this[12].toAddress();
  }

  get collectModuleInitData(): Bytes {
    return this[13].toBytes();
  }

  get publishModule(): Address {
    return this[14].toAddress();
  }

  get publishModuleInitData(): Bytes {
    return this[15].toBytes();
  }
}

export class Manager__prePublishInputPublicationStruct extends ethereum.Tuple {
  get soulBoundTokenId(): BigInt {
    return this[0].toBigInt();
  }

  get hubId(): BigInt {
    return this[1].toBigInt();
  }

  get projectId(): BigInt {
    return this[2].toBigInt();
  }

  get salePrice(): BigInt {
    return this[3].toBigInt();
  }

  get royaltyBasisPoints(): BigInt {
    return this[4].toBigInt();
  }

  get currency(): Address {
    return this[5].toAddress();
  }

  get amount(): BigInt {
    return this[6].toBigInt();
  }

  get name(): string {
    return this[7].toString();
  }

  get description(): string {
    return this[8].toString();
  }

  get canCollect(): boolean {
    return this[9].toBoolean();
  }

  get materialURIs(): Array<string> {
    return this[10].toStringArray();
  }

  get fromTokenIds(): Array<BigInt> {
    return this[11].toBigIntArray();
  }

  get collectModule(): Address {
    return this[12].toAddress();
  }

  get collectModuleInitData(): Bytes {
    return this[13].toBytes();
  }

  get publishModule(): Address {
    return this[14].toAddress();
  }

  get publishModuleInitData(): Bytes {
    return this[15].toBytes();
  }
}

export class Manager extends ethereum.SmartContract {
  static bind(address: Address): Manager {
    return new Manager("Manager", address);
  }

  calculateRoyalty(publishId: BigInt): i32 {
    let result = super.call(
      "calculateRoyalty",
      "calculateRoyalty(uint256):(uint16)",
      [ethereum.Value.fromUnsignedBigInt(publishId)]
    );

    return result[0].toI32();
  }

  try_calculateRoyalty(publishId: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "calculateRoyalty",
      "calculateRoyalty(uint256):(uint16)",
      [ethereum.Value.fromUnsignedBigInt(publishId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  collect(collectData: Manager__collectInputCollectDataStruct): BigInt {
    let result = super.call(
      "collect",
      "collect((uint256,uint256,uint256,bytes)):(uint256)",
      [ethereum.Value.fromTuple(collectData)]
    );

    return result[0].toBigInt();
  }

  try_collect(
    collectData: Manager__collectInputCollectDataStruct
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "collect",
      "collect((uint256,uint256,uint256,bytes)):(uint256)",
      [ethereum.Value.fromTuple(collectData)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createHub(hub: Manager__createHubInputHubStruct): BigInt {
    let result = super.call(
      "createHub",
      "createHub((uint256,string,string,string)):(uint256)",
      [ethereum.Value.fromTuple(hub)]
    );

    return result[0].toBigInt();
  }

  try_createHub(
    hub: Manager__createHubInputHubStruct
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createHub",
      "createHub((uint256,string,string,string)):(uint256)",
      [ethereum.Value.fromTuple(hub)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createProfile(vars: Manager__createProfileInputVarsStruct): BigInt {
    let result = super.call(
      "createProfile",
      "createProfile((address,string,string)):(uint256)",
      [ethereum.Value.fromTuple(vars)]
    );

    return result[0].toBigInt();
  }

  try_createProfile(
    vars: Manager__createProfileInputVarsStruct
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createProfile",
      "createProfile((address,string,string)):(uint256)",
      [ethereum.Value.fromTuple(vars)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createProject(project: Manager__createProjectInputProjectStruct): BigInt {
    let result = super.call(
      "createProject",
      "createProject((uint256,uint256,string,string,string,string,address,uint16,bool)):(uint256)",
      [ethereum.Value.fromTuple(project)]
    );

    return result[0].toBigInt();
  }

  try_createProject(
    project: Manager__createProjectInputProjectStruct
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createProject",
      "createProject((uint256,uint256,string,string,string,string,address,uint16,bool)):(uint256)",
      [ethereum.Value.fromTuple(project)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDerivativeNFT(projectId: BigInt): Address {
    let result = super.call(
      "getDerivativeNFT",
      "getDerivativeNFT(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(projectId)]
    );

    return result[0].toAddress();
  }

  try_getDerivativeNFT(projectId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getDerivativeNFT",
      "getDerivativeNFT(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(projectId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getDispatcher(soulBoundToken: BigInt): Address {
    let result = super.call(
      "getDispatcher",
      "getDispatcher(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(soulBoundToken)]
    );

    return result[0].toAddress();
  }

  try_getDispatcher(soulBoundToken: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getDispatcher",
      "getDispatcher(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(soulBoundToken)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getGenesisAndPreviousInfo(
    projectId: BigInt,
    tokenId: BigInt
  ): Manager__getGenesisAndPreviousInfoResult {
    let result = super.call(
      "getGenesisAndPreviousInfo",
      "getGenesisAndPreviousInfo(uint256,uint256):(uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(projectId),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );

    return new Manager__getGenesisAndPreviousInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_getGenesisAndPreviousInfo(
    projectId: BigInt,
    tokenId: BigInt
  ): ethereum.CallResult<Manager__getGenesisAndPreviousInfoResult> {
    let result = super.tryCall(
      "getGenesisAndPreviousInfo",
      "getGenesisAndPreviousInfo(uint256,uint256):(uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(projectId),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Manager__getGenesisAndPreviousInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  getGenesisAndPreviousPublishId(
    publishId: BigInt
  ): Manager__getGenesisAndPreviousPublishIdResult {
    let result = super.call(
      "getGenesisAndPreviousPublishId",
      "getGenesisAndPreviousPublishId(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(publishId)]
    );

    return new Manager__getGenesisAndPreviousPublishIdResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getGenesisAndPreviousPublishId(
    publishId: BigInt
  ): ethereum.CallResult<Manager__getGenesisAndPreviousPublishIdResult> {
    let result = super.tryCall(
      "getGenesisAndPreviousPublishId",
      "getGenesisAndPreviousPublishId(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(publishId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Manager__getGenesisAndPreviousPublishIdResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getGenesisPublishIdByProjectId(projectId: BigInt): BigInt {
    let result = super.call(
      "getGenesisPublishIdByProjectId",
      "getGenesisPublishIdByProjectId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(projectId)]
    );

    return result[0].toBigInt();
  }

  try_getGenesisPublishIdByProjectId(
    projectId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getGenesisPublishIdByProjectId",
      "getGenesisPublishIdByProjectId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(projectId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getGlobalModule(): Address {
    let result = super.call(
      "getGlobalModule",
      "getGlobalModule():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getGlobalModule(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getGlobalModule",
      "getGlobalModule():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getGovernance(): Address {
    let result = super.call("getGovernance", "getGovernance():(address)", []);

    return result[0].toAddress();
  }

  try_getGovernance(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getGovernance",
      "getGovernance():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getHubInfo(hubId: BigInt): Manager__getHubInfoResultValue0Struct {
    let result = super.call(
      "getHubInfo",
      "getHubInfo(uint256):((uint256,address,string,string,string))",
      [ethereum.Value.fromUnsignedBigInt(hubId)]
    );

    return changetype<Manager__getHubInfoResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getHubInfo(
    hubId: BigInt
  ): ethereum.CallResult<Manager__getHubInfoResultValue0Struct> {
    let result = super.tryCall(
      "getHubInfo",
      "getHubInfo(uint256):((uint256,address,string,string,string))",
      [ethereum.Value.fromUnsignedBigInt(hubId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Manager__getHubInfoResultValue0Struct>(value[0].toTuple())
    );
  }

  getProjectIdByContract(contract_: Address): BigInt {
    let result = super.call(
      "getProjectIdByContract",
      "getProjectIdByContract(address):(uint256)",
      [ethereum.Value.fromAddress(contract_)]
    );

    return result[0].toBigInt();
  }

  try_getProjectIdByContract(contract_: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getProjectIdByContract",
      "getProjectIdByContract(address):(uint256)",
      [ethereum.Value.fromAddress(contract_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getProjectInfo(
    projectId_: BigInt
  ): Manager__getProjectInfoResultValue0Struct {
    let result = super.call(
      "getProjectInfo",
      "getProjectInfo(uint256):((uint256,uint256,string,string,string,string,address,uint16,bool))",
      [ethereum.Value.fromUnsignedBigInt(projectId_)]
    );

    return changetype<Manager__getProjectInfoResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getProjectInfo(
    projectId_: BigInt
  ): ethereum.CallResult<Manager__getProjectInfoResultValue0Struct> {
    let result = super.tryCall(
      "getProjectInfo",
      "getProjectInfo(uint256):((uint256,uint256,string,string,string,string,address,uint16,bool))",
      [ethereum.Value.fromUnsignedBigInt(projectId_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Manager__getProjectInfoResultValue0Struct>(value[0].toTuple())
    );
  }

  getPublication(
    publishId_: BigInt
  ): Manager__getPublicationResultValue0Struct {
    let result = super.call(
      "getPublication",
      "getPublication(uint256):((uint256,uint256,uint256,uint256,uint256,address,uint256,string,string,bool,string[],uint256[],address,bytes,address,bytes))",
      [ethereum.Value.fromUnsignedBigInt(publishId_)]
    );

    return changetype<Manager__getPublicationResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getPublication(
    publishId_: BigInt
  ): ethereum.CallResult<Manager__getPublicationResultValue0Struct> {
    let result = super.tryCall(
      "getPublication",
      "getPublication(uint256):((uint256,uint256,uint256,uint256,uint256,address,uint256,string,string,bool,string[],uint256[],address,bytes,address,bytes))",
      [ethereum.Value.fromUnsignedBigInt(publishId_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Manager__getPublicationResultValue0Struct>(value[0].toTuple())
    );
  }

  getPublicationByProjectToken(
    projectId_: BigInt,
    tokenId_: BigInt
  ): Manager__getPublicationByProjectTokenResult {
    let result = super.call(
      "getPublicationByProjectToken",
      "getPublicationByProjectToken(uint256,uint256):(uint256,(uint256,uint256,uint256,uint256,uint256,address,uint256,string,string,bool,string[],uint256[],address,bytes,address,bytes))",
      [
        ethereum.Value.fromUnsignedBigInt(projectId_),
        ethereum.Value.fromUnsignedBigInt(tokenId_)
      ]
    );

    return new Manager__getPublicationByProjectTokenResult(
      result[0].toBigInt(),
      changetype<Manager__getPublicationByProjectTokenResultValue1Struct>(
        result[1].toTuple()
      )
    );
  }

  try_getPublicationByProjectToken(
    projectId_: BigInt,
    tokenId_: BigInt
  ): ethereum.CallResult<Manager__getPublicationByProjectTokenResult> {
    let result = super.tryCall(
      "getPublicationByProjectToken",
      "getPublicationByProjectToken(uint256,uint256):(uint256,(uint256,uint256,uint256,uint256,uint256,address,uint256,string,string,bool,string[],uint256[],address,bytes,address,bytes))",
      [
        ethereum.Value.fromUnsignedBigInt(projectId_),
        ethereum.Value.fromUnsignedBigInt(tokenId_)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Manager__getPublicationByProjectTokenResult(
        value[0].toBigInt(),
        changetype<Manager__getPublicationByProjectTokenResultValue1Struct>(
          value[1].toTuple()
        )
      )
    );
  }

  getPublishInfo(
    publishId_: BigInt
  ): Manager__getPublishInfoResultValue0Struct {
    let result = super.call(
      "getPublishInfo",
      "getPublishInfo(uint256):(((uint256,uint256,uint256,uint256,uint256,address,uint256,string,string,bool,string[],uint256[],address,bytes,address,bytes),uint256,bool,uint256))",
      [ethereum.Value.fromUnsignedBigInt(publishId_)]
    );

    return changetype<Manager__getPublishInfoResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getPublishInfo(
    publishId_: BigInt
  ): ethereum.CallResult<Manager__getPublishInfoResultValue0Struct> {
    let result = super.tryCall(
      "getPublishInfo",
      "getPublishInfo(uint256):(((uint256,uint256,uint256,uint256,uint256,address,uint256,string,string,bool,string[],uint256[],address,bytes,address,bytes),uint256,bool,uint256))",
      [ethereum.Value.fromUnsignedBigInt(publishId_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Manager__getPublishInfoResultValue0Struct>(value[0].toTuple())
    );
  }

  getReceiver(): Address {
    let result = super.call("getReceiver", "getReceiver():(address)", []);

    return result[0].toAddress();
  }

  try_getReceiver(): ethereum.CallResult<Address> {
    let result = super.tryCall("getReceiver", "getReceiver():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getSoulBoundTokenIdByWallet(wallet: Address): BigInt {
    let result = super.call(
      "getSoulBoundTokenIdByWallet",
      "getSoulBoundTokenIdByWallet(address):(uint256)",
      [ethereum.Value.fromAddress(wallet)]
    );

    return result[0].toBigInt();
  }

  try_getSoulBoundTokenIdByWallet(
    wallet: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSoulBoundTokenIdByWallet",
      "getSoulBoundTokenIdByWallet(address):(uint256)",
      [ethereum.Value.fromAddress(wallet)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getState(): i32 {
    let result = super.call("getState", "getState():(uint8)", []);

    return result[0].toI32();
  }

  try_getState(): ethereum.CallResult<i32> {
    let result = super.tryCall("getState", "getState():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getTimeLock(): Address {
    let result = super.call("getTimeLock", "getTimeLock():(address)", []);

    return result[0].toAddress();
  }

  try_getTimeLock(): ethereum.CallResult<Address> {
    let result = super.tryCall("getTimeLock", "getTimeLock():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getWalletBySoulBoundTokenId(soulBoundTokenId: BigInt): Address {
    let result = super.call(
      "getWalletBySoulBoundTokenId",
      "getWalletBySoulBoundTokenId(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(soulBoundTokenId)]
    );

    return result[0].toAddress();
  }

  try_getWalletBySoulBoundTokenId(
    soulBoundTokenId: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getWalletBySoulBoundTokenId",
      "getWalletBySoulBoundTokenId(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(soulBoundTokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  prePublish(publication: Manager__prePublishInputPublicationStruct): BigInt {
    let result = super.call(
      "prePublish",
      "prePublish((uint256,uint256,uint256,uint256,uint256,address,uint256,string,string,bool,string[],uint256[],address,bytes,address,bytes)):(uint256)",
      [ethereum.Value.fromTuple(publication)]
    );

    return result[0].toBigInt();
  }

  try_prePublish(
    publication: Manager__prePublishInputPublicationStruct
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "prePublish",
      "prePublish((uint256,uint256,uint256,uint256,uint256,address,uint256,string,string,bool,string[],uint256[],address,bytes,address,bytes)):(uint256)",
      [ethereum.Value.fromTuple(publication)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  publish(publishId: BigInt): BigInt {
    let result = super.call("publish", "publish(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(publishId)
    ]);

    return result[0].toBigInt();
  }

  try_publish(publishId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("publish", "publish(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(publishId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sigNonces(param0: Address): BigInt {
    let result = super.call("sigNonces", "sigNonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_sigNonces(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("sigNonces", "sigNonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  version(): BigInt {
    let result = super.call("version", "version():(uint256)", []);

    return result[0].toBigInt();
  }

  try_version(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("version", "version():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get dNftV1_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get receiver_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AirdropCall extends ethereum.Call {
  get inputs(): AirdropCall__Inputs {
    return new AirdropCall__Inputs(this);
  }

  get outputs(): AirdropCall__Outputs {
    return new AirdropCall__Outputs(this);
  }
}

export class AirdropCall__Inputs {
  _call: AirdropCall;

  constructor(call: AirdropCall) {
    this._call = call;
  }

  get airdropData(): AirdropCallAirdropDataStruct {
    return changetype<AirdropCallAirdropDataStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class AirdropCall__Outputs {
  _call: AirdropCall;

  constructor(call: AirdropCall) {
    this._call = call;
  }
}

export class AirdropCallAirdropDataStruct extends ethereum.Tuple {
  get publishId(): BigInt {
    return this[0].toBigInt();
  }

  get ownershipSoulBoundTokenId(): BigInt {
    return this[1].toBigInt();
  }

  get toSoulBoundTokenIds(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get tokenId(): BigInt {
    return this[3].toBigInt();
  }

  get values(): Array<BigInt> {
    return this[4].toBigIntArray();
  }
}

export class CollectCall extends ethereum.Call {
  get inputs(): CollectCall__Inputs {
    return new CollectCall__Inputs(this);
  }

  get outputs(): CollectCall__Outputs {
    return new CollectCall__Outputs(this);
  }
}

export class CollectCall__Inputs {
  _call: CollectCall;

  constructor(call: CollectCall) {
    this._call = call;
  }

  get collectData(): CollectCallCollectDataStruct {
    return changetype<CollectCallCollectDataStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class CollectCall__Outputs {
  _call: CollectCall;

  constructor(call: CollectCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CollectCallCollectDataStruct extends ethereum.Tuple {
  get publishId(): BigInt {
    return this[0].toBigInt();
  }

  get collectorSoulBoundTokenId(): BigInt {
    return this[1].toBigInt();
  }

  get collectUnits(): BigInt {
    return this[2].toBigInt();
  }

  get data(): Bytes {
    return this[3].toBytes();
  }
}

export class CreateHubCall extends ethereum.Call {
  get inputs(): CreateHubCall__Inputs {
    return new CreateHubCall__Inputs(this);
  }

  get outputs(): CreateHubCall__Outputs {
    return new CreateHubCall__Outputs(this);
  }
}

export class CreateHubCall__Inputs {
  _call: CreateHubCall;

  constructor(call: CreateHubCall) {
    this._call = call;
  }

  get hub(): CreateHubCallHubStruct {
    return changetype<CreateHubCallHubStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class CreateHubCall__Outputs {
  _call: CreateHubCall;

  constructor(call: CreateHubCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreateHubCallHubStruct extends ethereum.Tuple {
  get soulBoundTokenId(): BigInt {
    return this[0].toBigInt();
  }

  get name(): string {
    return this[1].toString();
  }

  get description(): string {
    return this[2].toString();
  }

  get imageURI(): string {
    return this[3].toString();
  }
}

export class CreateProfileCall extends ethereum.Call {
  get inputs(): CreateProfileCall__Inputs {
    return new CreateProfileCall__Inputs(this);
  }

  get outputs(): CreateProfileCall__Outputs {
    return new CreateProfileCall__Outputs(this);
  }
}

export class CreateProfileCall__Inputs {
  _call: CreateProfileCall;

  constructor(call: CreateProfileCall) {
    this._call = call;
  }

  get vars(): CreateProfileCallVarsStruct {
    return changetype<CreateProfileCallVarsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class CreateProfileCall__Outputs {
  _call: CreateProfileCall;

  constructor(call: CreateProfileCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreateProfileCallVarsStruct extends ethereum.Tuple {
  get wallet(): Address {
    return this[0].toAddress();
  }

  get nickName(): string {
    return this[1].toString();
  }

  get imageURI(): string {
    return this[2].toString();
  }
}

export class CreateProjectCall extends ethereum.Call {
  get inputs(): CreateProjectCall__Inputs {
    return new CreateProjectCall__Inputs(this);
  }

  get outputs(): CreateProjectCall__Outputs {
    return new CreateProjectCall__Outputs(this);
  }
}

export class CreateProjectCall__Inputs {
  _call: CreateProjectCall;

  constructor(call: CreateProjectCall) {
    this._call = call;
  }

  get project(): CreateProjectCallProjectStruct {
    return changetype<CreateProjectCallProjectStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class CreateProjectCall__Outputs {
  _call: CreateProjectCall;

  constructor(call: CreateProjectCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreateProjectCallProjectStruct extends ethereum.Tuple {
  get hubId(): BigInt {
    return this[0].toBigInt();
  }

  get soulBoundTokenId(): BigInt {
    return this[1].toBigInt();
  }

  get name(): string {
    return this[2].toString();
  }

  get description(): string {
    return this[3].toString();
  }

  get image(): string {
    return this[4].toString();
  }

  get metadataURI(): string {
    return this[5].toString();
  }

  get descriptor(): Address {
    return this[6].toAddress();
  }

  get defaultRoyaltyPoints(): i32 {
    return this[7].toI32();
  }

  get permitByHubOwner(): boolean {
    return this[8].toBoolean();
  }
}

export class HubOwnerPermitPublishIdCall extends ethereum.Call {
  get inputs(): HubOwnerPermitPublishIdCall__Inputs {
    return new HubOwnerPermitPublishIdCall__Inputs(this);
  }

  get outputs(): HubOwnerPermitPublishIdCall__Outputs {
    return new HubOwnerPermitPublishIdCall__Outputs(this);
  }
}

export class HubOwnerPermitPublishIdCall__Inputs {
  _call: HubOwnerPermitPublishIdCall;

  constructor(call: HubOwnerPermitPublishIdCall) {
    this._call = call;
  }

  get publishId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get isPermit(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class HubOwnerPermitPublishIdCall__Outputs {
  _call: HubOwnerPermitPublishIdCall;

  constructor(call: HubOwnerPermitPublishIdCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get governance(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class PrePublishCall extends ethereum.Call {
  get inputs(): PrePublishCall__Inputs {
    return new PrePublishCall__Inputs(this);
  }

  get outputs(): PrePublishCall__Outputs {
    return new PrePublishCall__Outputs(this);
  }
}

export class PrePublishCall__Inputs {
  _call: PrePublishCall;

  constructor(call: PrePublishCall) {
    this._call = call;
  }

  get publication(): PrePublishCallPublicationStruct {
    return changetype<PrePublishCallPublicationStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class PrePublishCall__Outputs {
  _call: PrePublishCall;

  constructor(call: PrePublishCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PrePublishCallPublicationStruct extends ethereum.Tuple {
  get soulBoundTokenId(): BigInt {
    return this[0].toBigInt();
  }

  get hubId(): BigInt {
    return this[1].toBigInt();
  }

  get projectId(): BigInt {
    return this[2].toBigInt();
  }

  get salePrice(): BigInt {
    return this[3].toBigInt();
  }

  get royaltyBasisPoints(): BigInt {
    return this[4].toBigInt();
  }

  get currency(): Address {
    return this[5].toAddress();
  }

  get amount(): BigInt {
    return this[6].toBigInt();
  }

  get name(): string {
    return this[7].toString();
  }

  get description(): string {
    return this[8].toString();
  }

  get canCollect(): boolean {
    return this[9].toBoolean();
  }

  get materialURIs(): Array<string> {
    return this[10].toStringArray();
  }

  get fromTokenIds(): Array<BigInt> {
    return this[11].toBigIntArray();
  }

  get collectModule(): Address {
    return this[12].toAddress();
  }

  get collectModuleInitData(): Bytes {
    return this[13].toBytes();
  }

  get publishModule(): Address {
    return this[14].toAddress();
  }

  get publishModuleInitData(): Bytes {
    return this[15].toBytes();
  }
}

export class PublishCall extends ethereum.Call {
  get inputs(): PublishCall__Inputs {
    return new PublishCall__Inputs(this);
  }

  get outputs(): PublishCall__Outputs {
    return new PublishCall__Outputs(this);
  }
}

export class PublishCall__Inputs {
  _call: PublishCall;

  constructor(call: PublishCall) {
    this._call = call;
  }

  get publishId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class PublishCall__Outputs {
  _call: PublishCall;

  constructor(call: PublishCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PublisherSetCanCollectCall extends ethereum.Call {
  get inputs(): PublisherSetCanCollectCall__Inputs {
    return new PublisherSetCanCollectCall__Inputs(this);
  }

  get outputs(): PublisherSetCanCollectCall__Outputs {
    return new PublisherSetCanCollectCall__Outputs(this);
  }
}

export class PublisherSetCanCollectCall__Inputs {
  _call: PublisherSetCanCollectCall;

  constructor(call: PublisherSetCanCollectCall) {
    this._call = call;
  }

  get publishId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get canCollect(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class PublisherSetCanCollectCall__Outputs {
  _call: PublisherSetCanCollectCall;

  constructor(call: PublisherSetCanCollectCall) {
    this._call = call;
  }
}

export class SetDerivativeNFTMetadataDescriptorCall extends ethereum.Call {
  get inputs(): SetDerivativeNFTMetadataDescriptorCall__Inputs {
    return new SetDerivativeNFTMetadataDescriptorCall__Inputs(this);
  }

  get outputs(): SetDerivativeNFTMetadataDescriptorCall__Outputs {
    return new SetDerivativeNFTMetadataDescriptorCall__Outputs(this);
  }
}

export class SetDerivativeNFTMetadataDescriptorCall__Inputs {
  _call: SetDerivativeNFTMetadataDescriptorCall;

  constructor(call: SetDerivativeNFTMetadataDescriptorCall) {
    this._call = call;
  }

  get projectId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get metadataDescriptor(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetDerivativeNFTMetadataDescriptorCall__Outputs {
  _call: SetDerivativeNFTMetadataDescriptorCall;

  constructor(call: SetDerivativeNFTMetadataDescriptorCall) {
    this._call = call;
  }
}

export class SetDerivativeNFTStateCall extends ethereum.Call {
  get inputs(): SetDerivativeNFTStateCall__Inputs {
    return new SetDerivativeNFTStateCall__Inputs(this);
  }

  get outputs(): SetDerivativeNFTStateCall__Outputs {
    return new SetDerivativeNFTStateCall__Outputs(this);
  }
}

export class SetDerivativeNFTStateCall__Inputs {
  _call: SetDerivativeNFTStateCall;

  constructor(call: SetDerivativeNFTStateCall) {
    this._call = call;
  }

  get projectId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newState(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class SetDerivativeNFTStateCall__Outputs {
  _call: SetDerivativeNFTStateCall;

  constructor(call: SetDerivativeNFTStateCall) {
    this._call = call;
  }
}

export class SetDispatcherCall extends ethereum.Call {
  get inputs(): SetDispatcherCall__Inputs {
    return new SetDispatcherCall__Inputs(this);
  }

  get outputs(): SetDispatcherCall__Outputs {
    return new SetDispatcherCall__Outputs(this);
  }
}

export class SetDispatcherCall__Inputs {
  _call: SetDispatcherCall;

  constructor(call: SetDispatcherCall) {
    this._call = call;
  }

  get soulBoundTokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get dispatcher(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetDispatcherCall__Outputs {
  _call: SetDispatcherCall;

  constructor(call: SetDispatcherCall) {
    this._call = call;
  }
}

export class SetDispatcherWithSigCall extends ethereum.Call {
  get inputs(): SetDispatcherWithSigCall__Inputs {
    return new SetDispatcherWithSigCall__Inputs(this);
  }

  get outputs(): SetDispatcherWithSigCall__Outputs {
    return new SetDispatcherWithSigCall__Outputs(this);
  }
}

export class SetDispatcherWithSigCall__Inputs {
  _call: SetDispatcherWithSigCall;

  constructor(call: SetDispatcherWithSigCall) {
    this._call = call;
  }

  get vars(): SetDispatcherWithSigCallVarsStruct {
    return changetype<SetDispatcherWithSigCallVarsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class SetDispatcherWithSigCall__Outputs {
  _call: SetDispatcherWithSigCall;

  constructor(call: SetDispatcherWithSigCall) {
    this._call = call;
  }
}

export class SetDispatcherWithSigCallVarsStruct extends ethereum.Tuple {
  get soulBoundTokenId(): BigInt {
    return this[0].toBigInt();
  }

  get dispatcher(): Address {
    return this[1].toAddress();
  }

  get sig(): SetDispatcherWithSigCallVarsSigStruct {
    return changetype<SetDispatcherWithSigCallVarsSigStruct>(this[2].toTuple());
  }
}

export class SetDispatcherWithSigCallVarsSigStruct extends ethereum.Tuple {
  get v(): i32 {
    return this[0].toI32();
  }

  get r(): Bytes {
    return this[1].toBytes();
  }

  get s(): Bytes {
    return this[2].toBytes();
  }

  get deadline(): BigInt {
    return this[3].toBigInt();
  }
}

export class SetEmergencyAdminCall extends ethereum.Call {
  get inputs(): SetEmergencyAdminCall__Inputs {
    return new SetEmergencyAdminCall__Inputs(this);
  }

  get outputs(): SetEmergencyAdminCall__Outputs {
    return new SetEmergencyAdminCall__Outputs(this);
  }
}

export class SetEmergencyAdminCall__Inputs {
  _call: SetEmergencyAdminCall;

  constructor(call: SetEmergencyAdminCall) {
    this._call = call;
  }

  get newEmergencyAdmin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetEmergencyAdminCall__Outputs {
  _call: SetEmergencyAdminCall;

  constructor(call: SetEmergencyAdminCall) {
    this._call = call;
  }
}

export class SetGlobalModulesCall extends ethereum.Call {
  get inputs(): SetGlobalModulesCall__Inputs {
    return new SetGlobalModulesCall__Inputs(this);
  }

  get outputs(): SetGlobalModulesCall__Outputs {
    return new SetGlobalModulesCall__Outputs(this);
  }
}

export class SetGlobalModulesCall__Inputs {
  _call: SetGlobalModulesCall;

  constructor(call: SetGlobalModulesCall) {
    this._call = call;
  }

  get moduleGlobals(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetGlobalModulesCall__Outputs {
  _call: SetGlobalModulesCall;

  constructor(call: SetGlobalModulesCall) {
    this._call = call;
  }
}

export class SetGovernanceCall extends ethereum.Call {
  get inputs(): SetGovernanceCall__Inputs {
    return new SetGovernanceCall__Inputs(this);
  }

  get outputs(): SetGovernanceCall__Outputs {
    return new SetGovernanceCall__Outputs(this);
  }
}

export class SetGovernanceCall__Inputs {
  _call: SetGovernanceCall;

  constructor(call: SetGovernanceCall) {
    this._call = call;
  }

  get newGovernance(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetGovernanceCall__Outputs {
  _call: SetGovernanceCall;

  constructor(call: SetGovernanceCall) {
    this._call = call;
  }
}

export class SetStateCall extends ethereum.Call {
  get inputs(): SetStateCall__Inputs {
    return new SetStateCall__Inputs(this);
  }

  get outputs(): SetStateCall__Outputs {
    return new SetStateCall__Outputs(this);
  }
}

export class SetStateCall__Inputs {
  _call: SetStateCall;

  constructor(call: SetStateCall) {
    this._call = call;
  }

  get newState(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class SetStateCall__Outputs {
  _call: SetStateCall;

  constructor(call: SetStateCall) {
    this._call = call;
  }
}

export class SetTimeLockCall extends ethereum.Call {
  get inputs(): SetTimeLockCall__Inputs {
    return new SetTimeLockCall__Inputs(this);
  }

  get outputs(): SetTimeLockCall__Outputs {
    return new SetTimeLockCall__Outputs(this);
  }
}

export class SetTimeLockCall__Inputs {
  _call: SetTimeLockCall;

  constructor(call: SetTimeLockCall) {
    this._call = call;
  }

  get timeLock(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetTimeLockCall__Outputs {
  _call: SetTimeLockCall;

  constructor(call: SetTimeLockCall) {
    this._call = call;
  }
}

export class UpdateHubCall extends ethereum.Call {
  get inputs(): UpdateHubCall__Inputs {
    return new UpdateHubCall__Inputs(this);
  }

  get outputs(): UpdateHubCall__Outputs {
    return new UpdateHubCall__Outputs(this);
  }
}

export class UpdateHubCall__Inputs {
  _call: UpdateHubCall;

  constructor(call: UpdateHubCall) {
    this._call = call;
  }

  get hubId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get hubName(): string {
    return this._call.inputValues[1].value.toString();
  }

  get description(): string {
    return this._call.inputValues[2].value.toString();
  }

  get imageURI(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class UpdateHubCall__Outputs {
  _call: UpdateHubCall;

  constructor(call: UpdateHubCall) {
    this._call = call;
  }
}

export class UpdatePublishCall extends ethereum.Call {
  get inputs(): UpdatePublishCall__Inputs {
    return new UpdatePublishCall__Inputs(this);
  }

  get outputs(): UpdatePublishCall__Outputs {
    return new UpdatePublishCall__Outputs(this);
  }
}

export class UpdatePublishCall__Inputs {
  _call: UpdatePublishCall;

  constructor(call: UpdatePublishCall) {
    this._call = call;
  }

  get publishId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get salePrice(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get royaltyBasisPoints(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get name(): string {
    return this._call.inputValues[4].value.toString();
  }

  get description(): string {
    return this._call.inputValues[5].value.toString();
  }

  get materialURIs(): Array<string> {
    return this._call.inputValues[6].value.toStringArray();
  }

  get fromTokenIds(): Array<BigInt> {
    return this._call.inputValues[7].value.toBigIntArray();
  }
}

export class UpdatePublishCall__Outputs {
  _call: UpdatePublishCall;

  constructor(call: UpdatePublishCall) {
    this._call = call;
  }
}
