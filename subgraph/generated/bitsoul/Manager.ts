// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Manager__collectInputCollectDataStruct extends ethereum.Tuple {
  get publishId(): BigInt {
    return this[0].toBigInt();
  }

  get collectorSoulBoundTokenId(): BigInt {
    return this[1].toBigInt();
  }

  get collectValue(): BigInt {
    return this[2].toBigInt();
  }

  get data(): Bytes {
    return this[3].toBytes();
  }
}

export class Manager__createHubInputHubStruct extends ethereum.Tuple {
  get soulBoundTokenId(): BigInt {
    return this[0].toBigInt();
  }

  get name(): string {
    return this[1].toString();
  }

  get description(): string {
    return this[2].toString();
  }

  get imageURI(): string {
    return this[3].toString();
  }
}

export class Manager__createProfileInputVarsStruct extends ethereum.Tuple {
  get wallet(): Address {
    return this[0].toAddress();
  }

  get nickName(): string {
    return this[1].toString();
  }

  get imageURI(): string {
    return this[2].toString();
  }
}

export class Manager__createProjectInputProjectStruct extends ethereum.Tuple {
  get hubId(): BigInt {
    return this[0].toBigInt();
  }

  get soulBoundTokenId(): BigInt {
    return this[1].toBigInt();
  }

  get name(): string {
    return this[2].toString();
  }

  get description(): string {
    return this[3].toString();
  }

  get image(): string {
    return this[4].toString();
  }

  get metadataURI(): string {
    return this[5].toString();
  }

  get descriptor(): Address {
    return this[6].toAddress();
  }

  get defaultRoyaltyPoints(): BigInt {
    return this[7].toBigInt();
  }

  get feeShareType(): i32 {
    return this[8].toI32();
  }
}

export class Manager__getHubInfoResultValue0Struct extends ethereum.Tuple {
  get soulBoundTokenId(): BigInt {
    return this[0].toBigInt();
  }

  get name(): string {
    return this[1].toString();
  }

  get description(): string {
    return this[2].toString();
  }

  get imageURI(): string {
    return this[3].toString();
  }
}

export class Manager__getProjectInfoResultValue0Struct extends ethereum.Tuple {
  get hubId(): BigInt {
    return this[0].toBigInt();
  }

  get soulBoundTokenId(): BigInt {
    return this[1].toBigInt();
  }

  get name(): string {
    return this[2].toString();
  }

  get description(): string {
    return this[3].toString();
  }

  get image(): string {
    return this[4].toString();
  }

  get metadataURI(): string {
    return this[5].toString();
  }

  get descriptor(): Address {
    return this[6].toAddress();
  }

  get defaultRoyaltyPoints(): BigInt {
    return this[7].toBigInt();
  }

  get feeShareType(): i32 {
    return this[8].toI32();
  }
}

export class Manager__getPublicationByTokenIdResultValue0Struct extends ethereum.Tuple {
  get soulBoundTokenId(): BigInt {
    return this[0].toBigInt();
  }

  get hubId(): BigInt {
    return this[1].toBigInt();
  }

  get projectId(): BigInt {
    return this[2].toBigInt();
  }

  get salePrice(): BigInt {
    return this[3].toBigInt();
  }

  get royaltyBasisPoints(): BigInt {
    return this[4].toBigInt();
  }

  get amount(): BigInt {
    return this[5].toBigInt();
  }

  get name(): string {
    return this[6].toString();
  }

  get description(): string {
    return this[7].toString();
  }

  get materialURIs(): Array<string> {
    return this[8].toStringArray();
  }

  get fromTokenIds(): Array<BigInt> {
    return this[9].toBigIntArray();
  }

  get collectModule(): Address {
    return this[10].toAddress();
  }

  get collectModuleInitData(): Bytes {
    return this[11].toBytes();
  }

  get publishModule(): Address {
    return this[12].toAddress();
  }

  get publishModuleInitData(): Bytes {
    return this[13].toBytes();
  }
}

export class Manager__getPublishInfoResultValue0Struct extends ethereum.Tuple {
  get publication(): Manager__getPublishInfoResultValue0PublicationStruct {
    return changetype<Manager__getPublishInfoResultValue0PublicationStruct>(
      this[0].toTuple()
    );
  }

  get previousPublishId(): BigInt {
    return this[1].toBigInt();
  }

  get isMinted(): boolean {
    return this[2].toBoolean();
  }

  get tokenId(): BigInt {
    return this[3].toBigInt();
  }
}

export class Manager__getPublishInfoResultValue0PublicationStruct extends ethereum.Tuple {
  get soulBoundTokenId(): BigInt {
    return this[0].toBigInt();
  }

  get hubId(): BigInt {
    return this[1].toBigInt();
  }

  get projectId(): BigInt {
    return this[2].toBigInt();
  }

  get salePrice(): BigInt {
    return this[3].toBigInt();
  }

  get royaltyBasisPoints(): BigInt {
    return this[4].toBigInt();
  }

  get amount(): BigInt {
    return this[5].toBigInt();
  }

  get name(): string {
    return this[6].toString();
  }

  get description(): string {
    return this[7].toString();
  }

  get materialURIs(): Array<string> {
    return this[8].toStringArray();
  }

  get fromTokenIds(): Array<BigInt> {
    return this[9].toBigIntArray();
  }

  get collectModule(): Address {
    return this[10].toAddress();
  }

  get collectModuleInitData(): Bytes {
    return this[11].toBytes();
  }

  get publishModule(): Address {
    return this[12].toAddress();
  }

  get publishModuleInitData(): Bytes {
    return this[13].toBytes();
  }
}

export class Manager__prePublishInputPublicationStruct extends ethereum.Tuple {
  get soulBoundTokenId(): BigInt {
    return this[0].toBigInt();
  }

  get hubId(): BigInt {
    return this[1].toBigInt();
  }

  get projectId(): BigInt {
    return this[2].toBigInt();
  }

  get salePrice(): BigInt {
    return this[3].toBigInt();
  }

  get royaltyBasisPoints(): BigInt {
    return this[4].toBigInt();
  }

  get amount(): BigInt {
    return this[5].toBigInt();
  }

  get name(): string {
    return this[6].toString();
  }

  get description(): string {
    return this[7].toString();
  }

  get materialURIs(): Array<string> {
    return this[8].toStringArray();
  }

  get fromTokenIds(): Array<BigInt> {
    return this[9].toBigIntArray();
  }

  get collectModule(): Address {
    return this[10].toAddress();
  }

  get collectModuleInitData(): Bytes {
    return this[11].toBytes();
  }

  get publishModule(): Address {
    return this[12].toAddress();
  }

  get publishModuleInitData(): Bytes {
    return this[13].toBytes();
  }
}

export class Manager extends ethereum.SmartContract {
  static bind(address: Address): Manager {
    return new Manager("Manager", address);
  }

  calculateRoyalty(publishId: BigInt): BigInt {
    let result = super.call(
      "calculateRoyalty",
      "calculateRoyalty(uint256):(uint96)",
      [ethereum.Value.fromUnsignedBigInt(publishId)]
    );

    return result[0].toBigInt();
  }

  try_calculateRoyalty(publishId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateRoyalty",
      "calculateRoyalty(uint256):(uint96)",
      [ethereum.Value.fromUnsignedBigInt(publishId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  collect(collectData: Manager__collectInputCollectDataStruct): BigInt {
    let result = super.call(
      "collect",
      "collect((uint256,uint256,uint256,bytes)):(uint256)",
      [ethereum.Value.fromTuple(collectData)]
    );

    return result[0].toBigInt();
  }

  try_collect(
    collectData: Manager__collectInputCollectDataStruct
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "collect",
      "collect((uint256,uint256,uint256,bytes)):(uint256)",
      [ethereum.Value.fromTuple(collectData)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createHub(hub: Manager__createHubInputHubStruct): BigInt {
    let result = super.call(
      "createHub",
      "createHub((uint256,string,string,string)):(uint256)",
      [ethereum.Value.fromTuple(hub)]
    );

    return result[0].toBigInt();
  }

  try_createHub(
    hub: Manager__createHubInputHubStruct
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createHub",
      "createHub((uint256,string,string,string)):(uint256)",
      [ethereum.Value.fromTuple(hub)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createProfile(vars: Manager__createProfileInputVarsStruct): BigInt {
    let result = super.call(
      "createProfile",
      "createProfile((address,string,string)):(uint256)",
      [ethereum.Value.fromTuple(vars)]
    );

    return result[0].toBigInt();
  }

  try_createProfile(
    vars: Manager__createProfileInputVarsStruct
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createProfile",
      "createProfile((address,string,string)):(uint256)",
      [ethereum.Value.fromTuple(vars)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createProject(project: Manager__createProjectInputProjectStruct): BigInt {
    let result = super.call(
      "createProject",
      "createProject((uint256,uint256,string,string,string,string,address,uint96,uint8)):(uint256)",
      [ethereum.Value.fromTuple(project)]
    );

    return result[0].toBigInt();
  }

  try_createProject(
    project: Manager__createProjectInputProjectStruct
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createProject",
      "createProject((uint256,uint256,string,string,string,string,address,uint96,uint8)):(uint256)",
      [ethereum.Value.fromTuple(project)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDerivativeNFT(projectId: BigInt): Address {
    let result = super.call(
      "getDerivativeNFT",
      "getDerivativeNFT(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(projectId)]
    );

    return result[0].toAddress();
  }

  try_getDerivativeNFT(projectId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getDerivativeNFT",
      "getDerivativeNFT(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(projectId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getDispatcher(soulBoundToken: BigInt): Address {
    let result = super.call(
      "getDispatcher",
      "getDispatcher(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(soulBoundToken)]
    );

    return result[0].toAddress();
  }

  try_getDispatcher(soulBoundToken: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getDispatcher",
      "getDispatcher(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(soulBoundToken)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getGenesisSoulBoundTokenIdByPublishId(publishId: BigInt): BigInt {
    let result = super.call(
      "getGenesisSoulBoundTokenIdByPublishId",
      "getGenesisSoulBoundTokenIdByPublishId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(publishId)]
    );

    return result[0].toBigInt();
  }

  try_getGenesisSoulBoundTokenIdByPublishId(
    publishId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getGenesisSoulBoundTokenIdByPublishId",
      "getGenesisSoulBoundTokenIdByPublishId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(publishId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getGlobalModule(): Address {
    let result = super.call(
      "getGlobalModule",
      "getGlobalModule():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getGlobalModule(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getGlobalModule",
      "getGlobalModule():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getGovernance(): Address {
    let result = super.call("getGovernance", "getGovernance():(address)", []);

    return result[0].toAddress();
  }

  try_getGovernance(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getGovernance",
      "getGovernance():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getHubInfo(hubId: BigInt): Manager__getHubInfoResultValue0Struct {
    let result = super.call(
      "getHubInfo",
      "getHubInfo(uint256):((uint256,string,string,string))",
      [ethereum.Value.fromUnsignedBigInt(hubId)]
    );

    return changetype<Manager__getHubInfoResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getHubInfo(
    hubId: BigInt
  ): ethereum.CallResult<Manager__getHubInfoResultValue0Struct> {
    let result = super.tryCall(
      "getHubInfo",
      "getHubInfo(uint256):((uint256,string,string,string))",
      [ethereum.Value.fromUnsignedBigInt(hubId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Manager__getHubInfoResultValue0Struct>(value[0].toTuple())
    );
  }

  getProjectInfo(
    projectId_: BigInt
  ): Manager__getProjectInfoResultValue0Struct {
    let result = super.call(
      "getProjectInfo",
      "getProjectInfo(uint256):((uint256,uint256,string,string,string,string,address,uint96,uint8))",
      [ethereum.Value.fromUnsignedBigInt(projectId_)]
    );

    return changetype<Manager__getProjectInfoResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getProjectInfo(
    projectId_: BigInt
  ): ethereum.CallResult<Manager__getProjectInfoResultValue0Struct> {
    let result = super.tryCall(
      "getProjectInfo",
      "getProjectInfo(uint256):((uint256,uint256,string,string,string,string,address,uint96,uint8))",
      [ethereum.Value.fromUnsignedBigInt(projectId_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Manager__getProjectInfoResultValue0Struct>(value[0].toTuple())
    );
  }

  getPublicationByTokenId(
    tokenId_: BigInt
  ): Manager__getPublicationByTokenIdResultValue0Struct {
    let result = super.call(
      "getPublicationByTokenId",
      "getPublicationByTokenId(uint256):((uint256,uint256,uint256,uint256,uint256,uint256,string,string,string[],uint256[],address,bytes,address,bytes))",
      [ethereum.Value.fromUnsignedBigInt(tokenId_)]
    );

    return changetype<Manager__getPublicationByTokenIdResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getPublicationByTokenId(
    tokenId_: BigInt
  ): ethereum.CallResult<Manager__getPublicationByTokenIdResultValue0Struct> {
    let result = super.tryCall(
      "getPublicationByTokenId",
      "getPublicationByTokenId(uint256):((uint256,uint256,uint256,uint256,uint256,uint256,string,string,string[],uint256[],address,bytes,address,bytes))",
      [ethereum.Value.fromUnsignedBigInt(tokenId_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Manager__getPublicationByTokenIdResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getPublishInfo(
    publishId_: BigInt
  ): Manager__getPublishInfoResultValue0Struct {
    let result = super.call(
      "getPublishInfo",
      "getPublishInfo(uint256):(((uint256,uint256,uint256,uint256,uint256,uint256,string,string,string[],uint256[],address,bytes,address,bytes),uint256,bool,uint256))",
      [ethereum.Value.fromUnsignedBigInt(publishId_)]
    );

    return changetype<Manager__getPublishInfoResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getPublishInfo(
    publishId_: BigInt
  ): ethereum.CallResult<Manager__getPublishInfoResultValue0Struct> {
    let result = super.tryCall(
      "getPublishInfo",
      "getPublishInfo(uint256):(((uint256,uint256,uint256,uint256,uint256,uint256,string,string,string[],uint256[],address,bytes,address,bytes),uint256,bool,uint256))",
      [ethereum.Value.fromUnsignedBigInt(publishId_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Manager__getPublishInfoResultValue0Struct>(value[0].toTuple())
    );
  }

  getReceiver(): Address {
    let result = super.call("getReceiver", "getReceiver():(address)", []);

    return result[0].toAddress();
  }

  try_getReceiver(): ethereum.CallResult<Address> {
    let result = super.tryCall("getReceiver", "getReceiver():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getState(): i32 {
    let result = super.call("getState", "getState():(uint8)", []);

    return result[0].toI32();
  }

  try_getState(): ethereum.CallResult<i32> {
    let result = super.tryCall("getState", "getState():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getWalletBySoulBoundTokenId(soulBoundTokenId: BigInt): Address {
    let result = super.call(
      "getWalletBySoulBoundTokenId",
      "getWalletBySoulBoundTokenId(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(soulBoundTokenId)]
    );

    return result[0].toAddress();
  }

  try_getWalletBySoulBoundTokenId(
    soulBoundTokenId: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getWalletBySoulBoundTokenId",
      "getWalletBySoulBoundTokenId(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(soulBoundTokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  prePublish(publication: Manager__prePublishInputPublicationStruct): BigInt {
    let result = super.call(
      "prePublish",
      "prePublish((uint256,uint256,uint256,uint256,uint256,uint256,string,string,string[],uint256[],address,bytes,address,bytes)):(uint256)",
      [ethereum.Value.fromTuple(publication)]
    );

    return result[0].toBigInt();
  }

  try_prePublish(
    publication: Manager__prePublishInputPublicationStruct
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "prePublish",
      "prePublish((uint256,uint256,uint256,uint256,uint256,uint256,string,string,string[],uint256[],address,bytes,address,bytes)):(uint256)",
      [ethereum.Value.fromTuple(publication)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  publish(publishId: BigInt): BigInt {
    let result = super.call("publish", "publish(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(publishId)
    ]);

    return result[0].toBigInt();
  }

  try_publish(publishId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("publish", "publish(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(publishId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sigNonces(param0: Address): BigInt {
    let result = super.call("sigNonces", "sigNonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_sigNonces(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("sigNonces", "sigNonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  version(): BigInt {
    let result = super.call("version", "version():(uint256)", []);

    return result[0].toBigInt();
  }

  try_version(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("version", "version():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get dNftV1_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get receiver_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddMarketCall extends ethereum.Call {
  get inputs(): AddMarketCall__Inputs {
    return new AddMarketCall__Inputs(this);
  }

  get outputs(): AddMarketCall__Outputs {
    return new AddMarketCall__Outputs(this);
  }
}

export class AddMarketCall__Inputs {
  _call: AddMarketCall;

  constructor(call: AddMarketCall) {
    this._call = call;
  }

  get derivativeNFT_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get precision_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get feePayType_(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get feeType_(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get feeAmount_(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get feeRate_(): i32 {
    return this._call.inputValues[5].value.toI32();
  }
}

export class AddMarketCall__Outputs {
  _call: AddMarketCall;

  constructor(call: AddMarketCall) {
    this._call = call;
  }
}

export class AirdropCall extends ethereum.Call {
  get inputs(): AirdropCall__Inputs {
    return new AirdropCall__Inputs(this);
  }

  get outputs(): AirdropCall__Outputs {
    return new AirdropCall__Outputs(this);
  }
}

export class AirdropCall__Inputs {
  _call: AirdropCall;

  constructor(call: AirdropCall) {
    this._call = call;
  }

  get airdropData(): AirdropCallAirdropDataStruct {
    return changetype<AirdropCallAirdropDataStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class AirdropCall__Outputs {
  _call: AirdropCall;

  constructor(call: AirdropCall) {
    this._call = call;
  }
}

export class AirdropCallAirdropDataStruct extends ethereum.Tuple {
  get publishId(): BigInt {
    return this[0].toBigInt();
  }

  get ownershipSoulBoundTokenId(): BigInt {
    return this[1].toBigInt();
  }

  get toSoulBoundTokenIds(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get tokenId(): BigInt {
    return this[3].toBigInt();
  }

  get values(): Array<BigInt> {
    return this[4].toBigIntArray();
  }
}

export class BurnNDPTCall extends ethereum.Call {
  get inputs(): BurnNDPTCall__Inputs {
    return new BurnNDPTCall__Inputs(this);
  }

  get outputs(): BurnNDPTCall__Outputs {
    return new BurnNDPTCall__Outputs(this);
  }
}

export class BurnNDPTCall__Inputs {
  _call: BurnNDPTCall;

  constructor(call: BurnNDPTCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnNDPTCall__Outputs {
  _call: BurnNDPTCall;

  constructor(call: BurnNDPTCall) {
    this._call = call;
  }
}

export class BurnNDPTValueCall extends ethereum.Call {
  get inputs(): BurnNDPTValueCall__Inputs {
    return new BurnNDPTValueCall__Inputs(this);
  }

  get outputs(): BurnNDPTValueCall__Outputs {
    return new BurnNDPTValueCall__Outputs(this);
  }
}

export class BurnNDPTValueCall__Inputs {
  _call: BurnNDPTValueCall;

  constructor(call: BurnNDPTValueCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BurnNDPTValueCall__Outputs {
  _call: BurnNDPTValueCall;

  constructor(call: BurnNDPTValueCall) {
    this._call = call;
  }
}

export class BuyUnitsCall extends ethereum.Call {
  get inputs(): BuyUnitsCall__Inputs {
    return new BuyUnitsCall__Inputs(this);
  }

  get outputs(): BuyUnitsCall__Outputs {
    return new BuyUnitsCall__Outputs(this);
  }
}

export class BuyUnitsCall__Inputs {
  _call: BuyUnitsCall;

  constructor(call: BuyUnitsCall) {
    this._call = call;
  }

  get soulBoundTokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get buyer(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get saleId(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get units(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class BuyUnitsCall__Outputs {
  _call: BuyUnitsCall;

  constructor(call: BuyUnitsCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get fee(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class CollectCall extends ethereum.Call {
  get inputs(): CollectCall__Inputs {
    return new CollectCall__Inputs(this);
  }

  get outputs(): CollectCall__Outputs {
    return new CollectCall__Outputs(this);
  }
}

export class CollectCall__Inputs {
  _call: CollectCall;

  constructor(call: CollectCall) {
    this._call = call;
  }

  get collectData(): CollectCallCollectDataStruct {
    return changetype<CollectCallCollectDataStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class CollectCall__Outputs {
  _call: CollectCall;

  constructor(call: CollectCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CollectCallCollectDataStruct extends ethereum.Tuple {
  get publishId(): BigInt {
    return this[0].toBigInt();
  }

  get collectorSoulBoundTokenId(): BigInt {
    return this[1].toBigInt();
  }

  get collectValue(): BigInt {
    return this[2].toBigInt();
  }

  get data(): Bytes {
    return this[3].toBytes();
  }
}

export class CreateHubCall extends ethereum.Call {
  get inputs(): CreateHubCall__Inputs {
    return new CreateHubCall__Inputs(this);
  }

  get outputs(): CreateHubCall__Outputs {
    return new CreateHubCall__Outputs(this);
  }
}

export class CreateHubCall__Inputs {
  _call: CreateHubCall;

  constructor(call: CreateHubCall) {
    this._call = call;
  }

  get hub(): CreateHubCallHubStruct {
    return changetype<CreateHubCallHubStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class CreateHubCall__Outputs {
  _call: CreateHubCall;

  constructor(call: CreateHubCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreateHubCallHubStruct extends ethereum.Tuple {
  get soulBoundTokenId(): BigInt {
    return this[0].toBigInt();
  }

  get name(): string {
    return this[1].toString();
  }

  get description(): string {
    return this[2].toString();
  }

  get imageURI(): string {
    return this[3].toString();
  }
}

export class CreateProfileCall extends ethereum.Call {
  get inputs(): CreateProfileCall__Inputs {
    return new CreateProfileCall__Inputs(this);
  }

  get outputs(): CreateProfileCall__Outputs {
    return new CreateProfileCall__Outputs(this);
  }
}

export class CreateProfileCall__Inputs {
  _call: CreateProfileCall;

  constructor(call: CreateProfileCall) {
    this._call = call;
  }

  get vars(): CreateProfileCallVarsStruct {
    return changetype<CreateProfileCallVarsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class CreateProfileCall__Outputs {
  _call: CreateProfileCall;

  constructor(call: CreateProfileCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreateProfileCallVarsStruct extends ethereum.Tuple {
  get wallet(): Address {
    return this[0].toAddress();
  }

  get nickName(): string {
    return this[1].toString();
  }

  get imageURI(): string {
    return this[2].toString();
  }
}

export class CreateProjectCall extends ethereum.Call {
  get inputs(): CreateProjectCall__Inputs {
    return new CreateProjectCall__Inputs(this);
  }

  get outputs(): CreateProjectCall__Outputs {
    return new CreateProjectCall__Outputs(this);
  }
}

export class CreateProjectCall__Inputs {
  _call: CreateProjectCall;

  constructor(call: CreateProjectCall) {
    this._call = call;
  }

  get project(): CreateProjectCallProjectStruct {
    return changetype<CreateProjectCallProjectStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class CreateProjectCall__Outputs {
  _call: CreateProjectCall;

  constructor(call: CreateProjectCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreateProjectCallProjectStruct extends ethereum.Tuple {
  get hubId(): BigInt {
    return this[0].toBigInt();
  }

  get soulBoundTokenId(): BigInt {
    return this[1].toBigInt();
  }

  get name(): string {
    return this[2].toString();
  }

  get description(): string {
    return this[3].toString();
  }

  get image(): string {
    return this[4].toString();
  }

  get metadataURI(): string {
    return this[5].toString();
  }

  get descriptor(): Address {
    return this[6].toAddress();
  }

  get defaultRoyaltyPoints(): BigInt {
    return this[7].toBigInt();
  }

  get feeShareType(): i32 {
    return this[8].toI32();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get governance(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MintNDPTValueCall extends ethereum.Call {
  get inputs(): MintNDPTValueCall__Inputs {
    return new MintNDPTValueCall__Inputs(this);
  }

  get outputs(): MintNDPTValueCall__Outputs {
    return new MintNDPTValueCall__Outputs(this);
  }
}

export class MintNDPTValueCall__Inputs {
  _call: MintNDPTValueCall;

  constructor(call: MintNDPTValueCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintNDPTValueCall__Outputs {
  _call: MintNDPTValueCall;

  constructor(call: MintNDPTValueCall) {
    this._call = call;
  }
}

export class PrePublishCall extends ethereum.Call {
  get inputs(): PrePublishCall__Inputs {
    return new PrePublishCall__Inputs(this);
  }

  get outputs(): PrePublishCall__Outputs {
    return new PrePublishCall__Outputs(this);
  }
}

export class PrePublishCall__Inputs {
  _call: PrePublishCall;

  constructor(call: PrePublishCall) {
    this._call = call;
  }

  get publication(): PrePublishCallPublicationStruct {
    return changetype<PrePublishCallPublicationStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class PrePublishCall__Outputs {
  _call: PrePublishCall;

  constructor(call: PrePublishCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PrePublishCallPublicationStruct extends ethereum.Tuple {
  get soulBoundTokenId(): BigInt {
    return this[0].toBigInt();
  }

  get hubId(): BigInt {
    return this[1].toBigInt();
  }

  get projectId(): BigInt {
    return this[2].toBigInt();
  }

  get salePrice(): BigInt {
    return this[3].toBigInt();
  }

  get royaltyBasisPoints(): BigInt {
    return this[4].toBigInt();
  }

  get amount(): BigInt {
    return this[5].toBigInt();
  }

  get name(): string {
    return this[6].toString();
  }

  get description(): string {
    return this[7].toString();
  }

  get materialURIs(): Array<string> {
    return this[8].toStringArray();
  }

  get fromTokenIds(): Array<BigInt> {
    return this[9].toBigIntArray();
  }

  get collectModule(): Address {
    return this[10].toAddress();
  }

  get collectModuleInitData(): Bytes {
    return this[11].toBytes();
  }

  get publishModule(): Address {
    return this[12].toAddress();
  }

  get publishModuleInitData(): Bytes {
    return this[13].toBytes();
  }
}

export class PublishCall extends ethereum.Call {
  get inputs(): PublishCall__Inputs {
    return new PublishCall__Inputs(this);
  }

  get outputs(): PublishCall__Outputs {
    return new PublishCall__Outputs(this);
  }
}

export class PublishCall__Inputs {
  _call: PublishCall;

  constructor(call: PublishCall) {
    this._call = call;
  }

  get publishId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class PublishCall__Outputs {
  _call: PublishCall;

  constructor(call: PublishCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PublishFixedPriceCall extends ethereum.Call {
  get inputs(): PublishFixedPriceCall__Inputs {
    return new PublishFixedPriceCall__Inputs(this);
  }

  get outputs(): PublishFixedPriceCall__Outputs {
    return new PublishFixedPriceCall__Outputs(this);
  }
}

export class PublishFixedPriceCall__Inputs {
  _call: PublishFixedPriceCall;

  constructor(call: PublishFixedPriceCall) {
    this._call = call;
  }

  get sale(): PublishFixedPriceCallSaleStruct {
    return changetype<PublishFixedPriceCallSaleStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class PublishFixedPriceCall__Outputs {
  _call: PublishFixedPriceCall;

  constructor(call: PublishFixedPriceCall) {
    this._call = call;
  }
}

export class PublishFixedPriceCallSaleStruct extends ethereum.Tuple {
  get saleId(): i32 {
    return this[0].toI32();
  }

  get soulBoundTokenId(): BigInt {
    return this[1].toBigInt();
  }

  get projectId(): BigInt {
    return this[2].toBigInt();
  }

  get tokenId(): BigInt {
    return this[3].toBigInt();
  }

  get startTime(): BigInt {
    return this[4].toBigInt();
  }

  get seller(): Address {
    return this[5].toAddress();
  }

  get price(): BigInt {
    return this[6].toBigInt();
  }

  get priceType(): i32 {
    return this[7].toI32();
  }

  get total(): BigInt {
    return this[8].toBigInt();
  }

  get units(): BigInt {
    return this[9].toBigInt();
  }

  get min(): BigInt {
    return this[10].toBigInt();
  }

  get max(): BigInt {
    return this[11].toBigInt();
  }

  get derivativeNFT(): Address {
    return this[12].toAddress();
  }

  get currency(): Address {
    return this[13].toAddress();
  }

  get useAllowList(): boolean {
    return this[14].toBoolean();
  }

  get isValid(): boolean {
    return this[15].toBoolean();
  }
}

export class RemoveMarketCall extends ethereum.Call {
  get inputs(): RemoveMarketCall__Inputs {
    return new RemoveMarketCall__Inputs(this);
  }

  get outputs(): RemoveMarketCall__Outputs {
    return new RemoveMarketCall__Outputs(this);
  }
}

export class RemoveMarketCall__Inputs {
  _call: RemoveMarketCall;

  constructor(call: RemoveMarketCall) {
    this._call = call;
  }

  get derivativeNFT_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveMarketCall__Outputs {
  _call: RemoveMarketCall;

  constructor(call: RemoveMarketCall) {
    this._call = call;
  }
}

export class RemoveSaleCall extends ethereum.Call {
  get inputs(): RemoveSaleCall__Inputs {
    return new RemoveSaleCall__Inputs(this);
  }

  get outputs(): RemoveSaleCall__Outputs {
    return new RemoveSaleCall__Outputs(this);
  }
}

export class RemoveSaleCall__Inputs {
  _call: RemoveSaleCall;

  constructor(call: RemoveSaleCall) {
    this._call = call;
  }

  get saleId_(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class RemoveSaleCall__Outputs {
  _call: RemoveSaleCall;

  constructor(call: RemoveSaleCall) {
    this._call = call;
  }
}

export class SetDispatcherWithSigCall extends ethereum.Call {
  get inputs(): SetDispatcherWithSigCall__Inputs {
    return new SetDispatcherWithSigCall__Inputs(this);
  }

  get outputs(): SetDispatcherWithSigCall__Outputs {
    return new SetDispatcherWithSigCall__Outputs(this);
  }
}

export class SetDispatcherWithSigCall__Inputs {
  _call: SetDispatcherWithSigCall;

  constructor(call: SetDispatcherWithSigCall) {
    this._call = call;
  }

  get vars(): SetDispatcherWithSigCallVarsStruct {
    return changetype<SetDispatcherWithSigCallVarsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class SetDispatcherWithSigCall__Outputs {
  _call: SetDispatcherWithSigCall;

  constructor(call: SetDispatcherWithSigCall) {
    this._call = call;
  }
}

export class SetDispatcherWithSigCallVarsStruct extends ethereum.Tuple {
  get soulBoundTokenId(): BigInt {
    return this[0].toBigInt();
  }

  get dispatcher(): Address {
    return this[1].toAddress();
  }

  get sig(): SetDispatcherWithSigCallVarsSigStruct {
    return changetype<SetDispatcherWithSigCallVarsSigStruct>(this[2].toTuple());
  }
}

export class SetDispatcherWithSigCallVarsSigStruct extends ethereum.Tuple {
  get v(): i32 {
    return this[0].toI32();
  }

  get r(): Bytes {
    return this[1].toBytes();
  }

  get s(): Bytes {
    return this[2].toBytes();
  }

  get deadline(): BigInt {
    return this[3].toBigInt();
  }
}

export class SetEmergencyAdminCall extends ethereum.Call {
  get inputs(): SetEmergencyAdminCall__Inputs {
    return new SetEmergencyAdminCall__Inputs(this);
  }

  get outputs(): SetEmergencyAdminCall__Outputs {
    return new SetEmergencyAdminCall__Outputs(this);
  }
}

export class SetEmergencyAdminCall__Inputs {
  _call: SetEmergencyAdminCall;

  constructor(call: SetEmergencyAdminCall) {
    this._call = call;
  }

  get newEmergencyAdmin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetEmergencyAdminCall__Outputs {
  _call: SetEmergencyAdminCall;

  constructor(call: SetEmergencyAdminCall) {
    this._call = call;
  }
}

export class SetGlobalModuleCall extends ethereum.Call {
  get inputs(): SetGlobalModuleCall__Inputs {
    return new SetGlobalModuleCall__Inputs(this);
  }

  get outputs(): SetGlobalModuleCall__Outputs {
    return new SetGlobalModuleCall__Outputs(this);
  }
}

export class SetGlobalModuleCall__Inputs {
  _call: SetGlobalModuleCall;

  constructor(call: SetGlobalModuleCall) {
    this._call = call;
  }

  get moduleGlobals(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetGlobalModuleCall__Outputs {
  _call: SetGlobalModuleCall;

  constructor(call: SetGlobalModuleCall) {
    this._call = call;
  }
}

export class SetGovernanceCall extends ethereum.Call {
  get inputs(): SetGovernanceCall__Inputs {
    return new SetGovernanceCall__Inputs(this);
  }

  get outputs(): SetGovernanceCall__Outputs {
    return new SetGovernanceCall__Outputs(this);
  }
}

export class SetGovernanceCall__Inputs {
  _call: SetGovernanceCall;

  constructor(call: SetGovernanceCall) {
    this._call = call;
  }

  get newGovernance(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetGovernanceCall__Outputs {
  _call: SetGovernanceCall;

  constructor(call: SetGovernanceCall) {
    this._call = call;
  }
}

export class SetProfileImageURICall extends ethereum.Call {
  get inputs(): SetProfileImageURICall__Inputs {
    return new SetProfileImageURICall__Inputs(this);
  }

  get outputs(): SetProfileImageURICall__Outputs {
    return new SetProfileImageURICall__Outputs(this);
  }
}

export class SetProfileImageURICall__Inputs {
  _call: SetProfileImageURICall;

  constructor(call: SetProfileImageURICall) {
    this._call = call;
  }

  get soulBoundTokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get imageURI(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class SetProfileImageURICall__Outputs {
  _call: SetProfileImageURICall;

  constructor(call: SetProfileImageURICall) {
    this._call = call;
  }
}

export class SetStateCall extends ethereum.Call {
  get inputs(): SetStateCall__Inputs {
    return new SetStateCall__Inputs(this);
  }

  get outputs(): SetStateCall__Outputs {
    return new SetStateCall__Outputs(this);
  }
}

export class SetStateCall__Inputs {
  _call: SetStateCall;

  constructor(call: SetStateCall) {
    this._call = call;
  }

  get newState(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class SetStateCall__Outputs {
  _call: SetStateCall;

  constructor(call: SetStateCall) {
    this._call = call;
  }
}

export class TransferDerivativeNFTCall extends ethereum.Call {
  get inputs(): TransferDerivativeNFTCall__Inputs {
    return new TransferDerivativeNFTCall__Inputs(this);
  }

  get outputs(): TransferDerivativeNFTCall__Outputs {
    return new TransferDerivativeNFTCall__Outputs(this);
  }
}

export class TransferDerivativeNFTCall__Inputs {
  _call: TransferDerivativeNFTCall;

  constructor(call: TransferDerivativeNFTCall) {
    this._call = call;
  }

  get projectId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get fromSoulBoundTokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get toSoulBoundTokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class TransferDerivativeNFTCall__Outputs {
  _call: TransferDerivativeNFTCall;

  constructor(call: TransferDerivativeNFTCall) {
    this._call = call;
  }
}

export class TransferValueDerivativeNFTCall extends ethereum.Call {
  get inputs(): TransferValueDerivativeNFTCall__Inputs {
    return new TransferValueDerivativeNFTCall__Inputs(this);
  }

  get outputs(): TransferValueDerivativeNFTCall__Outputs {
    return new TransferValueDerivativeNFTCall__Outputs(this);
  }
}

export class TransferValueDerivativeNFTCall__Inputs {
  _call: TransferValueDerivativeNFTCall;

  constructor(call: TransferValueDerivativeNFTCall) {
    this._call = call;
  }

  get projectId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get fromSoulBoundTokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get toSoulBoundTokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get value(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class TransferValueDerivativeNFTCall__Outputs {
  _call: TransferValueDerivativeNFTCall;

  constructor(call: TransferValueDerivativeNFTCall) {
    this._call = call;
  }
}

export class UpdatePublishCall extends ethereum.Call {
  get inputs(): UpdatePublishCall__Inputs {
    return new UpdatePublishCall__Inputs(this);
  }

  get outputs(): UpdatePublishCall__Outputs {
    return new UpdatePublishCall__Outputs(this);
  }
}

export class UpdatePublishCall__Inputs {
  _call: UpdatePublishCall;

  constructor(call: UpdatePublishCall) {
    this._call = call;
  }

  get publishId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get salePrice(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get royaltyBasisPoints(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get name(): string {
    return this._call.inputValues[4].value.toString();
  }

  get description(): string {
    return this._call.inputValues[5].value.toString();
  }

  get materialURIs(): Array<string> {
    return this._call.inputValues[6].value.toStringArray();
  }

  get fromTokenIds(): Array<BigInt> {
    return this._call.inputValues[7].value.toBigIntArray();
  }
}

export class UpdatePublishCall__Outputs {
  _call: UpdatePublishCall;

  constructor(call: UpdatePublishCall) {
    this._call = call;
  }
}
