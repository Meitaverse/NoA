// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AdminChanged extends ethereum.Event {
  get params(): AdminChanged__Params {
    return new AdminChanged__Params(this);
  }
}

export class AdminChanged__Params {
  _event: AdminChanged;

  constructor(event: AdminChanged) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class BeaconUpgraded extends ethereum.Event {
  get params(): BeaconUpgraded__Params {
    return new BeaconUpgraded__Params(this);
  }
}

export class BeaconUpgraded__Params {
  _event: BeaconUpgraded;

  constructor(event: BeaconUpgraded) {
    this._event = event;
  }

  get beacon(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class BankTreasury__getExchangePriceResultValue0Struct extends ethereum.Tuple {
  get currencyAmount(): BigInt {
    return this[0].toBigInt();
  }

  get sbtAmount(): BigInt {
    return this[1].toBigInt();
  }
}

export class BankTreasury__getLockupsResult {
  value0: Array<BigInt>;
  value1: Array<BigInt>;

  constructor(value0: Array<BigInt>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }

  getExpiries(): Array<BigInt> {
    return this.value0;
  }

  getAmounts(): Array<BigInt> {
    return this.value1;
  }
}

export class BankTreasury__getTransactionResult {
  value0: Address;
  value1: Address;
  value2: BigInt;
  value3: BigInt;
  value4: Bytes;
  value5: boolean;
  value6: BigInt;

  constructor(
    value0: Address,
    value1: Address,
    value2: BigInt,
    value3: BigInt,
    value4: Bytes,
    value5: boolean,
    value6: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromBytes(this.value4));
    map.set("value5", ethereum.Value.fromBoolean(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }

  getCurrency(): Address {
    return this.value0;
  }

  getTo(): Address {
    return this.value1;
  }

  getFromTokenId(): BigInt {
    return this.value2;
  }

  getValue(): BigInt {
    return this.value3;
  }

  getData(): Bytes {
    return this.value4;
  }

  getExecuted(): boolean {
    return this.value5;
  }

  getNumConfirmations(): BigInt {
    return this.value6;
  }
}

export class BankTreasury extends ethereum.SmartContract {
  static bind(address: Address): BankTreasury {
    return new BankTreasury("BankTreasury", address);
  }

  FEEMODULE_ROLE(): Bytes {
    let result = super.call("FEEMODULE_ROLE", "FEEMODULE_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_FEEMODULE_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "FEEMODULE_ROLE",
      "FEEMODULE_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  balanceOf(currency: Address, soulBoundTokenId: BigInt): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(currency),
        ethereum.Value.fromUnsignedBigInt(soulBoundTokenId)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceOf(
    currency: Address,
    soulBoundTokenId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(currency),
        ethereum.Value.fromUnsignedBigInt(soulBoundTokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateAmountSBT(currency: Address, amountOfSBT: BigInt): BigInt {
    let result = super.call(
      "calculateAmountSBT",
      "calculateAmountSBT(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(currency),
        ethereum.Value.fromUnsignedBigInt(amountOfSBT)
      ]
    );

    return result[0].toBigInt();
  }

  try_calculateAmountSBT(
    currency: Address,
    amountOfSBT: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateAmountSBT",
      "calculateAmountSBT(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(currency),
        ethereum.Value.fromUnsignedBigInt(amountOfSBT)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  escrowBalanceOf(currency: Address, soulBoundTokenId: BigInt): BigInt {
    let result = super.call(
      "escrowBalanceOf",
      "escrowBalanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(currency),
        ethereum.Value.fromUnsignedBigInt(soulBoundTokenId)
      ]
    );

    return result[0].toBigInt();
  }

  try_escrowBalanceOf(
    currency: Address,
    soulBoundTokenId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "escrowBalanceOf",
      "escrowBalanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(currency),
        ethereum.Value.fromUnsignedBigInt(soulBoundTokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAdminMember(index: BigInt): Address {
    let result = super.call(
      "getAdminMember",
      "getAdminMember(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );

    return result[0].toAddress();
  }

  try_getAdminMember(index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getAdminMember",
      "getAdminMember(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAdminMemberCount(): BigInt {
    let result = super.call(
      "getAdminMemberCount",
      "getAdminMemberCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getAdminMemberCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAdminMemberCount",
      "getAdminMemberCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getExchangePrice(
    currency: Address
  ): BankTreasury__getExchangePriceResultValue0Struct {
    let result = super.call(
      "getExchangePrice",
      "getExchangePrice(address):((uint256,uint256))",
      [ethereum.Value.fromAddress(currency)]
    );

    return changetype<BankTreasury__getExchangePriceResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getExchangePrice(
    currency: Address
  ): ethereum.CallResult<BankTreasury__getExchangePriceResultValue0Struct> {
    let result = super.tryCall(
      "getExchangePrice",
      "getExchangePrice(address):((uint256,uint256))",
      [ethereum.Value.fromAddress(currency)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<BankTreasury__getExchangePriceResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getFeeModuleMember(index: BigInt): Address {
    let result = super.call(
      "getFeeModuleMember",
      "getFeeModuleMember(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );

    return result[0].toAddress();
  }

  try_getFeeModuleMember(index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getFeeModuleMember",
      "getFeeModuleMember(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getFeeModuleMemberCount(): BigInt {
    let result = super.call(
      "getFeeModuleMemberCount",
      "getFeeModuleMemberCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getFeeModuleMemberCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getFeeModuleMemberCount",
      "getFeeModuleMemberCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getGlobalModule(): Address {
    let result = super.call(
      "getGlobalModule",
      "getGlobalModule():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getGlobalModule(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getGlobalModule",
      "getGlobalModule():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getGovernance(): Address {
    let result = super.call("getGovernance", "getGovernance():(address)", []);

    return result[0].toAddress();
  }

  try_getGovernance(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getGovernance",
      "getGovernance():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getLockupDuration(): BigInt {
    let result = super.call(
      "getLockupDuration",
      "getLockupDuration():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getLockupDuration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLockupDuration",
      "getLockupDuration():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLockups(
    currency: Address,
    soulBoundTokenId: BigInt
  ): BankTreasury__getLockupsResult {
    let result = super.call(
      "getLockups",
      "getLockups(address,uint256):(uint256[],uint256[])",
      [
        ethereum.Value.fromAddress(currency),
        ethereum.Value.fromUnsignedBigInt(soulBoundTokenId)
      ]
    );

    return new BankTreasury__getLockupsResult(
      result[0].toBigIntArray(),
      result[1].toBigIntArray()
    );
  }

  try_getLockups(
    currency: Address,
    soulBoundTokenId: BigInt
  ): ethereum.CallResult<BankTreasury__getLockupsResult> {
    let result = super.tryCall(
      "getLockups",
      "getLockups(address,uint256):(uint256[],uint256[])",
      [
        ethereum.Value.fromAddress(currency),
        ethereum.Value.fromUnsignedBigInt(soulBoundTokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BankTreasury__getLockupsResult(
        value[0].toBigIntArray(),
        value[1].toBigIntArray()
      )
    );
  }

  getManager(): Address {
    let result = super.call("getManager", "getManager():(address)", []);

    return result[0].toAddress();
  }

  try_getManager(): ethereum.CallResult<Address> {
    let result = super.tryCall("getManager", "getManager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getSBT(): Address {
    let result = super.call("getSBT", "getSBT():(address)", []);

    return result[0].toAddress();
  }

  try_getSBT(): ethereum.CallResult<Address> {
    let result = super.tryCall("getSBT", "getSBT():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getSigners(): Array<Address> {
    let result = super.call("getSigners", "getSigners():(address[])", []);

    return result[0].toAddressArray();
  }

  try_getSigners(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall("getSigners", "getSigners():(address[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getTransaction(_txIndex: BigInt): BankTreasury__getTransactionResult {
    let result = super.call(
      "getTransaction",
      "getTransaction(uint256):(address,address,uint256,uint256,bytes,bool,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_txIndex)]
    );

    return new BankTreasury__getTransactionResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBytes(),
      result[5].toBoolean(),
      result[6].toBigInt()
    );
  }

  try_getTransaction(
    _txIndex: BigInt
  ): ethereum.CallResult<BankTreasury__getTransactionResult> {
    let result = super.tryCall(
      "getTransaction",
      "getTransaction(uint256):(address,address,uint256,uint256,bytes,bool,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_txIndex)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BankTreasury__getTransactionResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBytes(),
        value[5].toBoolean(),
        value[6].toBigInt()
      )
    );
  }

  getTransactionCount(): BigInt {
    let result = super.call(
      "getTransactionCount",
      "getTransactionCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTransactionCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTransactionCount",
      "getTransactionCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVoucher(): Address {
    let result = super.call("getVoucher", "getVoucher():(address)", []);

    return result[0].toAddress();
  }

  try_getVoucher(): ethereum.CallResult<Address> {
    let result = super.tryCall("getVoucher", "getVoucher():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isAdmin(account: Address): boolean {
    let result = super.call("isAdmin", "isAdmin(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_isAdmin(account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isAdmin", "isAdmin(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isFeeModule(account: Address): boolean {
    let result = super.call("isFeeModule", "isFeeModule(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_isFeeModule(account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isFeeModule", "isFeeModule(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  marketChangeLockup(
    unlockFromSoulBoundTokenId: BigInt,
    currency: Address,
    unlockExpiration: BigInt,
    unlockAmount: BigInt,
    lockupForSoulBoundTokenId: BigInt,
    lockupAmount: BigInt
  ): BigInt {
    let result = super.call(
      "marketChangeLockup",
      "marketChangeLockup(uint256,address,uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(unlockFromSoulBoundTokenId),
        ethereum.Value.fromAddress(currency),
        ethereum.Value.fromUnsignedBigInt(unlockExpiration),
        ethereum.Value.fromUnsignedBigInt(unlockAmount),
        ethereum.Value.fromUnsignedBigInt(lockupForSoulBoundTokenId),
        ethereum.Value.fromUnsignedBigInt(lockupAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try_marketChangeLockup(
    unlockFromSoulBoundTokenId: BigInt,
    currency: Address,
    unlockExpiration: BigInt,
    unlockAmount: BigInt,
    lockupForSoulBoundTokenId: BigInt,
    lockupAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "marketChangeLockup",
      "marketChangeLockup(uint256,address,uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(unlockFromSoulBoundTokenId),
        ethereum.Value.fromAddress(currency),
        ethereum.Value.fromUnsignedBigInt(unlockExpiration),
        ethereum.Value.fromUnsignedBigInt(unlockAmount),
        ethereum.Value.fromUnsignedBigInt(lockupForSoulBoundTokenId),
        ethereum.Value.fromUnsignedBigInt(lockupAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  marketLockupFor(
    account: Address,
    soulBoundTokenId: BigInt,
    currency: Address,
    amount: BigInt
  ): BigInt {
    let result = super.call(
      "marketLockupFor",
      "marketLockupFor(address,uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(soulBoundTokenId),
        ethereum.Value.fromAddress(currency),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_marketLockupFor(
    account: Address,
    soulBoundTokenId: BigInt,
    currency: Address,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "marketLockupFor",
      "marketLockupFor(address,uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(soulBoundTokenId),
        ethereum.Value.fromAddress(currency),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  onERC3525Received(
    operator: Address,
    fromTokenId: BigInt,
    toTokenId: BigInt,
    value: BigInt,
    data: Bytes
  ): Bytes {
    let result = super.call(
      "onERC3525Received",
      "onERC3525Received(address,uint256,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromUnsignedBigInt(fromTokenId),
        ethereum.Value.fromUnsignedBigInt(toTokenId),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromBytes(data)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC3525Received(
    operator: Address,
    fromTokenId: BigInt,
    toTokenId: BigInt,
    value: BigInt,
    data: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC3525Received",
      "onERC3525Received(address,uint256,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromUnsignedBigInt(fromTokenId),
        ethereum.Value.fromUnsignedBigInt(toTokenId),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  sigNonces(param0: Address): BigInt {
    let result = super.call("sigNonces", "sigNonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_sigNonces(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("sigNonces", "sigNonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  soulBoundTokenIdBankTreasury(): BigInt {
    let result = super.call(
      "soulBoundTokenIdBankTreasury",
      "soulBoundTokenIdBankTreasury():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_soulBoundTokenIdBankTreasury(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "soulBoundTokenIdBankTreasury",
      "soulBoundTokenIdBankTreasury():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  totalBalanceOf(currency: Address, soulBoundTokenId: BigInt): BigInt {
    let result = super.call(
      "totalBalanceOf",
      "totalBalanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(currency),
        ethereum.Value.fromUnsignedBigInt(soulBoundTokenId)
      ]
    );

    return result[0].toBigInt();
  }

  try_totalBalanceOf(
    currency: Address,
    soulBoundTokenId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalBalanceOf",
      "totalBalanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(currency),
        ethereum.Value.fromUnsignedBigInt(soulBoundTokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class BuySBTCall extends ethereum.Call {
  get inputs(): BuySBTCall__Inputs {
    return new BuySBTCall__Inputs(this);
  }

  get outputs(): BuySBTCall__Outputs {
    return new BuySBTCall__Outputs(this);
  }
}

export class BuySBTCall__Inputs {
  _call: BuySBTCall;

  constructor(call: BuySBTCall) {
    this._call = call;
  }

  get soulBoundTokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BuySBTCall__Outputs {
  _call: BuySBTCall;

  constructor(call: BuySBTCall) {
    this._call = call;
  }
}

export class BuySBTByERC20Call extends ethereum.Call {
  get inputs(): BuySBTByERC20Call__Inputs {
    return new BuySBTByERC20Call__Inputs(this);
  }

  get outputs(): BuySBTByERC20Call__Outputs {
    return new BuySBTByERC20Call__Outputs(this);
  }
}

export class BuySBTByERC20Call__Inputs {
  _call: BuySBTByERC20Call;

  constructor(call: BuySBTByERC20Call) {
    this._call = call;
  }

  get soulBoundTokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get currency(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BuySBTByERC20Call__Outputs {
  _call: BuySBTByERC20Call;

  constructor(call: BuySBTByERC20Call) {
    this._call = call;
  }
}

export class ConfirmTransactionCall extends ethereum.Call {
  get inputs(): ConfirmTransactionCall__Inputs {
    return new ConfirmTransactionCall__Inputs(this);
  }

  get outputs(): ConfirmTransactionCall__Outputs {
    return new ConfirmTransactionCall__Outputs(this);
  }
}

export class ConfirmTransactionCall__Inputs {
  _call: ConfirmTransactionCall;

  constructor(call: ConfirmTransactionCall) {
    this._call = call;
  }

  get _txIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ConfirmTransactionCall__Outputs {
  _call: ConfirmTransactionCall;

  constructor(call: ConfirmTransactionCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get soulBoundTokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get currency(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class DepositFromVoucherCall extends ethereum.Call {
  get inputs(): DepositFromVoucherCall__Inputs {
    return new DepositFromVoucherCall__Inputs(this);
  }

  get outputs(): DepositFromVoucherCall__Outputs {
    return new DepositFromVoucherCall__Outputs(this);
  }
}

export class DepositFromVoucherCall__Inputs {
  _call: DepositFromVoucherCall;

  constructor(call: DepositFromVoucherCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get soulBoundTokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositFromVoucherCall__Outputs {
  _call: DepositFromVoucherCall;

  constructor(call: DepositFromVoucherCall) {
    this._call = call;
  }
}

export class DistributeFundsToUserRevenueCall extends ethereum.Call {
  get inputs(): DistributeFundsToUserRevenueCall__Inputs {
    return new DistributeFundsToUserRevenueCall__Inputs(this);
  }

  get outputs(): DistributeFundsToUserRevenueCall__Outputs {
    return new DistributeFundsToUserRevenueCall__Outputs(this);
  }
}

export class DistributeFundsToUserRevenueCall__Inputs {
  _call: DistributeFundsToUserRevenueCall;

  constructor(call: DistributeFundsToUserRevenueCall) {
    this._call = call;
  }

  get publishId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get currency(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get payValue(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get collectFeeUsers(): DistributeFundsToUserRevenueCallCollectFeeUsersStruct {
    return changetype<DistributeFundsToUserRevenueCallCollectFeeUsersStruct>(
      this._call.inputValues[3].value.toTuple()
    );
  }

  get royaltyAmounts(): DistributeFundsToUserRevenueCallRoyaltyAmountsStruct {
    return changetype<DistributeFundsToUserRevenueCallRoyaltyAmountsStruct>(
      this._call.inputValues[4].value.toTuple()
    );
  }
}

export class DistributeFundsToUserRevenueCall__Outputs {
  _call: DistributeFundsToUserRevenueCall;

  constructor(call: DistributeFundsToUserRevenueCall) {
    this._call = call;
  }
}

export class DistributeFundsToUserRevenueCallCollectFeeUsersStruct extends ethereum.Tuple {
  get ownershipSoulBoundTokenId(): BigInt {
    return this[0].toBigInt();
  }

  get collectorSoulBoundTokenId(): BigInt {
    return this[1].toBigInt();
  }

  get genesisSoulBoundTokenId(): BigInt {
    return this[2].toBigInt();
  }

  get previousSoulBoundTokenId(): BigInt {
    return this[3].toBigInt();
  }

  get referrerSoulBoundTokenId(): BigInt {
    return this[4].toBigInt();
  }
}

export class DistributeFundsToUserRevenueCallRoyaltyAmountsStruct extends ethereum.Tuple {
  get treasuryAmount(): BigInt {
    return this[0].toBigInt();
  }

  get genesisAmount(): BigInt {
    return this[1].toBigInt();
  }

  get previousAmount(): BigInt {
    return this[2].toBigInt();
  }

  get referrerAmount(): BigInt {
    return this[3].toBigInt();
  }

  get adjustedAmount(): BigInt {
    return this[4].toBigInt();
  }
}

export class ExchangeERC20BySBTCall extends ethereum.Call {
  get inputs(): ExchangeERC20BySBTCall__Inputs {
    return new ExchangeERC20BySBTCall__Inputs(this);
  }

  get outputs(): ExchangeERC20BySBTCall__Outputs {
    return new ExchangeERC20BySBTCall__Outputs(this);
  }
}

export class ExchangeERC20BySBTCall__Inputs {
  _call: ExchangeERC20BySBTCall;

  constructor(call: ExchangeERC20BySBTCall) {
    this._call = call;
  }

  get soulBoundTokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get currency(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amountOfSBT(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ExchangeERC20BySBTCall__Outputs {
  _call: ExchangeERC20BySBTCall;

  constructor(call: ExchangeERC20BySBTCall) {
    this._call = call;
  }
}

export class ExecuteTransactionCall extends ethereum.Call {
  get inputs(): ExecuteTransactionCall__Inputs {
    return new ExecuteTransactionCall__Inputs(this);
  }

  get outputs(): ExecuteTransactionCall__Outputs {
    return new ExecuteTransactionCall__Outputs(this);
  }
}

export class ExecuteTransactionCall__Inputs {
  _call: ExecuteTransactionCall;

  constructor(call: ExecuteTransactionCall) {
    this._call = call;
  }

  get _txIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ExecuteTransactionCall__Outputs {
  _call: ExecuteTransactionCall;

  constructor(call: ExecuteTransactionCall) {
    this._call = call;
  }
}

export class GrantAdminCall extends ethereum.Call {
  get inputs(): GrantAdminCall__Inputs {
    return new GrantAdminCall__Inputs(this);
  }

  get outputs(): GrantAdminCall__Outputs {
    return new GrantAdminCall__Outputs(this);
  }
}

export class GrantAdminCall__Inputs {
  _call: GrantAdminCall;

  constructor(call: GrantAdminCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class GrantAdminCall__Outputs {
  _call: GrantAdminCall;

  constructor(call: GrantAdminCall) {
    this._call = call;
  }
}

export class GrantFeeModuleCall extends ethereum.Call {
  get inputs(): GrantFeeModuleCall__Inputs {
    return new GrantFeeModuleCall__Inputs(this);
  }

  get outputs(): GrantFeeModuleCall__Outputs {
    return new GrantFeeModuleCall__Outputs(this);
  }
}

export class GrantFeeModuleCall__Inputs {
  _call: GrantFeeModuleCall;

  constructor(call: GrantFeeModuleCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class GrantFeeModuleCall__Outputs {
  _call: GrantFeeModuleCall;

  constructor(call: GrantFeeModuleCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get admin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get governance(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get soulBoundTokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get signers(): Array<Address> {
    return this._call.inputValues[3].value.toAddressArray();
  }

  get _numConfirmationsRequired(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _lockupDuration(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MarketChangeLockupCall extends ethereum.Call {
  get inputs(): MarketChangeLockupCall__Inputs {
    return new MarketChangeLockupCall__Inputs(this);
  }

  get outputs(): MarketChangeLockupCall__Outputs {
    return new MarketChangeLockupCall__Outputs(this);
  }
}

export class MarketChangeLockupCall__Inputs {
  _call: MarketChangeLockupCall;

  constructor(call: MarketChangeLockupCall) {
    this._call = call;
  }

  get unlockFromSoulBoundTokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get currency(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get unlockExpiration(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get unlockAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get lockupForSoulBoundTokenId(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get lockupAmount(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class MarketChangeLockupCall__Outputs {
  _call: MarketChangeLockupCall;

  constructor(call: MarketChangeLockupCall) {
    this._call = call;
  }

  get expiration(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class MarketLockupForCall extends ethereum.Call {
  get inputs(): MarketLockupForCall__Inputs {
    return new MarketLockupForCall__Inputs(this);
  }

  get outputs(): MarketLockupForCall__Outputs {
    return new MarketLockupForCall__Outputs(this);
  }
}

export class MarketLockupForCall__Inputs {
  _call: MarketLockupForCall;

  constructor(call: MarketLockupForCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get soulBoundTokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get currency(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class MarketLockupForCall__Outputs {
  _call: MarketLockupForCall;

  constructor(call: MarketLockupForCall) {
    this._call = call;
  }

  get expiration(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class MarketTransferLockedCall extends ethereum.Call {
  get inputs(): MarketTransferLockedCall__Inputs {
    return new MarketTransferLockedCall__Inputs(this);
  }

  get outputs(): MarketTransferLockedCall__Outputs {
    return new MarketTransferLockedCall__Outputs(this);
  }
}

export class MarketTransferLockedCall__Inputs {
  _call: MarketTransferLockedCall;

  constructor(call: MarketTransferLockedCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get soulBoundTokenIdBuyer(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get owner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get soulBoundTokenIdOwner(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get expiration(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get currency(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get totalAmount(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class MarketTransferLockedCall__Outputs {
  _call: MarketTransferLockedCall;

  constructor(call: MarketTransferLockedCall) {
    this._call = call;
  }
}

export class MarketUnlockForCall extends ethereum.Call {
  get inputs(): MarketUnlockForCall__Inputs {
    return new MarketUnlockForCall__Inputs(this);
  }

  get outputs(): MarketUnlockForCall__Outputs {
    return new MarketUnlockForCall__Outputs(this);
  }
}

export class MarketUnlockForCall__Inputs {
  _call: MarketUnlockForCall;

  constructor(call: MarketUnlockForCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get soulBoundTokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get expiration(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get currency(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class MarketUnlockForCall__Outputs {
  _call: MarketUnlockForCall;

  constructor(call: MarketUnlockForCall) {
    this._call = call;
  }
}

export class OnERC3525ReceivedCall extends ethereum.Call {
  get inputs(): OnERC3525ReceivedCall__Inputs {
    return new OnERC3525ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC3525ReceivedCall__Outputs {
    return new OnERC3525ReceivedCall__Outputs(this);
  }
}

export class OnERC3525ReceivedCall__Inputs {
  _call: OnERC3525ReceivedCall;

  constructor(call: OnERC3525ReceivedCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get fromTokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get toTokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC3525ReceivedCall__Outputs {
  _call: OnERC3525ReceivedCall;

  constructor(call: OnERC3525ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class ProxyCallCall extends ethereum.Call {
  get inputs(): ProxyCallCall__Inputs {
    return new ProxyCallCall__Inputs(this);
  }

  get outputs(): ProxyCallCall__Outputs {
    return new ProxyCallCall__Outputs(this);
  }
}

export class ProxyCallCall__Inputs {
  _call: ProxyCallCall;

  constructor(call: ProxyCallCall) {
    this._call = call;
  }

  get target(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get callData(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ProxyCallCall__Outputs {
  _call: ProxyCallCall;

  constructor(call: ProxyCallCall) {
    this._call = call;
  }
}

export class RefundEarnestFundsCall extends ethereum.Call {
  get inputs(): RefundEarnestFundsCall__Inputs {
    return new RefundEarnestFundsCall__Inputs(this);
  }

  get outputs(): RefundEarnestFundsCall__Outputs {
    return new RefundEarnestFundsCall__Outputs(this);
  }
}

export class RefundEarnestFundsCall__Inputs {
  _call: RefundEarnestFundsCall;

  constructor(call: RefundEarnestFundsCall) {
    this._call = call;
  }

  get soulBoundTokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get currency(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RefundEarnestFundsCall__Outputs {
  _call: RefundEarnestFundsCall;

  constructor(call: RefundEarnestFundsCall) {
    this._call = call;
  }
}

export class RevokeAdminCall extends ethereum.Call {
  get inputs(): RevokeAdminCall__Inputs {
    return new RevokeAdminCall__Inputs(this);
  }

  get outputs(): RevokeAdminCall__Outputs {
    return new RevokeAdminCall__Outputs(this);
  }
}

export class RevokeAdminCall__Inputs {
  _call: RevokeAdminCall;

  constructor(call: RevokeAdminCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RevokeAdminCall__Outputs {
  _call: RevokeAdminCall;

  constructor(call: RevokeAdminCall) {
    this._call = call;
  }
}

export class RevokeConfirmationCall extends ethereum.Call {
  get inputs(): RevokeConfirmationCall__Inputs {
    return new RevokeConfirmationCall__Inputs(this);
  }

  get outputs(): RevokeConfirmationCall__Outputs {
    return new RevokeConfirmationCall__Outputs(this);
  }
}

export class RevokeConfirmationCall__Inputs {
  _call: RevokeConfirmationCall;

  constructor(call: RevokeConfirmationCall) {
    this._call = call;
  }

  get _txIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RevokeConfirmationCall__Outputs {
  _call: RevokeConfirmationCall;

  constructor(call: RevokeConfirmationCall) {
    this._call = call;
  }
}

export class RevokeFeeModuleCall extends ethereum.Call {
  get inputs(): RevokeFeeModuleCall__Inputs {
    return new RevokeFeeModuleCall__Inputs(this);
  }

  get outputs(): RevokeFeeModuleCall__Outputs {
    return new RevokeFeeModuleCall__Outputs(this);
  }
}

export class RevokeFeeModuleCall__Inputs {
  _call: RevokeFeeModuleCall;

  constructor(call: RevokeFeeModuleCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RevokeFeeModuleCall__Outputs {
  _call: RevokeFeeModuleCall;

  constructor(call: RevokeFeeModuleCall) {
    this._call = call;
  }
}

export class SetExchangePriceCall extends ethereum.Call {
  get inputs(): SetExchangePriceCall__Inputs {
    return new SetExchangePriceCall__Inputs(this);
  }

  get outputs(): SetExchangePriceCall__Outputs {
    return new SetExchangePriceCall__Outputs(this);
  }
}

export class SetExchangePriceCall__Inputs {
  _call: SetExchangePriceCall;

  constructor(call: SetExchangePriceCall) {
    this._call = call;
  }

  get currency(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get currencyAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get sbtAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetExchangePriceCall__Outputs {
  _call: SetExchangePriceCall;

  constructor(call: SetExchangePriceCall) {
    this._call = call;
  }
}

export class SetFoundationMarketCall extends ethereum.Call {
  get inputs(): SetFoundationMarketCall__Inputs {
    return new SetFoundationMarketCall__Inputs(this);
  }

  get outputs(): SetFoundationMarketCall__Outputs {
    return new SetFoundationMarketCall__Outputs(this);
  }
}

export class SetFoundationMarketCall__Inputs {
  _call: SetFoundationMarketCall;

  constructor(call: SetFoundationMarketCall) {
    this._call = call;
  }

  get newFoundationMarket(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFoundationMarketCall__Outputs {
  _call: SetFoundationMarketCall;

  constructor(call: SetFoundationMarketCall) {
    this._call = call;
  }
}

export class SetGlobalModulesCall extends ethereum.Call {
  get inputs(): SetGlobalModulesCall__Inputs {
    return new SetGlobalModulesCall__Inputs(this);
  }

  get outputs(): SetGlobalModulesCall__Outputs {
    return new SetGlobalModulesCall__Outputs(this);
  }
}

export class SetGlobalModulesCall__Inputs {
  _call: SetGlobalModulesCall;

  constructor(call: SetGlobalModulesCall) {
    this._call = call;
  }

  get moduleGlobals(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetGlobalModulesCall__Outputs {
  _call: SetGlobalModulesCall;

  constructor(call: SetGlobalModulesCall) {
    this._call = call;
  }
}

export class SubmitTransactionCall extends ethereum.Call {
  get inputs(): SubmitTransactionCall__Inputs {
    return new SubmitTransactionCall__Inputs(this);
  }

  get outputs(): SubmitTransactionCall__Outputs {
    return new SubmitTransactionCall__Outputs(this);
  }
}

export class SubmitTransactionCall__Inputs {
  _call: SubmitTransactionCall;

  constructor(call: SubmitTransactionCall) {
    this._call = call;
  }

  get _currency(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _currencyType(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get _to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _fromTokenId(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _toTokenId(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _value(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class SubmitTransactionCall__Outputs {
  _call: SubmitTransactionCall;

  constructor(call: SubmitTransactionCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}

export class UseEarnestFundsForPayCall extends ethereum.Call {
  get inputs(): UseEarnestFundsForPayCall__Inputs {
    return new UseEarnestFundsForPayCall__Inputs(this);
  }

  get outputs(): UseEarnestFundsForPayCall__Outputs {
    return new UseEarnestFundsForPayCall__Outputs(this);
  }
}

export class UseEarnestFundsForPayCall__Inputs {
  _call: UseEarnestFundsForPayCall;

  constructor(call: UseEarnestFundsForPayCall) {
    this._call = call;
  }

  get soulBoundTokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get currency(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class UseEarnestFundsForPayCall__Outputs {
  _call: UseEarnestFundsForPayCall;

  constructor(call: UseEarnestFundsForPayCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get soulBoundTokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get currency(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
