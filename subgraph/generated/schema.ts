// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Account entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Account must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Account", id.toString(), this);
    }
  }

  static load(id: string): Account | null {
    return changetype<Account | null>(store.get("Account", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get profile(): string {
    let value = this.get("profile");
    return value!.toString();
  }

  set profile(value: string) {
    this.set("profile", Value.fromString(value));
  }

  get creator(): string | null {
    let value = this.get("creator");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set creator(value: string | null) {
    if (!value) {
      this.unset("creator");
    } else {
      this.set("creator", Value.fromString(<string>value));
    }
  }

  get sbtAsset(): string | null {
    let value = this.get("sbtAsset");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set sbtAsset(value: string | null) {
    if (!value) {
      this.unset("sbtAsset");
    } else {
      this.set("sbtAsset", Value.fromString(<string>value));
    }
  }

  get dnftCollection(): string | null {
    let value = this.get("dnftCollection");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set dnftCollection(value: string | null) {
    if (!value) {
      this.unset("dnftCollection");
    } else {
      this.set("dnftCollection", Value.fromString(<string>value));
    }
  }

  get hub(): string | null {
    let value = this.get("hub");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set hub(value: string | null) {
    if (!value) {
      this.unset("hub");
    } else {
      this.set("hub", Value.fromString(<string>value));
    }
  }

  get deposits(): Array<string> {
    let value = this.get("deposits");
    return value!.toStringArray();
  }

  set deposits(value: Array<string>) {
    this.set("deposits", Value.fromStringArray(value));
  }

  get voucherMintHistories(): Array<string> {
    let value = this.get("voucherMintHistories");
    return value!.toStringArray();
  }

  set voucherMintHistories(value: Array<string>) {
    this.set("voucherMintHistories", Value.fromStringArray(value));
  }

  get sbtApprovalValues(): Array<string> {
    let value = this.get("sbtApprovalValues");
    return value!.toStringArray();
  }

  set sbtApprovalValues(value: Array<string>) {
    this.set("sbtApprovalValues", Value.fromStringArray(value));
  }

  get sbtAccountApprovals(): Array<string> {
    let value = this.get("sbtAccountApprovals");
    return value!.toStringArray();
  }

  set sbtAccountApprovals(value: Array<string>) {
    this.set("sbtAccountApprovals", Value.fromStringArray(value));
  }

  get sbtTransferValueOut(): Array<string> {
    let value = this.get("sbtTransferValueOut");
    return value!.toStringArray();
  }

  set sbtTransferValueOut(value: Array<string>) {
    this.set("sbtTransferValueOut", Value.fromStringArray(value));
  }

  get sbtTransferValueIn(): Array<string> {
    let value = this.get("sbtTransferValueIn");
    return value!.toStringArray();
  }

  set sbtTransferValueIn(value: Array<string>) {
    this.set("sbtTransferValueIn", Value.fromStringArray(value));
  }

  get nfts(): Array<string> {
    let value = this.get("nfts");
    return value!.toStringArray();
  }

  set nfts(value: Array<string>) {
    this.set("nfts", Value.fromStringArray(value));
  }

  get collectHistories(): Array<string> {
    let value = this.get("collectHistories");
    return value!.toStringArray();
  }

  set collectHistories(value: Array<string>) {
    this.set("collectHistories", Value.fromStringArray(value));
  }

  get genesisCreatorFeeHistories(): Array<string> {
    let value = this.get("genesisCreatorFeeHistories");
    return value!.toStringArray();
  }

  set genesisCreatorFeeHistories(value: Array<string>) {
    this.set("genesisCreatorFeeHistories", Value.fromStringArray(value));
  }

  get previousCreatorFeeHistories(): Array<string> {
    let value = this.get("previousCreatorFeeHistories");
    return value!.toStringArray();
  }

  set previousCreatorFeeHistories(value: Array<string>) {
    this.set("previousCreatorFeeHistories", Value.fromStringArray(value));
  }

  get dnftAirdropedHistories(): Array<string> {
    let value = this.get("dnftAirdropedHistories");
    return value!.toStringArray();
  }

  set dnftAirdropedHistories(value: Array<string>) {
    this.set("dnftAirdropedHistories", Value.fromStringArray(value));
  }

  get nftsOwnedOrListed(): Array<string> {
    let value = this.get("nftsOwnedOrListed");
    return value!.toStringArray();
  }

  set nftsOwnedOrListed(value: Array<string>) {
    this.set("nftsOwnedOrListed", Value.fromStringArray(value));
  }

  get nftMarketAuctions(): Array<string> {
    let value = this.get("nftMarketAuctions");
    return value!.toStringArray();
  }

  set nftMarketAuctions(value: Array<string>) {
    this.set("nftMarketAuctions", Value.fromStringArray(value));
  }

  get nftBidsPlaced(): Array<string> {
    let value = this.get("nftBidsPlaced");
    return value!.toStringArray();
  }

  set nftBidsPlaced(value: Array<string>) {
    this.set("nftBidsPlaced", Value.fromStringArray(value));
  }

  get nftBidsAccepted(): Array<string> {
    let value = this.get("nftBidsAccepted");
    return value!.toStringArray();
  }

  set nftBidsAccepted(value: Array<string>) {
    this.set("nftBidsAccepted", Value.fromStringArray(value));
  }

  get nftTransfersOut(): Array<string> {
    let value = this.get("nftTransfersOut");
    return value!.toStringArray();
  }

  set nftTransfersOut(value: Array<string>) {
    this.set("nftTransfersOut", Value.fromStringArray(value));
  }

  get nftTransfersIn(): Array<string> {
    let value = this.get("nftTransfersIn");
    return value!.toStringArray();
  }

  set nftTransfersIn(value: Array<string>) {
    this.set("nftTransfersIn", Value.fromStringArray(value));
  }

  get netRevenueInSBTValue(): BigDecimal {
    let value = this.get("netRevenueInSBTValue");
    return value!.toBigDecimal();
  }

  set netRevenueInSBTValue(value: BigDecimal) {
    this.set("netRevenueInSBTValue", Value.fromBigDecimal(value));
  }

  get netRevenuePendingInSBTValue(): BigDecimal {
    let value = this.get("netRevenuePendingInSBTValue");
    return value!.toBigDecimal();
  }

  set netRevenuePendingInSBTValue(value: BigDecimal) {
    this.set("netRevenuePendingInSBTValue", Value.fromBigDecimal(value));
  }

  get dnftAccountApprovals(): Array<string> {
    let value = this.get("dnftAccountApprovals");
    return value!.toStringArray();
  }

  set dnftAccountApprovals(value: Array<string>) {
    this.set("dnftAccountApprovals", Value.fromStringArray(value));
  }

  get dnftApprovalValues(): Array<string> {
    let value = this.get("dnftApprovalValues");
    return value!.toStringArray();
  }

  set dnftApprovalValues(value: Array<string>) {
    this.set("dnftApprovalValues", Value.fromStringArray(value));
  }

  get dnftHistory(): Array<string> {
    let value = this.get("dnftHistory");
    return value!.toStringArray();
  }

  set dnftHistory(value: Array<string>) {
    this.set("dnftHistory", Value.fromStringArray(value));
  }

  get fsbt(): Array<string> {
    let value = this.get("fsbt");
    return value!.toStringArray();
  }

  set fsbt(value: Array<string>) {
    this.set("fsbt", Value.fromStringArray(value));
  }

  get nftOffersMade(): Array<string> {
    let value = this.get("nftOffersMade");
    return value!.toStringArray();
  }

  set nftOffersMade(value: Array<string>) {
    this.set("nftOffersMade", Value.fromStringArray(value));
  }
}

export class Profile extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Profile entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Profile must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Profile", id.toString(), this);
    }
  }

  static load(id: string): Profile | null {
    return changetype<Profile | null>(store.get("Profile", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get soulBoundTokenId(): BigInt {
    let value = this.get("soulBoundTokenId");
    return value!.toBigInt();
  }

  set soulBoundTokenId(value: BigInt) {
    this.set("soulBoundTokenId", Value.fromBigInt(value));
  }

  get creator(): Bytes {
    let value = this.get("creator");
    return value!.toBytes();
  }

  set creator(value: Bytes) {
    this.set("creator", Value.fromBytes(value));
  }

  get wallet(): Bytes {
    let value = this.get("wallet");
    return value!.toBytes();
  }

  set wallet(value: Bytes) {
    this.set("wallet", Value.fromBytes(value));
  }

  get nickName(): string {
    let value = this.get("nickName");
    return value!.toString();
  }

  set nickName(value: string) {
    this.set("nickName", Value.fromString(value));
  }

  get imageURI(): string {
    let value = this.get("imageURI");
    return value!.toString();
  }

  set imageURI(value: string) {
    this.set("imageURI", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class SoulBoundToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SoulBoundToken entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SoulBoundToken must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SoulBoundToken", id.toString(), this);
    }
  }

  static load(id: string): SoulBoundToken | null {
    return changetype<SoulBoundToken | null>(store.get("SoulBoundToken", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get wallet(): Bytes {
    let value = this.get("wallet");
    return value!.toBytes();
  }

  set wallet(value: Bytes) {
    this.set("wallet", Value.fromBytes(value));
  }
}

export class SBTAsset extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SBTAsset entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SBTAsset must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SBTAsset", id.toString(), this);
    }
  }

  static load(id: string): SBTAsset | null {
    return changetype<SBTAsset | null>(store.get("SBTAsset", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    return value!.toBigInt();
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }

  get approvedSpender(): string | null {
    let value = this.get("approvedSpender");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set approvedSpender(value: string | null) {
    if (!value) {
      this.unset("approvedSpender");
    } else {
      this.set("approvedSpender", Value.fromString(<string>value));
    }
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class SBTTransferHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SBTTransferHistory entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SBTTransferHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SBTTransferHistory", id.toString(), this);
    }
  }

  static load(id: string): SBTTransferHistory | null {
    return changetype<SBTTransferHistory | null>(
      store.get("SBTTransferHistory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): string {
    let value = this.get("from");
    return value!.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get to(): string {
    let value = this.get("to");
    return value!.toString();
  }

  set to(value: string) {
    this.set("to", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class SBTTransferValueHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save SBTTransferValueHistory entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SBTTransferValueHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SBTTransferValueHistory", id.toString(), this);
    }
  }

  static load(id: string): SBTTransferValueHistory | null {
    return changetype<SBTTransferValueHistory | null>(
      store.get("SBTTransferValueHistory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): string {
    let value = this.get("from");
    return value!.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get to(): string {
    let value = this.get("to");
    return value!.toString();
  }

  set to(value: string) {
    this.set("to", Value.fromString(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class SBTSlotChangedHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save SBTSlotChangedHistory entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SBTSlotChangedHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SBTSlotChangedHistory", id.toString(), this);
    }
  }

  static load(id: string): SBTSlotChangedHistory | null {
    return changetype<SBTSlotChangedHistory | null>(
      store.get("SBTSlotChangedHistory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    return value!.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get oldSlot(): BigInt {
    let value = this.get("oldSlot");
    return value!.toBigInt();
  }

  set oldSlot(value: BigInt) {
    this.set("oldSlot", Value.fromBigInt(value));
  }

  get newSlot(): BigInt {
    let value = this.get("newSlot");
    return value!.toBigInt();
  }

  set newSlot(value: BigInt) {
    this.set("newSlot", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class MintSBTValueHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MintSBTValueHistory entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MintSBTValueHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MintSBTValueHistory", id.toString(), this);
    }
  }

  static load(id: string): MintSBTValueHistory | null {
    return changetype<MintSBTValueHistory | null>(
      store.get("MintSBTValueHistory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get caller(): Bytes {
    let value = this.get("caller");
    return value!.toBytes();
  }

  set caller(value: Bytes) {
    this.set("caller", Value.fromBytes(value));
  }

  get account(): string {
    let value = this.get("account");
    return value!.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class BurnSBTHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BurnSBTHistory entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BurnSBTHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("BurnSBTHistory", id.toString(), this);
    }
  }

  static load(id: string): BurnSBTHistory | null {
    return changetype<BurnSBTHistory | null>(store.get("BurnSBTHistory", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get caller(): Bytes {
    let value = this.get("caller");
    return value!.toBytes();
  }

  set caller(value: Bytes) {
    this.set("caller", Value.fromBytes(value));
  }

  get account(): string {
    let value = this.get("account");
    return value!.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    return value!.toBigInt();
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class SBTAccountApproval extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SBTAccountApproval entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SBTAccountApproval must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SBTAccountApproval", id.toString(), this);
    }
  }

  static load(id: string): SBTAccountApproval | null {
    return changetype<SBTAccountApproval | null>(
      store.get("SBTAccountApproval", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get spender(): string {
    let value = this.get("spender");
    return value!.toString();
  }

  set spender(value: string) {
    this.set("spender", Value.fromString(value));
  }
}

export class SBTApprovalValue extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SBTApprovalValue entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SBTApprovalValue must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SBTApprovalValue", id.toString(), this);
    }
  }

  static load(id: string): SBTApprovalValue | null {
    return changetype<SBTApprovalValue | null>(
      store.get("SBTApprovalValue", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get soulBoundTokenId(): BigInt {
    let value = this.get("soulBoundTokenId");
    return value!.toBigInt();
  }

  set soulBoundTokenId(value: BigInt) {
    this.set("soulBoundTokenId", Value.fromBigInt(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get spender(): string {
    let value = this.get("spender");
    return value!.toString();
  }

  set spender(value: string) {
    this.set("spender", Value.fromString(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Hub extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Hub entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Hub must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Hub", id.toString(), this);
    }
  }

  static load(id: string): Hub | null {
    return changetype<Hub | null>(store.get("Hub", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get hubOwner(): string {
    let value = this.get("hubOwner");
    return value!.toString();
  }

  set hubOwner(value: string) {
    this.set("hubOwner", Value.fromString(value));
  }

  get hubId(): BigInt {
    let value = this.get("hubId");
    return value!.toBigInt();
  }

  set hubId(value: BigInt) {
    this.set("hubId", Value.fromBigInt(value));
  }

  get projects(): Array<string> {
    let value = this.get("projects");
    return value!.toStringArray();
  }

  set projects(value: Array<string>) {
    this.set("projects", Value.fromStringArray(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get description(): string {
    let value = this.get("description");
    return value!.toString();
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get imageURI(): string {
    let value = this.get("imageURI");
    return value!.toString();
  }

  set imageURI(value: string) {
    this.set("imageURI", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Publication extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Publication entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Publication must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Publication", id.toString(), this);
    }
  }

  static load(id: string): Publication | null {
    return changetype<Publication | null>(store.get("Publication", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get publishId(): BigInt {
    let value = this.get("publishId");
    return value!.toBigInt();
  }

  set publishId(value: BigInt) {
    this.set("publishId", Value.fromBigInt(value));
  }

  get publisher(): string {
    let value = this.get("publisher");
    return value!.toString();
  }

  set publisher(value: string) {
    this.set("publisher", Value.fromString(value));
  }

  get hub(): string {
    let value = this.get("hub");
    return value!.toString();
  }

  set hub(value: string) {
    this.set("hub", Value.fromString(value));
  }

  get project(): string {
    let value = this.get("project");
    return value!.toString();
  }

  set project(value: string) {
    this.set("project", Value.fromString(value));
  }

  get salePrice(): BigInt {
    let value = this.get("salePrice");
    return value!.toBigInt();
  }

  set salePrice(value: BigInt) {
    this.set("salePrice", Value.fromBigInt(value));
  }

  get royaltyBasisPoints(): BigInt {
    let value = this.get("royaltyBasisPoints");
    return value!.toBigInt();
  }

  set royaltyBasisPoints(value: BigInt) {
    this.set("royaltyBasisPoints", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get description(): string {
    let value = this.get("description");
    return value!.toString();
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get canCollect(): boolean {
    let value = this.get("canCollect");
    return value!.toBoolean();
  }

  set canCollect(value: boolean) {
    this.set("canCollect", Value.fromBoolean(value));
  }

  get materialURIs(): Array<string> {
    let value = this.get("materialURIs");
    return value!.toStringArray();
  }

  set materialURIs(value: Array<string>) {
    this.set("materialURIs", Value.fromStringArray(value));
  }

  get fromTokenIds(): Array<BigInt> {
    let value = this.get("fromTokenIds");
    return value!.toBigIntArray();
  }

  set fromTokenIds(value: Array<BigInt>) {
    this.set("fromTokenIds", Value.fromBigIntArray(value));
  }

  get collectModule(): Bytes {
    let value = this.get("collectModule");
    return value!.toBytes();
  }

  set collectModule(value: Bytes) {
    this.set("collectModule", Value.fromBytes(value));
  }

  get collectModuleInitData(): Bytes {
    let value = this.get("collectModuleInitData");
    return value!.toBytes();
  }

  set collectModuleInitData(value: Bytes) {
    this.set("collectModuleInitData", Value.fromBytes(value));
  }

  get publishModule(): Bytes {
    let value = this.get("publishModule");
    return value!.toBytes();
  }

  set publishModule(value: Bytes) {
    this.set("publishModule", Value.fromBytes(value));
  }

  get publishModuleInitData(): Bytes {
    let value = this.get("publishModuleInitData");
    return value!.toBytes();
  }

  set publishModuleInitData(value: Bytes) {
    this.set("publishModuleInitData", Value.fromBytes(value));
  }

  get genesisPublishId(): BigInt {
    let value = this.get("genesisPublishId");
    return value!.toBigInt();
  }

  set genesisPublishId(value: BigInt) {
    this.set("genesisPublishId", Value.fromBigInt(value));
  }

  get previousPublishId(): BigInt {
    let value = this.get("previousPublishId");
    return value!.toBigInt();
  }

  set previousPublishId(value: BigInt) {
    this.set("previousPublishId", Value.fromBigInt(value));
  }

  get publishTaxAmount(): BigInt {
    let value = this.get("publishTaxAmount");
    return value!.toBigInt();
  }

  set publishTaxAmount(value: BigInt) {
    this.set("publishTaxAmount", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Project extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Project entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Project must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Project", id.toString(), this);
    }
  }

  static load(id: string): Project | null {
    return changetype<Project | null>(store.get("Project", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get projectId(): BigInt {
    let value = this.get("projectId");
    return value!.toBigInt();
  }

  set projectId(value: BigInt) {
    this.set("projectId", Value.fromBigInt(value));
  }

  get derivativeNFT(): string {
    let value = this.get("derivativeNFT");
    return value!.toString();
  }

  set derivativeNFT(value: string) {
    this.set("derivativeNFT", Value.fromString(value));
  }

  get projectCreator(): string {
    let value = this.get("projectCreator");
    return value!.toString();
  }

  set projectCreator(value: string) {
    this.set("projectCreator", Value.fromString(value));
  }

  get hub(): string {
    let value = this.get("hub");
    return value!.toString();
  }

  set hub(value: string) {
    this.set("hub", Value.fromString(value));
  }

  get publications(): Array<string> {
    let value = this.get("publications");
    return value!.toStringArray();
  }

  set publications(value: Array<string>) {
    this.set("publications", Value.fromStringArray(value));
  }

  get publishes(): Array<string> {
    let value = this.get("publishes");
    return value!.toStringArray();
  }

  set publishes(value: Array<string>) {
    this.set("publishes", Value.fromStringArray(value));
  }

  get dnfts(): Array<string> {
    let value = this.get("dnfts");
    return value!.toStringArray();
  }

  set dnfts(value: Array<string>) {
    this.set("dnfts", Value.fromStringArray(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Publish extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Publish entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Publish must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Publish", id.toString(), this);
    }
  }

  static load(id: string): Publish | null {
    return changetype<Publish | null>(store.get("Publish", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get publisher(): string {
    let value = this.get("publisher");
    return value!.toString();
  }

  set publisher(value: string) {
    this.set("publisher", Value.fromString(value));
  }

  get publication(): string {
    let value = this.get("publication");
    return value!.toString();
  }

  set publication(value: string) {
    this.set("publication", Value.fromString(value));
  }

  get hub(): string {
    let value = this.get("hub");
    return value!.toString();
  }

  set hub(value: string) {
    this.set("hub", Value.fromString(value));
  }

  get project(): string {
    let value = this.get("project");
    return value!.toString();
  }

  set project(value: string) {
    this.set("project", Value.fromString(value));
  }

  get derivativeNFT(): string {
    let value = this.get("derivativeNFT");
    return value!.toString();
  }

  set derivativeNFT(value: string) {
    this.set("derivativeNFT", Value.fromString(value));
  }

  get dnft(): string {
    let value = this.get("dnft");
    return value!.toString();
  }

  set dnft(value: string) {
    this.set("dnft", Value.fromString(value));
  }

  get newTokenId(): BigInt {
    let value = this.get("newTokenId");
    return value!.toBigInt();
  }

  set newTokenId(value: BigInt) {
    this.set("newTokenId", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get collectModuleInitData(): Bytes {
    let value = this.get("collectModuleInitData");
    return value!.toBytes();
  }

  set collectModuleInitData(value: Bytes) {
    this.set("collectModuleInitData", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class DnftAirdropedHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DnftAirdropedHistory entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DnftAirdropedHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DnftAirdropedHistory", id.toString(), this);
    }
  }

  static load(id: string): DnftAirdropedHistory | null {
    return changetype<DnftAirdropedHistory | null>(
      store.get("DnftAirdropedHistory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get project(): string {
    let value = this.get("project");
    return value!.toString();
  }

  set project(value: string) {
    this.set("project", Value.fromString(value));
  }

  get publish(): string {
    let value = this.get("publish");
    return value!.toString();
  }

  set publish(value: string) {
    this.set("publish", Value.fromString(value));
  }

  get derivativeNFT(): string {
    let value = this.get("derivativeNFT");
    return value!.toString();
  }

  set derivativeNFT(value: string) {
    this.set("derivativeNFT", Value.fromString(value));
  }

  get from(): string {
    let value = this.get("from");
    return value!.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get toAccounts(): Array<BigInt> {
    let value = this.get("toAccounts");
    return value!.toBigIntArray();
  }

  set toAccounts(value: Array<BigInt>) {
    this.set("toAccounts", Value.fromBigIntArray(value));
  }

  get values(): Array<BigInt> {
    let value = this.get("values");
    return value!.toBigIntArray();
  }

  set values(value: Array<BigInt>) {
    this.set("values", Value.fromBigIntArray(value));
  }

  get newTokenIds(): Array<BigInt> {
    let value = this.get("newTokenIds");
    return value!.toBigIntArray();
  }

  set newTokenIds(value: Array<BigInt>) {
    this.set("newTokenIds", Value.fromBigIntArray(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class DepositHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DepositHistory entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DepositHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DepositHistory", id.toString(), this);
    }
  }

  static load(id: string): DepositHistory | null {
    return changetype<DepositHistory | null>(store.get("DepositHistory", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    return value!.toBytes();
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get receiver(): Bytes {
    let value = this.get("receiver");
    return value!.toBytes();
  }

  set receiver(value: Bytes) {
    this.set("receiver", Value.fromBytes(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    return value!.toBigInt();
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }

  get data(): Bytes | null {
    let value = this.get("data");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set data(value: Bytes | null) {
    if (!value) {
      this.unset("data");
    } else {
      this.set("data", Value.fromBytes(<Bytes>value));
    }
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transaction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Transaction must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Transaction", id.toString(), this);
    }
  }

  static load(id: string): Transaction | null {
    return changetype<Transaction | null>(store.get("Transaction", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get txIndex(): BigInt {
    let value = this.get("txIndex");
    return value!.toBigInt();
  }

  set txIndex(value: BigInt) {
    this.set("txIndex", Value.fromBigInt(value));
  }

  get to(): Bytes | null {
    let value = this.get("to");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set to(value: Bytes | null) {
    if (!value) {
      this.unset("to");
    } else {
      this.set("to", Value.fromBytes(<Bytes>value));
    }
  }

  get value(): BigInt | null {
    let value = this.get("value");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set value(value: BigInt | null) {
    if (!value) {
      this.unset("value");
    } else {
      this.set("value", Value.fromBigInt(<BigInt>value));
    }
  }

  get data(): Bytes | null {
    let value = this.get("data");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set data(value: Bytes | null) {
    if (!value) {
      this.unset("data");
    } else {
      this.set("data", Value.fromBytes(<Bytes>value));
    }
  }

  get isConfirmed(): boolean {
    let value = this.get("isConfirmed");
    return value!.toBoolean();
  }

  set isConfirmed(value: boolean) {
    this.set("isConfirmed", Value.fromBoolean(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class ExecuteTransactionHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ExecuteTransactionHistory entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ExecuteTransactionHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ExecuteTransactionHistory", id.toString(), this);
    }
  }

  static load(id: string): ExecuteTransactionHistory | null {
    return changetype<ExecuteTransactionHistory | null>(
      store.get("ExecuteTransactionHistory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get txIndex(): BigInt {
    let value = this.get("txIndex");
    return value!.toBigInt();
  }

  set txIndex(value: BigInt) {
    this.set("txIndex", Value.fromBigInt(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value!.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class ExchangeVoucherHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ExchangeVoucherHistory entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ExchangeVoucherHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ExchangeVoucherHistory", id.toString(), this);
    }
  }

  static load(id: string): ExchangeVoucherHistory | null {
    return changetype<ExchangeVoucherHistory | null>(
      store.get("ExchangeVoucherHistory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get soulBoundTokenId(): BigInt {
    let value = this.get("soulBoundTokenId");
    return value!.toBigInt();
  }

  set soulBoundTokenId(value: BigInt) {
    this.set("soulBoundTokenId", Value.fromBigInt(value));
  }

  get operator(): Bytes {
    let value = this.get("operator");
    return value!.toBytes();
  }

  set operator(value: Bytes) {
    this.set("operator", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get sbtValue(): BigInt {
    let value = this.get("sbtValue");
    return value!.toBigInt();
  }

  set sbtValue(value: BigInt) {
    this.set("sbtValue", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class ExecuteTransactionERC3525History extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ExecuteTransactionERC3525History entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ExecuteTransactionERC3525History must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ExecuteTransactionERC3525History", id.toString(), this);
    }
  }

  static load(id: string): ExecuteTransactionERC3525History | null {
    return changetype<ExecuteTransactionERC3525History | null>(
      store.get("ExecuteTransactionERC3525History", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get txIndex(): BigInt {
    let value = this.get("txIndex");
    return value!.toBigInt();
  }

  set txIndex(value: BigInt) {
    this.set("txIndex", Value.fromBigInt(value));
  }

  get fromTokenId(): BigInt {
    let value = this.get("fromTokenId");
    return value!.toBigInt();
  }

  set fromTokenId(value: BigInt) {
    this.set("fromTokenId", Value.fromBigInt(value));
  }

  get toTokenId(): BigInt {
    let value = this.get("toTokenId");
    return value!.toBigInt();
  }

  set toTokenId(value: BigInt) {
    this.set("toTokenId", Value.fromBigInt(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class NFTVoucherHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NFTVoucherHistory entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NFTVoucherHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("NFTVoucherHistory", id.toString(), this);
    }
  }

  static load(id: string): NFTVoucherHistory | null {
    return changetype<NFTVoucherHistory | null>(
      store.get("NFTVoucherHistory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get soulBoundTokenId(): BigInt {
    let value = this.get("soulBoundTokenId");
    return value!.toBigInt();
  }

  set soulBoundTokenId(value: BigInt) {
    this.set("soulBoundTokenId", Value.fromBigInt(value));
  }

  get account(): string {
    let value = this.get("account");
    return value!.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get vouchType(): i32 {
    let value = this.get("vouchType");
    return value!.toI32();
  }

  set vouchType(value: i32) {
    this.set("vouchType", Value.fromI32(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get sbtValue(): BigInt {
    let value = this.get("sbtValue");
    return value!.toBigInt();
  }

  set sbtValue(value: BigInt) {
    this.set("sbtValue", Value.fromBigInt(value));
  }

  get generateTimestamp(): BigInt {
    let value = this.get("generateTimestamp");
    return value!.toBigInt();
  }

  set generateTimestamp(value: BigInt) {
    this.set("generateTimestamp", Value.fromBigInt(value));
  }
}

export class VoucherAsset extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save VoucherAsset entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type VoucherAsset must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("VoucherAsset", id.toString(), this);
    }
  }

  static load(id: string): VoucherAsset | null {
    return changetype<VoucherAsset | null>(store.get("VoucherAsset", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get wallet(): Bytes {
    let value = this.get("wallet");
    return value!.toBytes();
  }

  set wallet(value: Bytes) {
    this.set("wallet", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class VoucherRecord extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save VoucherRecord entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type VoucherRecord must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("VoucherRecord", id.toString(), this);
    }
  }

  static load(id: string): VoucherRecord | null {
    return changetype<VoucherRecord | null>(store.get("VoucherRecord", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get vouchType(): i32 {
    let value = this.get("vouchType");
    return value!.toI32();
  }

  set vouchType(value: i32) {
    this.set("vouchType", Value.fromI32(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get etherValue(): BigInt {
    let value = this.get("etherValue");
    return value!.toBigInt();
  }

  set etherValue(value: BigInt) {
    this.set("etherValue", Value.fromBigInt(value));
  }

  get sbtValue(): BigInt {
    let value = this.get("sbtValue");
    return value!.toBigInt();
  }

  set sbtValue(value: BigInt) {
    this.set("sbtValue", Value.fromBigInt(value));
  }

  get generateTimestamp(): BigInt {
    let value = this.get("generateTimestamp");
    return value!.toBigInt();
  }

  set generateTimestamp(value: BigInt) {
    this.set("generateTimestamp", Value.fromBigInt(value));
  }

  get endTimestamp(): BigInt {
    let value = this.get("endTimestamp");
    return value!.toBigInt();
  }

  set endTimestamp(value: BigInt) {
    this.set("endTimestamp", Value.fromBigInt(value));
  }
}

export class ProfileCreatorWhitelistedRecord extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ProfileCreatorWhitelistedRecord entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ProfileCreatorWhitelistedRecord must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ProfileCreatorWhitelistedRecord", id.toString(), this);
    }
  }

  static load(id: string): ProfileCreatorWhitelistedRecord | null {
    return changetype<ProfileCreatorWhitelistedRecord | null>(
      store.get("ProfileCreatorWhitelistedRecord", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get profileCreator(): Bytes {
    let value = this.get("profileCreator");
    return value!.toBytes();
  }

  set profileCreator(value: Bytes) {
    this.set("profileCreator", Value.fromBytes(value));
  }

  get whitelisted(): boolean {
    let value = this.get("whitelisted");
    return value!.toBoolean();
  }

  set whitelisted(value: boolean) {
    this.set("whitelisted", Value.fromBoolean(value));
  }

  get caller(): Bytes {
    let value = this.get("caller");
    return value!.toBytes();
  }

  set caller(value: Bytes) {
    this.set("caller", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class FeesForCollectHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save FeesForCollectHistory entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type FeesForCollectHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("FeesForCollectHistory", id.toString(), this);
    }
  }

  static load(id: string): FeesForCollectHistory | null {
    return changetype<FeesForCollectHistory | null>(
      store.get("FeesForCollectHistory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get collector(): string {
    let value = this.get("collector");
    return value!.toString();
  }

  set collector(value: string) {
    this.set("collector", Value.fromString(value));
  }

  get genesisCreator(): string {
    let value = this.get("genesisCreator");
    return value!.toString();
  }

  set genesisCreator(value: string) {
    this.set("genesisCreator", Value.fromString(value));
  }

  get previousCreator(): string {
    let value = this.get("previousCreator");
    return value!.toString();
  }

  set previousCreator(value: string) {
    this.set("previousCreator", Value.fromString(value));
  }

  get publish(): string {
    let value = this.get("publish");
    return value!.toString();
  }

  set publish(value: string) {
    this.set("publish", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get collectUnits(): BigInt {
    let value = this.get("collectUnits");
    return value!.toBigInt();
  }

  set collectUnits(value: BigInt) {
    this.set("collectUnits", Value.fromBigInt(value));
  }

  get treasuryAmount(): BigInt {
    let value = this.get("treasuryAmount");
    return value!.toBigInt();
  }

  set treasuryAmount(value: BigInt) {
    this.set("treasuryAmount", Value.fromBigInt(value));
  }

  get genesisAmount(): BigInt {
    let value = this.get("genesisAmount");
    return value!.toBigInt();
  }

  set genesisAmount(value: BigInt) {
    this.set("genesisAmount", Value.fromBigInt(value));
  }

  get previousAmount(): BigInt {
    let value = this.get("previousAmount");
    return value!.toBigInt();
  }

  set previousAmount(value: BigInt) {
    this.set("previousAmount", Value.fromBigInt(value));
  }

  get adjustedAmount(): BigInt {
    let value = this.get("adjustedAmount");
    return value!.toBigInt();
  }

  set adjustedAmount(value: BigInt) {
    this.set("adjustedAmount", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class ReceiverReceivedHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ReceiverReceivedHistory entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ReceiverReceivedHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ReceiverReceivedHistory", id.toString(), this);
    }
  }

  static load(id: string): ReceiverReceivedHistory | null {
    return changetype<ReceiverReceivedHistory | null>(
      store.get("ReceiverReceivedHistory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get operator(): Bytes {
    let value = this.get("operator");
    return value!.toBytes();
  }

  set operator(value: Bytes) {
    this.set("operator", Value.fromBytes(value));
  }

  get fromTokenId(): BigInt {
    let value = this.get("fromTokenId");
    return value!.toBigInt();
  }

  set fromTokenId(value: BigInt) {
    this.set("fromTokenId", Value.fromBigInt(value));
  }

  get toTokenId(): BigInt {
    let value = this.get("toTokenId");
    return value!.toBigInt();
  }

  set toTokenId(value: BigInt) {
    this.set("toTokenId", Value.fromBigInt(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get data(): Bytes | null {
    let value = this.get("data");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set data(value: Bytes | null) {
    if (!value) {
      this.unset("data");
    } else {
      this.set("data", Value.fromBytes(<Bytes>value));
    }
  }

  get gas(): BigInt {
    let value = this.get("gas");
    return value!.toBigInt();
  }

  set gas(value: BigInt) {
    this.set("gas", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Dispatcher extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Dispatcher entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Dispatcher must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Dispatcher", id.toString(), this);
    }
  }

  static load(id: string): Dispatcher | null {
    return changetype<Dispatcher | null>(store.get("Dispatcher", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    return value!.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get dispatcher(): Bytes {
    let value = this.get("dispatcher");
    return value!.toBytes();
  }

  set dispatcher(value: Bytes) {
    this.set("dispatcher", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class StateSetHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save StateSetHistory entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type StateSetHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("StateSetHistory", id.toString(), this);
    }
  }

  static load(id: string): StateSetHistory | null {
    return changetype<StateSetHistory | null>(store.get("StateSetHistory", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get caller(): Bytes {
    let value = this.get("caller");
    return value!.toBytes();
  }

  set caller(value: Bytes) {
    this.set("caller", Value.fromBytes(value));
  }

  get prevState(): i32 {
    let value = this.get("prevState");
    return value!.toI32();
  }

  set prevState(value: i32) {
    this.set("prevState", Value.fromI32(value));
  }

  get newState(): i32 {
    let value = this.get("newState");
    return value!.toI32();
  }

  set newState(value: i32) {
    this.set("newState", Value.fromI32(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class ERC3525ReceivedHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ERC3525ReceivedHistory entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ERC3525ReceivedHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ERC3525ReceivedHistory", id.toString(), this);
    }
  }

  static load(id: string): ERC3525ReceivedHistory | null {
    return changetype<ERC3525ReceivedHistory | null>(
      store.get("ERC3525ReceivedHistory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    return value!.toBytes();
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get operator(): Bytes {
    let value = this.get("operator");
    return value!.toBytes();
  }

  set operator(value: Bytes) {
    this.set("operator", Value.fromBytes(value));
  }

  get from(): string {
    let value = this.get("from");
    return value!.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get to(): string {
    let value = this.get("to");
    return value!.toString();
  }

  set to(value: string) {
    this.set("to", Value.fromString(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get data(): Bytes {
    let value = this.get("data");
    return value!.toBytes();
  }

  set data(value: Bytes) {
    this.set("data", Value.fromBytes(value));
  }

  get gas(): BigInt {
    let value = this.get("gas");
    return value!.toBigInt();
  }

  set gas(value: BigInt) {
    this.set("gas", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class EmergencyAdminSetHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save EmergencyAdminSetHistory entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type EmergencyAdminSetHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("EmergencyAdminSetHistory", id.toString(), this);
    }
  }

  static load(id: string): EmergencyAdminSetHistory | null {
    return changetype<EmergencyAdminSetHistory | null>(
      store.get("EmergencyAdminSetHistory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get caller(): Bytes {
    let value = this.get("caller");
    return value!.toBytes();
  }

  set caller(value: Bytes) {
    this.set("caller", Value.fromBytes(value));
  }

  get oldEmergencyAdmin(): Bytes {
    let value = this.get("oldEmergencyAdmin");
    return value!.toBytes();
  }

  set oldEmergencyAdmin(value: Bytes) {
    this.set("oldEmergencyAdmin", Value.fromBytes(value));
  }

  get newEmergencyAdmin(): Bytes {
    let value = this.get("newEmergencyAdmin");
    return value!.toBytes();
  }

  set newEmergencyAdmin(value: Bytes) {
    this.set("newEmergencyAdmin", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class ManagerGovernanceSetHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ManagerGovernanceSetHistory entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ManagerGovernanceSetHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ManagerGovernanceSetHistory", id.toString(), this);
    }
  }

  static load(id: string): ManagerGovernanceSetHistory | null {
    return changetype<ManagerGovernanceSetHistory | null>(
      store.get("ManagerGovernanceSetHistory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get caller(): Bytes {
    let value = this.get("caller");
    return value!.toBytes();
  }

  set caller(value: Bytes) {
    this.set("caller", Value.fromBytes(value));
  }

  get prevGovernance(): Bytes {
    let value = this.get("prevGovernance");
    return value!.toBytes();
  }

  set prevGovernance(value: Bytes) {
    this.set("prevGovernance", Value.fromBytes(value));
  }

  get newGovernance(): Bytes {
    let value = this.get("newGovernance");
    return value!.toBytes();
  }

  set newGovernance(value: Bytes) {
    this.set("newGovernance", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class HubCreatorWhitelistedRecord extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save HubCreatorWhitelistedRecord entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type HubCreatorWhitelistedRecord must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("HubCreatorWhitelistedRecord", id.toString(), this);
    }
  }

  static load(id: string): HubCreatorWhitelistedRecord | null {
    return changetype<HubCreatorWhitelistedRecord | null>(
      store.get("HubCreatorWhitelistedRecord", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get soulBoundTokenId(): BigInt {
    let value = this.get("soulBoundTokenId");
    return value!.toBigInt();
  }

  set soulBoundTokenId(value: BigInt) {
    this.set("soulBoundTokenId", Value.fromBigInt(value));
  }

  get whitelisted(): boolean {
    let value = this.get("whitelisted");
    return value!.toBoolean();
  }

  set whitelisted(value: boolean) {
    this.set("whitelisted", Value.fromBoolean(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class ModuleGlobalsTreasurySetHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ModuleGlobalsTreasurySetHistory entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ModuleGlobalsTreasurySetHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ModuleGlobalsTreasurySetHistory", id.toString(), this);
    }
  }

  static load(id: string): ModuleGlobalsTreasurySetHistory | null {
    return changetype<ModuleGlobalsTreasurySetHistory | null>(
      store.get("ModuleGlobalsTreasurySetHistory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get prevTreasury(): Bytes {
    let value = this.get("prevTreasury");
    return value!.toBytes();
  }

  set prevTreasury(value: Bytes) {
    this.set("prevTreasury", Value.fromBytes(value));
  }

  get newTreasury(): Bytes {
    let value = this.get("newTreasury");
    return value!.toBytes();
  }

  set newTreasury(value: Bytes) {
    this.set("newTreasury", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class ModuleGlobalsVoucherSetHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ModuleGlobalsVoucherSetHistory entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ModuleGlobalsVoucherSetHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ModuleGlobalsVoucherSetHistory", id.toString(), this);
    }
  }

  static load(id: string): ModuleGlobalsVoucherSetHistory | null {
    return changetype<ModuleGlobalsVoucherSetHistory | null>(
      store.get("ModuleGlobalsVoucherSetHistory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get prevVoucher(): Bytes {
    let value = this.get("prevVoucher");
    return value!.toBytes();
  }

  set prevVoucher(value: Bytes) {
    this.set("prevVoucher", Value.fromBytes(value));
  }

  get newVoucher(): Bytes {
    let value = this.get("newVoucher");
    return value!.toBytes();
  }

  set newVoucher(value: Bytes) {
    this.set("newVoucher", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class UserAmountLimitSetHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save UserAmountLimitSetHistory entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UserAmountLimitSetHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UserAmountLimitSetHistory", id.toString(), this);
    }
  }

  static load(id: string): UserAmountLimitSetHistory | null {
    return changetype<UserAmountLimitSetHistory | null>(
      store.get("UserAmountLimitSetHistory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get preUserAmountLimit(): BigInt {
    let value = this.get("preUserAmountLimit");
    return value!.toBigInt();
  }

  set preUserAmountLimit(value: BigInt) {
    this.set("preUserAmountLimit", Value.fromBigInt(value));
  }

  get userAmountLimit(): BigInt {
    let value = this.get("userAmountLimit");
    return value!.toBigInt();
  }

  set userAmountLimit(value: BigInt) {
    this.set("userAmountLimit", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class ModuleGlobalsManagerSetHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ModuleGlobalsManagerSetHistory entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ModuleGlobalsManagerSetHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ModuleGlobalsManagerSetHistory", id.toString(), this);
    }
  }

  static load(id: string): ModuleGlobalsManagerSetHistory | null {
    return changetype<ModuleGlobalsManagerSetHistory | null>(
      store.get("ModuleGlobalsManagerSetHistory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get prevManager(): Bytes {
    let value = this.get("prevManager");
    return value!.toBytes();
  }

  set prevManager(value: Bytes) {
    this.set("prevManager", Value.fromBytes(value));
  }

  get newManager(): Bytes {
    let value = this.get("newManager");
    return value!.toBytes();
  }

  set newManager(value: Bytes) {
    this.set("newManager", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class ModuleGlobalsSBTSetHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ModuleGlobalsSBTSetHistory entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ModuleGlobalsSBTSetHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ModuleGlobalsSBTSetHistory", id.toString(), this);
    }
  }

  static load(id: string): ModuleGlobalsSBTSetHistory | null {
    return changetype<ModuleGlobalsSBTSetHistory | null>(
      store.get("ModuleGlobalsSBTSetHistory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get prevSBT(): Bytes {
    let value = this.get("prevSBT");
    return value!.toBytes();
  }

  set prevSBT(value: Bytes) {
    this.set("prevSBT", Value.fromBytes(value));
  }

  get newSBT(): Bytes {
    let value = this.get("newSBT");
    return value!.toBytes();
  }

  set newSBT(value: Bytes) {
    this.set("newSBT", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class ModuleGlobalsGovernanceSetHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ModuleGlobalsGovernanceSetHistory entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ModuleGlobalsGovernanceSetHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ModuleGlobalsGovernanceSetHistory", id.toString(), this);
    }
  }

  static load(id: string): ModuleGlobalsGovernanceSetHistory | null {
    return changetype<ModuleGlobalsGovernanceSetHistory | null>(
      store.get("ModuleGlobalsGovernanceSetHistory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get prevGovernance(): Bytes {
    let value = this.get("prevGovernance");
    return value!.toBytes();
  }

  set prevGovernance(value: Bytes) {
    this.set("prevGovernance", Value.fromBytes(value));
  }

  get newGovernance(): Bytes {
    let value = this.get("newGovernance");
    return value!.toBytes();
  }

  set newGovernance(value: Bytes) {
    this.set("newGovernance", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class PublishRoyalty extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PublishRoyalty entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PublishRoyalty must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PublishRoyalty", id.toString(), this);
    }
  }

  static load(id: string): PublishRoyalty | null {
    return changetype<PublishRoyalty | null>(store.get("PublishRoyalty", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get publishRoyalty(): BigInt {
    let value = this.get("publishRoyalty");
    return value!.toBigInt();
  }

  set publishRoyalty(value: BigInt) {
    this.set("publishRoyalty", Value.fromBigInt(value));
  }
}

export class TreasuryFeeRecord extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TreasuryFeeRecord entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TreasuryFeeRecord must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TreasuryFeeRecord", id.toString(), this);
    }
  }

  static load(id: string): TreasuryFeeRecord | null {
    return changetype<TreasuryFeeRecord | null>(
      store.get("TreasuryFeeRecord", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get prevTreasuryFee(): i32 {
    let value = this.get("prevTreasuryFee");
    return value!.toI32();
  }

  set prevTreasuryFee(value: i32) {
    this.set("prevTreasuryFee", Value.fromI32(value));
  }

  get newTreasuryFee(): i32 {
    let value = this.get("newTreasuryFee");
    return value!.toI32();
  }

  set newTreasuryFee(value: i32) {
    this.set("newTreasuryFee", Value.fromI32(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class PublishRoyaltyRecord extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PublishRoyaltyRecord entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PublishRoyaltyRecord must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PublishRoyaltyRecord", id.toString(), this);
    }
  }

  static load(id: string): PublishRoyaltyRecord | null {
    return changetype<PublishRoyaltyRecord | null>(
      store.get("PublishRoyaltyRecord", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get prevPublishRoyalty(): BigInt {
    let value = this.get("prevPublishRoyalty");
    return value!.toBigInt();
  }

  set prevPublishRoyalty(value: BigInt) {
    this.set("prevPublishRoyalty", Value.fromBigInt(value));
  }

  get newPublishRoyalty(): BigInt {
    let value = this.get("newPublishRoyalty");
    return value!.toBigInt();
  }

  set newPublishRoyalty(value: BigInt) {
    this.set("newPublishRoyalty", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class CollectModuleWhitelistedRecord extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CollectModuleWhitelistedRecord entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CollectModuleWhitelistedRecord must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CollectModuleWhitelistedRecord", id.toString(), this);
    }
  }

  static load(id: string): CollectModuleWhitelistedRecord | null {
    return changetype<CollectModuleWhitelistedRecord | null>(
      store.get("CollectModuleWhitelistedRecord", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get collectModule(): Bytes {
    let value = this.get("collectModule");
    return value!.toBytes();
  }

  set collectModule(value: Bytes) {
    this.set("collectModule", Value.fromBytes(value));
  }

  get whitelisted(): boolean {
    let value = this.get("whitelisted");
    return value!.toBoolean();
  }

  set whitelisted(value: boolean) {
    this.set("whitelisted", Value.fromBoolean(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class PublishModuleWhitelistedRecord extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save PublishModuleWhitelistedRecord entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PublishModuleWhitelistedRecord must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PublishModuleWhitelistedRecord", id.toString(), this);
    }
  }

  static load(id: string): PublishModuleWhitelistedRecord | null {
    return changetype<PublishModuleWhitelistedRecord | null>(
      store.get("PublishModuleWhitelistedRecord", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get publishModule(): Bytes {
    let value = this.get("publishModule");
    return value!.toBytes();
  }

  set publishModule(value: Bytes) {
    this.set("publishModule", Value.fromBytes(value));
  }

  get whitelisted(): boolean {
    let value = this.get("whitelisted");
    return value!.toBoolean();
  }

  set whitelisted(value: boolean) {
    this.set("whitelisted", Value.fromBoolean(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class TemplateWhitelistedRecord extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save TemplateWhitelistedRecord entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TemplateWhitelistedRecord must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TemplateWhitelistedRecord", id.toString(), this);
    }
  }

  static load(id: string): TemplateWhitelistedRecord | null {
    return changetype<TemplateWhitelistedRecord | null>(
      store.get("TemplateWhitelistedRecord", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get template(): Bytes {
    let value = this.get("template");
    return value!.toBytes();
  }

  set template(value: Bytes) {
    this.set("template", Value.fromBytes(value));
  }

  get whitelisted(): boolean {
    let value = this.get("whitelisted");
    return value!.toBoolean();
  }

  set whitelisted(value: boolean) {
    this.set("whitelisted", Value.fromBoolean(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class ExchangeSBTByEthHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ExchangeSBTByEthHistory entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ExchangeSBTByEthHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ExchangeSBTByEthHistory", id.toString(), this);
    }
  }

  static load(id: string): ExchangeSBTByEthHistory | null {
    return changetype<ExchangeSBTByEthHistory | null>(
      store.get("ExchangeSBTByEthHistory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    return value!.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get exchangeWallet(): Bytes {
    let value = this.get("exchangeWallet");
    return value!.toBytes();
  }

  set exchangeWallet(value: Bytes) {
    this.set("exchangeWallet", Value.fromBytes(value));
  }

  get sbtValue(): BigInt {
    let value = this.get("sbtValue");
    return value!.toBigInt();
  }

  set sbtValue(value: BigInt) {
    this.set("sbtValue", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class ExchangeEthBySBTHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ExchangeEthBySBTHistory entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ExchangeEthBySBTHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ExchangeEthBySBTHistory", id.toString(), this);
    }
  }

  static load(id: string): ExchangeEthBySBTHistory | null {
    return changetype<ExchangeEthBySBTHistory | null>(
      store.get("ExchangeEthBySBTHistory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    return value!.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get toWallet(): Bytes {
    let value = this.get("toWallet");
    return value!.toBytes();
  }

  set toWallet(value: Bytes) {
    this.set("toWallet", Value.fromBytes(value));
  }

  get sbtValue(): BigInt {
    let value = this.get("sbtValue");
    return value!.toBigInt();
  }

  set sbtValue(value: BigInt) {
    this.set("sbtValue", Value.fromBigInt(value));
  }

  get exchangePrice(): BigInt {
    let value = this.get("exchangePrice");
    return value!.toBigInt();
  }

  set exchangePrice(value: BigInt) {
    this.set("exchangePrice", Value.fromBigInt(value));
  }

  get ethAmount(): BigInt {
    let value = this.get("ethAmount");
    return value!.toBigInt();
  }

  set ethAmount(value: BigInt) {
    this.set("ethAmount", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Market extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Market entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Market must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Market", id.toString(), this);
    }
  }

  static load(id: string): Market | null {
    return changetype<Market | null>(store.get("Market", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get derivativeNFT(): string {
    let value = this.get("derivativeNFT");
    return value!.toString();
  }

  set derivativeNFT(value: string) {
    this.set("derivativeNFT", Value.fromString(value));
  }

  get feePayType(): i32 {
    let value = this.get("feePayType");
    return value!.toI32();
  }

  set feePayType(value: i32) {
    this.set("feePayType", Value.fromI32(value));
  }

  get feeShareType(): i32 {
    let value = this.get("feeShareType");
    return value!.toI32();
  }

  set feeShareType(value: i32) {
    this.set("feeShareType", Value.fromI32(value));
  }

  get royaltyBasisPoints(): i32 {
    let value = this.get("royaltyBasisPoints");
    return value!.toI32();
  }

  set royaltyBasisPoints(value: i32) {
    this.set("royaltyBasisPoints", Value.fromI32(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class MarketPlaceERC3525ReceivedHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save MarketPlaceERC3525ReceivedHistory entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MarketPlaceERC3525ReceivedHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MarketPlaceERC3525ReceivedHistory", id.toString(), this);
    }
  }

  static load(id: string): MarketPlaceERC3525ReceivedHistory | null {
    return changetype<MarketPlaceERC3525ReceivedHistory | null>(
      store.get("MarketPlaceERC3525ReceivedHistory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    return value!.toBytes();
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get operator(): Bytes {
    let value = this.get("operator");
    return value!.toBytes();
  }

  set operator(value: Bytes) {
    this.set("operator", Value.fromBytes(value));
  }

  get fromTokenId(): BigInt {
    let value = this.get("fromTokenId");
    return value!.toBigInt();
  }

  set fromTokenId(value: BigInt) {
    this.set("fromTokenId", Value.fromBigInt(value));
  }

  get toTokenId(): BigInt {
    let value = this.get("toTokenId");
    return value!.toBigInt();
  }

  set toTokenId(value: BigInt) {
    this.set("toTokenId", Value.fromBigInt(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get data(): Bytes | null {
    let value = this.get("data");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set data(value: Bytes | null) {
    if (!value) {
      this.unset("data");
    } else {
      this.set("data", Value.fromBytes(<Bytes>value));
    }
  }

  get gas(): BigInt {
    let value = this.get("gas");
    return value!.toBigInt();
  }

  set gas(value: BigInt) {
    this.set("gas", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Creator extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Creator entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Creator must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Creator", id.toString(), this);
    }
  }

  static load(id: string): Creator | null {
    return changetype<Creator | null>(store.get("Creator", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    return value!.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get nfts(): Array<string> {
    let value = this.get("nfts");
    return value!.toStringArray();
  }

  set nfts(value: Array<string>) {
    this.set("nfts", Value.fromStringArray(value));
  }

  get netSalesInSBTValue(): BigDecimal {
    let value = this.get("netSalesInSBTValue");
    return value!.toBigDecimal();
  }

  set netSalesInSBTValue(value: BigDecimal) {
    this.set("netSalesInSBTValue", Value.fromBigDecimal(value));
  }

  get netSalesPendingInSBTValue(): BigDecimal {
    let value = this.get("netSalesPendingInSBTValue");
    return value!.toBigDecimal();
  }

  set netSalesPendingInSBTValue(value: BigDecimal) {
    this.set("netSalesPendingInSBTValue", Value.fromBigDecimal(value));
  }

  get netRevenueInSBTValue(): BigDecimal {
    let value = this.get("netRevenueInSBTValue");
    return value!.toBigDecimal();
  }

  set netRevenueInSBTValue(value: BigDecimal) {
    this.set("netRevenueInSBTValue", Value.fromBigDecimal(value));
  }

  get netRevenuePendingInSBTValue(): BigDecimal {
    let value = this.get("netRevenuePendingInSBTValue");
    return value!.toBigDecimal();
  }

  set netRevenuePendingInSBTValue(value: BigDecimal) {
    this.set("netRevenuePendingInSBTValue", Value.fromBigDecimal(value));
  }
}

export class DerivativeNFTContract extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save DerivativeNFTContract entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DerivativeNFTContract must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DerivativeNFTContract", id.toString(), this);
    }
  }

  static load(id: string): DerivativeNFTContract | null {
    return changetype<DerivativeNFTContract | null>(
      store.get("DerivativeNFTContract", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contract(): Bytes {
    let value = this.get("contract");
    return value!.toBytes();
  }

  set contract(value: Bytes) {
    this.set("contract", Value.fromBytes(value));
  }

  get name(): string | null {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (!value) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(<string>value));
    }
  }

  get symbol(): string | null {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set symbol(value: string | null) {
    if (!value) {
      this.unset("symbol");
    } else {
      this.set("symbol", Value.fromString(<string>value));
    }
  }

  get baseURI(): string | null {
    let value = this.get("baseURI");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set baseURI(value: string | null) {
    if (!value) {
      this.unset("baseURI");
    } else {
      this.set("baseURI", Value.fromString(<string>value));
    }
  }

  get maxTokenID(): BigInt | null {
    let value = this.get("maxTokenID");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set maxTokenID(value: BigInt | null) {
    if (!value) {
      this.unset("maxTokenID");
    } else {
      this.set("maxTokenID", Value.fromBigInt(<BigInt>value));
    }
  }

  get nfts(): Array<string> {
    let value = this.get("nfts");
    return value!.toStringArray();
  }

  set nfts(value: Array<string>) {
    this.set("nfts", Value.fromStringArray(value));
  }
}

export class NftMarketContract extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NftMarketContract entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NftMarketContract must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("NftMarketContract", id.toString(), this);
    }
  }

  static load(id: string): NftMarketContract | null {
    return changetype<NftMarketContract | null>(
      store.get("NftMarketContract", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get numberOfBidsPlaced(): BigInt {
    let value = this.get("numberOfBidsPlaced");
    return value!.toBigInt();
  }

  set numberOfBidsPlaced(value: BigInt) {
    this.set("numberOfBidsPlaced", Value.fromBigInt(value));
  }
}

export class NftMarketAuction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NftMarketAuction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NftMarketAuction must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("NftMarketAuction", id.toString(), this);
    }
  }

  static load(id: string): NftMarketAuction | null {
    return changetype<NftMarketAuction | null>(
      store.get("NftMarketAuction", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get nftMarketContract(): string {
    let value = this.get("nftMarketContract");
    return value!.toString();
  }

  set nftMarketContract(value: string) {
    this.set("nftMarketContract", Value.fromString(value));
  }

  get auctionId(): BigInt {
    let value = this.get("auctionId");
    return value!.toBigInt();
  }

  set auctionId(value: BigInt) {
    this.set("auctionId", Value.fromBigInt(value));
  }

  get dnft(): string {
    let value = this.get("dnft");
    return value!.toString();
  }

  set dnft(value: string) {
    this.set("dnft", Value.fromString(value));
  }

  get derivativeNFT(): string {
    let value = this.get("derivativeNFT");
    return value!.toString();
  }

  set derivativeNFT(value: string) {
    this.set("derivativeNFT", Value.fromString(value));
  }

  get status(): string {
    let value = this.get("status");
    return value!.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get seller(): string {
    let value = this.get("seller");
    return value!.toString();
  }

  set seller(value: string) {
    this.set("seller", Value.fromString(value));
  }

  get dateCreated(): BigInt {
    let value = this.get("dateCreated");
    return value!.toBigInt();
  }

  set dateCreated(value: BigInt) {
    this.set("dateCreated", Value.fromBigInt(value));
  }

  get transactionHashCreated(): Bytes {
    let value = this.get("transactionHashCreated");
    return value!.toBytes();
  }

  set transactionHashCreated(value: Bytes) {
    this.set("transactionHashCreated", Value.fromBytes(value));
  }

  get dateStarted(): BigInt | null {
    let value = this.get("dateStarted");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set dateStarted(value: BigInt | null) {
    if (!value) {
      this.unset("dateStarted");
    } else {
      this.set("dateStarted", Value.fromBigInt(<BigInt>value));
    }
  }

  get dateEnding(): BigInt | null {
    let value = this.get("dateEnding");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set dateEnding(value: BigInt | null) {
    if (!value) {
      this.unset("dateEnding");
    } else {
      this.set("dateEnding", Value.fromBigInt(<BigInt>value));
    }
  }

  get dateCanceled(): BigInt | null {
    let value = this.get("dateCanceled");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set dateCanceled(value: BigInt | null) {
    if (!value) {
      this.unset("dateCanceled");
    } else {
      this.set("dateCanceled", Value.fromBigInt(<BigInt>value));
    }
  }

  get canceledReason(): string | null {
    let value = this.get("canceledReason");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set canceledReason(value: string | null) {
    if (!value) {
      this.unset("canceledReason");
    } else {
      this.set("canceledReason", Value.fromString(<string>value));
    }
  }

  get dateFinalized(): BigInt | null {
    let value = this.get("dateFinalized");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set dateFinalized(value: BigInt | null) {
    if (!value) {
      this.unset("dateFinalized");
    } else {
      this.set("dateFinalized", Value.fromBigInt(<BigInt>value));
    }
  }

  get transactionHashCanceled(): Bytes | null {
    let value = this.get("transactionHashCanceled");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set transactionHashCanceled(value: Bytes | null) {
    if (!value) {
      this.unset("transactionHashCanceled");
    } else {
      this.set("transactionHashCanceled", Value.fromBytes(<Bytes>value));
    }
  }

  get reservePriceInSBTValue(): BigDecimal {
    let value = this.get("reservePriceInSBTValue");
    return value!.toBigDecimal();
  }

  set reservePriceInSBTValue(value: BigDecimal) {
    this.set("reservePriceInSBTValue", Value.fromBigDecimal(value));
  }

  get initialBid(): string | null {
    let value = this.get("initialBid");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set initialBid(value: string | null) {
    if (!value) {
      this.unset("initialBid");
    } else {
      this.set("initialBid", Value.fromString(<string>value));
    }
  }

  get highestBid(): string | null {
    let value = this.get("highestBid");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set highestBid(value: string | null) {
    if (!value) {
      this.unset("highestBid");
    } else {
      this.set("highestBid", Value.fromString(<string>value));
    }
  }

  get bids(): Array<string> {
    let value = this.get("bids");
    return value!.toStringArray();
  }

  set bids(value: Array<string>) {
    this.set("bids", Value.fromStringArray(value));
  }

  get creatorRevenueInSBTValue(): BigDecimal | null {
    let value = this.get("creatorRevenueInSBTValue");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set creatorRevenueInSBTValue(value: BigDecimal | null) {
    if (!value) {
      this.unset("creatorRevenueInSBTValue");
    } else {
      this.set(
        "creatorRevenueInSBTValue",
        Value.fromBigDecimal(<BigDecimal>value)
      );
    }
  }

  get previousCreatorRevenueInSBTValue(): BigDecimal | null {
    let value = this.get("previousCreatorRevenueInSBTValue");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set previousCreatorRevenueInSBTValue(value: BigDecimal | null) {
    if (!value) {
      this.unset("previousCreatorRevenueInSBTValue");
    } else {
      this.set(
        "previousCreatorRevenueInSBTValue",
        Value.fromBigDecimal(<BigDecimal>value)
      );
    }
  }

  get foundationRevenueInSBTValue(): BigDecimal | null {
    let value = this.get("foundationRevenueInSBTValue");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set foundationRevenueInSBTValue(value: BigDecimal | null) {
    if (!value) {
      this.unset("foundationRevenueInSBTValue");
    } else {
      this.set(
        "foundationRevenueInSBTValue",
        Value.fromBigDecimal(<BigDecimal>value)
      );
    }
  }

  get ownerRevenueInSBTValue(): BigDecimal | null {
    let value = this.get("ownerRevenueInSBTValue");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set ownerRevenueInSBTValue(value: BigDecimal | null) {
    if (!value) {
      this.unset("ownerRevenueInSBTValue");
    } else {
      this.set(
        "ownerRevenueInSBTValue",
        Value.fromBigDecimal(<BigDecimal>value)
      );
    }
  }

  get duration(): BigInt {
    let value = this.get("duration");
    return value!.toBigInt();
  }

  set duration(value: BigInt) {
    this.set("duration", Value.fromBigInt(value));
  }

  get extensionDuration(): BigInt {
    let value = this.get("extensionDuration");
    return value!.toBigInt();
  }

  set extensionDuration(value: BigInt) {
    this.set("extensionDuration", Value.fromBigInt(value));
  }

  get isPrimarySale(): boolean {
    let value = this.get("isPrimarySale");
    return value!.toBoolean();
  }

  set isPrimarySale(value: boolean) {
    this.set("isPrimarySale", Value.fromBoolean(value));
  }

  get numberOfBids(): BigInt {
    let value = this.get("numberOfBids");
    return value!.toBigInt();
  }

  set numberOfBids(value: BigInt) {
    this.set("numberOfBids", Value.fromBigInt(value));
  }

  get bidVolumeInSBTValue(): BigDecimal {
    let value = this.get("bidVolumeInSBTValue");
    return value!.toBigDecimal();
  }

  set bidVolumeInSBTValue(value: BigDecimal) {
    this.set("bidVolumeInSBTValue", Value.fromBigDecimal(value));
  }

  get dateInvalidated(): BigInt | null {
    let value = this.get("dateInvalidated");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set dateInvalidated(value: BigInt | null) {
    if (!value) {
      this.unset("dateInvalidated");
    } else {
      this.set("dateInvalidated", Value.fromBigInt(<BigInt>value));
    }
  }

  get transactionHashInvalidated(): Bytes | null {
    let value = this.get("transactionHashInvalidated");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set transactionHashInvalidated(value: Bytes | null) {
    if (!value) {
      this.unset("transactionHashInvalidated");
    } else {
      this.set("transactionHashInvalidated", Value.fromBytes(<Bytes>value));
    }
  }

  get buyReferrer(): string | null {
    let value = this.get("buyReferrer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set buyReferrer(value: string | null) {
    if (!value) {
      this.unset("buyReferrer");
    } else {
      this.set("buyReferrer", Value.fromString(<string>value));
    }
  }

  get buyReferrerFee(): BigDecimal | null {
    let value = this.get("buyReferrerFee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set buyReferrerFee(value: BigDecimal | null) {
    if (!value) {
      this.unset("buyReferrerFee");
    } else {
      this.set("buyReferrerFee", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get buyReferrerSellerFee(): BigDecimal | null {
    let value = this.get("buyReferrerSellerFee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set buyReferrerSellerFee(value: BigDecimal | null) {
    if (!value) {
      this.unset("buyReferrerSellerFee");
    } else {
      this.set("buyReferrerSellerFee", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get foundationProtocolFeeInSBTValue(): BigDecimal | null {
    let value = this.get("foundationProtocolFeeInSBTValue");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set foundationProtocolFeeInSBTValue(value: BigDecimal | null) {
    if (!value) {
      this.unset("foundationProtocolFeeInSBTValue");
    } else {
      this.set(
        "foundationProtocolFeeInSBTValue",
        Value.fromBigDecimal(<BigDecimal>value)
      );
    }
  }
}

export class NftMarketBid extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NftMarketBid entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NftMarketBid must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("NftMarketBid", id.toString(), this);
    }
  }

  static load(id: string): NftMarketBid | null {
    return changetype<NftMarketBid | null>(store.get("NftMarketBid", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get nftMarketAuction(): string {
    let value = this.get("nftMarketAuction");
    return value!.toString();
  }

  set nftMarketAuction(value: string) {
    this.set("nftMarketAuction", Value.fromString(value));
  }

  get dnft(): string {
    let value = this.get("dnft");
    return value!.toString();
  }

  set dnft(value: string) {
    this.set("dnft", Value.fromString(value));
  }

  get bidder(): string {
    let value = this.get("bidder");
    return value!.toString();
  }

  set bidder(value: string) {
    this.set("bidder", Value.fromString(value));
  }

  get datePlaced(): BigInt {
    let value = this.get("datePlaced");
    return value!.toBigInt();
  }

  set datePlaced(value: BigInt) {
    this.set("datePlaced", Value.fromBigInt(value));
  }

  get transactionHashPlaced(): Bytes {
    let value = this.get("transactionHashPlaced");
    return value!.toBytes();
  }

  set transactionHashPlaced(value: Bytes) {
    this.set("transactionHashPlaced", Value.fromBytes(value));
  }

  get amountInSBTValue(): BigDecimal {
    let value = this.get("amountInSBTValue");
    return value!.toBigDecimal();
  }

  set amountInSBTValue(value: BigDecimal) {
    this.set("amountInSBTValue", Value.fromBigDecimal(value));
  }

  get status(): string {
    let value = this.get("status");
    return value!.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get dateLeftActiveStatus(): BigInt | null {
    let value = this.get("dateLeftActiveStatus");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set dateLeftActiveStatus(value: BigInt | null) {
    if (!value) {
      this.unset("dateLeftActiveStatus");
    } else {
      this.set("dateLeftActiveStatus", Value.fromBigInt(<BigInt>value));
    }
  }

  get transactionHashLeftActiveStatus(): Bytes | null {
    let value = this.get("transactionHashLeftActiveStatus");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set transactionHashLeftActiveStatus(value: Bytes | null) {
    if (!value) {
      this.unset("transactionHashLeftActiveStatus");
    } else {
      this.set(
        "transactionHashLeftActiveStatus",
        Value.fromBytes(<Bytes>value)
      );
    }
  }

  get seller(): string {
    let value = this.get("seller");
    return value!.toString();
  }

  set seller(value: string) {
    this.set("seller", Value.fromString(value));
  }

  get extendedAuction(): boolean {
    let value = this.get("extendedAuction");
    return value!.toBoolean();
  }

  set extendedAuction(value: boolean) {
    this.set("extendedAuction", Value.fromBoolean(value));
  }

  get outbidByBid(): string | null {
    let value = this.get("outbidByBid");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set outbidByBid(value: string | null) {
    if (!value) {
      this.unset("outbidByBid");
    } else {
      this.set("outbidByBid", Value.fromString(<string>value));
    }
  }

  get bidThisOutbid(): string | null {
    let value = this.get("bidThisOutbid");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set bidThisOutbid(value: string | null) {
    if (!value) {
      this.unset("bidThisOutbid");
    } else {
      this.set("bidThisOutbid", Value.fromString(<string>value));
    }
  }
}

export class DnftHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DnftHistory entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DnftHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DnftHistory", id.toString(), this);
    }
  }

  static load(id: string): DnftHistory | null {
    return changetype<DnftHistory | null>(store.get("DnftHistory", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get dnft(): string {
    let value = this.get("dnft");
    return value!.toString();
  }

  set dnft(value: string) {
    this.set("dnft", Value.fromString(value));
  }

  get event(): string {
    let value = this.get("event");
    return value!.toString();
  }

  set event(value: string) {
    this.set("event", Value.fromString(value));
  }

  get auction(): string | null {
    let value = this.get("auction");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set auction(value: string | null) {
    if (!value) {
      this.unset("auction");
    } else {
      this.set("auction", Value.fromString(<string>value));
    }
  }

  get offer(): string | null {
    let value = this.get("offer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set offer(value: string | null) {
    if (!value) {
      this.unset("offer");
    } else {
      this.set("offer", Value.fromString(<string>value));
    }
  }

  get buyNow(): string | null {
    let value = this.get("buyNow");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set buyNow(value: string | null) {
    if (!value) {
      this.unset("buyNow");
    } else {
      this.set("buyNow", Value.fromString(<string>value));
    }
  }

  get contractAddress(): Bytes {
    let value = this.get("contractAddress");
    return value!.toBytes();
  }

  set contractAddress(value: Bytes) {
    this.set("contractAddress", Value.fromBytes(value));
  }

  get date(): BigInt {
    let value = this.get("date");
    return value!.toBigInt();
  }

  set date(value: BigInt) {
    this.set("date", Value.fromBigInt(value));
  }

  get marketplace(): string | null {
    let value = this.get("marketplace");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set marketplace(value: string | null) {
    if (!value) {
      this.unset("marketplace");
    } else {
      this.set("marketplace", Value.fromString(<string>value));
    }
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get actorAccount(): string {
    let value = this.get("actorAccount");
    return value!.toString();
  }

  set actorAccount(value: string) {
    this.set("actorAccount", Value.fromString(value));
  }

  get txOrigin(): string {
    let value = this.get("txOrigin");
    return value!.toString();
  }

  set txOrigin(value: string) {
    this.set("txOrigin", Value.fromString(value));
  }

  get nftRecipient(): string | null {
    let value = this.get("nftRecipient");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set nftRecipient(value: string | null) {
    if (!value) {
      this.unset("nftRecipient");
    } else {
      this.set("nftRecipient", Value.fromString(<string>value));
    }
  }

  get amountInSBTValue(): BigDecimal | null {
    let value = this.get("amountInSBTValue");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set amountInSBTValue(value: BigDecimal | null) {
    if (!value) {
      this.unset("amountInSBTValue");
    } else {
      this.set("amountInSBTValue", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get amountInTokens(): BigInt | null {
    let value = this.get("amountInTokens");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amountInTokens(value: BigInt | null) {
    if (!value) {
      this.unset("amountInTokens");
    } else {
      this.set("amountInTokens", Value.fromBigInt(<BigInt>value));
    }
  }

  get tokenAddress(): Bytes | null {
    let value = this.get("tokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set tokenAddress(value: Bytes | null) {
    if (!value) {
      this.unset("tokenAddress");
    } else {
      this.set("tokenAddress", Value.fromBytes(<Bytes>value));
    }
  }
}

export class PercentSplitShare extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PercentSplitShare entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PercentSplitShare must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PercentSplitShare", id.toString(), this);
    }
  }

  static load(id: string): PercentSplitShare | null {
    return changetype<PercentSplitShare | null>(
      store.get("PercentSplitShare", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get split(): string {
    let value = this.get("split");
    return value!.toString();
  }

  set split(value: string) {
    this.set("split", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    return value!.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get shareInPercent(): BigDecimal {
    let value = this.get("shareInPercent");
    return value!.toBigDecimal();
  }

  set shareInPercent(value: BigDecimal) {
    this.set("shareInPercent", Value.fromBigDecimal(value));
  }

  get indexOfShare(): BigInt {
    let value = this.get("indexOfShare");
    return value!.toBigInt();
  }

  set indexOfShare(value: BigInt) {
    this.set("indexOfShare", Value.fromBigInt(value));
  }
}

export class PercentSplit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PercentSplit entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PercentSplit must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PercentSplit", id.toString(), this);
    }
  }

  static load(id: string): PercentSplit | null {
    return changetype<PercentSplit | null>(store.get("PercentSplit", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get shares(): Array<string> {
    let value = this.get("shares");
    return value!.toStringArray();
  }

  set shares(value: Array<string>) {
    this.set("shares", Value.fromStringArray(value));
  }

  get nfts(): Array<string> {
    let value = this.get("nfts");
    return value!.toStringArray();
  }

  set nfts(value: Array<string>) {
    this.set("nfts", Value.fromStringArray(value));
  }

  get shareCount(): BigInt {
    let value = this.get("shareCount");
    return value!.toBigInt();
  }

  set shareCount(value: BigInt) {
    this.set("shareCount", Value.fromBigInt(value));
  }

  get dateCreated(): BigInt {
    let value = this.get("dateCreated");
    return value!.toBigInt();
  }

  set dateCreated(value: BigInt) {
    this.set("dateCreated", Value.fromBigInt(value));
  }
}

export class Fsbt extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Fsbt entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Fsbt must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Fsbt", id.toString(), this);
    }
  }

  static load(id: string): Fsbt | null {
    return changetype<Fsbt | null>(store.get("Fsbt", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get balanceInSBTValue(): BigDecimal {
    let value = this.get("balanceInSBTValue");
    return value!.toBigDecimal();
  }

  set balanceInSBTValue(value: BigDecimal) {
    this.set("balanceInSBTValue", Value.fromBigDecimal(value));
  }

  get escrow(): Array<string> {
    let value = this.get("escrow");
    return value!.toStringArray();
  }

  set escrow(value: Array<string>) {
    this.set("escrow", Value.fromStringArray(value));
  }

  get dateLastUpdated(): BigInt {
    let value = this.get("dateLastUpdated");
    return value!.toBigInt();
  }

  set dateLastUpdated(value: BigInt) {
    this.set("dateLastUpdated", Value.fromBigInt(value));
  }
}

export class FsbtEscrow extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FsbtEscrow entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type FsbtEscrow must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("FsbtEscrow", id.toString(), this);
    }
  }

  static load(id: string): FsbtEscrow | null {
    return changetype<FsbtEscrow | null>(store.get("FsbtEscrow", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get fsbt(): string {
    let value = this.get("fsbt");
    return value!.toString();
  }

  set fsbt(value: string) {
    this.set("fsbt", Value.fromString(value));
  }

  get amountInSBTValue(): BigDecimal {
    let value = this.get("amountInSBTValue");
    return value!.toBigDecimal();
  }

  set amountInSBTValue(value: BigDecimal) {
    this.set("amountInSBTValue", Value.fromBigDecimal(value));
  }

  get dateExpiry(): BigInt {
    let value = this.get("dateExpiry");
    return value!.toBigInt();
  }

  set dateExpiry(value: BigInt) {
    this.set("dateExpiry", Value.fromBigInt(value));
  }

  get transactionHashCreated(): Bytes {
    let value = this.get("transactionHashCreated");
    return value!.toBytes();
  }

  set transactionHashCreated(value: Bytes) {
    this.set("transactionHashCreated", Value.fromBytes(value));
  }

  get transactionHashRemoved(): Bytes | null {
    let value = this.get("transactionHashRemoved");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set transactionHashRemoved(value: Bytes | null) {
    if (!value) {
      this.unset("transactionHashRemoved");
    } else {
      this.set("transactionHashRemoved", Value.fromBytes(<Bytes>value));
    }
  }

  get dateRemoved(): BigInt | null {
    let value = this.get("dateRemoved");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set dateRemoved(value: BigInt | null) {
    if (!value) {
      this.unset("dateRemoved");
    } else {
      this.set("dateRemoved", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class NftMarketOffer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NftMarketOffer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NftMarketOffer must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("NftMarketOffer", id.toString(), this);
    }
  }

  static load(id: string): NftMarketOffer | null {
    return changetype<NftMarketOffer | null>(store.get("NftMarketOffer", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get nftMarketContract(): string {
    let value = this.get("nftMarketContract");
    return value!.toString();
  }

  set nftMarketContract(value: string) {
    this.set("nftMarketContract", Value.fromString(value));
  }

  get dnft(): string {
    let value = this.get("dnft");
    return value!.toString();
  }

  set dnft(value: string) {
    this.set("dnft", Value.fromString(value));
  }

  get derivativeNFT(): string {
    let value = this.get("derivativeNFT");
    return value!.toString();
  }

  set derivativeNFT(value: string) {
    this.set("derivativeNFT", Value.fromString(value));
  }

  get status(): string {
    let value = this.get("status");
    return value!.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get buyer(): string {
    let value = this.get("buyer");
    return value!.toString();
  }

  set buyer(value: string) {
    this.set("buyer", Value.fromString(value));
  }

  get seller(): string | null {
    let value = this.get("seller");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set seller(value: string | null) {
    if (!value) {
      this.unset("seller");
    } else {
      this.set("seller", Value.fromString(<string>value));
    }
  }

  get amountInSBTValue(): BigDecimal {
    let value = this.get("amountInSBTValue");
    return value!.toBigDecimal();
  }

  set amountInSBTValue(value: BigDecimal) {
    this.set("amountInSBTValue", Value.fromBigDecimal(value));
  }

  get dateCreated(): BigInt {
    let value = this.get("dateCreated");
    return value!.toBigInt();
  }

  set dateCreated(value: BigInt) {
    this.set("dateCreated", Value.fromBigInt(value));
  }

  get transactionHashCreated(): Bytes {
    let value = this.get("transactionHashCreated");
    return value!.toBytes();
  }

  set transactionHashCreated(value: Bytes) {
    this.set("transactionHashCreated", Value.fromBytes(value));
  }

  get dateExpires(): BigInt {
    let value = this.get("dateExpires");
    return value!.toBigInt();
  }

  set dateExpires(value: BigInt) {
    this.set("dateExpires", Value.fromBigInt(value));
  }

  get dateCanceled(): BigInt | null {
    let value = this.get("dateCanceled");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set dateCanceled(value: BigInt | null) {
    if (!value) {
      this.unset("dateCanceled");
    } else {
      this.set("dateCanceled", Value.fromBigInt(<BigInt>value));
    }
  }

  get canceledReason(): string | null {
    let value = this.get("canceledReason");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set canceledReason(value: string | null) {
    if (!value) {
      this.unset("canceledReason");
    } else {
      this.set("canceledReason", Value.fromString(<string>value));
    }
  }

  get transactionHashCanceled(): Bytes | null {
    let value = this.get("transactionHashCanceled");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set transactionHashCanceled(value: Bytes | null) {
    if (!value) {
      this.unset("transactionHashCanceled");
    } else {
      this.set("transactionHashCanceled", Value.fromBytes(<Bytes>value));
    }
  }

  get dateAccepted(): BigInt | null {
    let value = this.get("dateAccepted");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set dateAccepted(value: BigInt | null) {
    if (!value) {
      this.unset("dateAccepted");
    } else {
      this.set("dateAccepted", Value.fromBigInt(<BigInt>value));
    }
  }

  get transactionHashAccepted(): Bytes | null {
    let value = this.get("transactionHashAccepted");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set transactionHashAccepted(value: Bytes | null) {
    if (!value) {
      this.unset("transactionHashAccepted");
    } else {
      this.set("transactionHashAccepted", Value.fromBytes(<Bytes>value));
    }
  }

  get dateOutbid(): BigInt | null {
    let value = this.get("dateOutbid");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set dateOutbid(value: BigInt | null) {
    if (!value) {
      this.unset("dateOutbid");
    } else {
      this.set("dateOutbid", Value.fromBigInt(<BigInt>value));
    }
  }

  get transactionHashOutbid(): Bytes | null {
    let value = this.get("transactionHashOutbid");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set transactionHashOutbid(value: Bytes | null) {
    if (!value) {
      this.unset("transactionHashOutbid");
    } else {
      this.set("transactionHashOutbid", Value.fromBytes(<Bytes>value));
    }
  }

  get dateInvalidated(): BigInt | null {
    let value = this.get("dateInvalidated");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set dateInvalidated(value: BigInt | null) {
    if (!value) {
      this.unset("dateInvalidated");
    } else {
      this.set("dateInvalidated", Value.fromBigInt(<BigInt>value));
    }
  }

  get transactionHashInvalidated(): Bytes | null {
    let value = this.get("transactionHashInvalidated");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set transactionHashInvalidated(value: Bytes | null) {
    if (!value) {
      this.unset("transactionHashInvalidated");
    } else {
      this.set("transactionHashInvalidated", Value.fromBytes(<Bytes>value));
    }
  }

  get creatorRevenueInSBTValue(): BigDecimal | null {
    let value = this.get("creatorRevenueInSBTValue");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set creatorRevenueInSBTValue(value: BigDecimal | null) {
    if (!value) {
      this.unset("creatorRevenueInSBTValue");
    } else {
      this.set(
        "creatorRevenueInSBTValue",
        Value.fromBigDecimal(<BigDecimal>value)
      );
    }
  }

  get previousCreatorRevenueInSBTValue(): BigDecimal | null {
    let value = this.get("previousCreatorRevenueInSBTValue");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set previousCreatorRevenueInSBTValue(value: BigDecimal | null) {
    if (!value) {
      this.unset("previousCreatorRevenueInSBTValue");
    } else {
      this.set(
        "previousCreatorRevenueInSBTValue",
        Value.fromBigDecimal(<BigDecimal>value)
      );
    }
  }

  get foundationRevenueInSBTValue(): BigDecimal | null {
    let value = this.get("foundationRevenueInSBTValue");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set foundationRevenueInSBTValue(value: BigDecimal | null) {
    if (!value) {
      this.unset("foundationRevenueInSBTValue");
    } else {
      this.set(
        "foundationRevenueInSBTValue",
        Value.fromBigDecimal(<BigDecimal>value)
      );
    }
  }

  get ownerRevenueInSBTValue(): BigDecimal | null {
    let value = this.get("ownerRevenueInSBTValue");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set ownerRevenueInSBTValue(value: BigDecimal | null) {
    if (!value) {
      this.unset("ownerRevenueInSBTValue");
    } else {
      this.set(
        "ownerRevenueInSBTValue",
        Value.fromBigDecimal(<BigDecimal>value)
      );
    }
  }

  get isPrimarySale(): boolean {
    let value = this.get("isPrimarySale");
    return value!.toBoolean();
  }

  set isPrimarySale(value: boolean) {
    this.set("isPrimarySale", Value.fromBoolean(value));
  }

  get outbidOffer(): string | null {
    let value = this.get("outbidOffer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set outbidOffer(value: string | null) {
    if (!value) {
      this.unset("outbidOffer");
    } else {
      this.set("outbidOffer", Value.fromString(<string>value));
    }
  }

  get offerOutbidBy(): string | null {
    let value = this.get("offerOutbidBy");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set offerOutbidBy(value: string | null) {
    if (!value) {
      this.unset("offerOutbidBy");
    } else {
      this.set("offerOutbidBy", Value.fromString(<string>value));
    }
  }

  get buyReferrer(): string | null {
    let value = this.get("buyReferrer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set buyReferrer(value: string | null) {
    if (!value) {
      this.unset("buyReferrer");
    } else {
      this.set("buyReferrer", Value.fromString(<string>value));
    }
  }

  get buyReferrerFee(): BigDecimal | null {
    let value = this.get("buyReferrerFee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set buyReferrerFee(value: BigDecimal | null) {
    if (!value) {
      this.unset("buyReferrerFee");
    } else {
      this.set("buyReferrerFee", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get buyReferrerSellerFee(): BigDecimal | null {
    let value = this.get("buyReferrerSellerFee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set buyReferrerSellerFee(value: BigDecimal | null) {
    if (!value) {
      this.unset("buyReferrerSellerFee");
    } else {
      this.set("buyReferrerSellerFee", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get foundationProtocolFeeInSBTValue(): BigDecimal | null {
    let value = this.get("foundationProtocolFeeInSBTValue");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set foundationProtocolFeeInSBTValue(value: BigDecimal | null) {
    if (!value) {
      this.unset("foundationProtocolFeeInSBTValue");
    } else {
      this.set(
        "foundationProtocolFeeInSBTValue",
        Value.fromBigDecimal(<BigDecimal>value)
      );
    }
  }
}

export class NftMarketBuyNow extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NftMarketBuyNow entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NftMarketBuyNow must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("NftMarketBuyNow", id.toString(), this);
    }
  }

  static load(id: string): NftMarketBuyNow | null {
    return changetype<NftMarketBuyNow | null>(store.get("NftMarketBuyNow", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get nftMarketContract(): string {
    let value = this.get("nftMarketContract");
    return value!.toString();
  }

  set nftMarketContract(value: string) {
    this.set("nftMarketContract", Value.fromString(value));
  }

  get dnft(): string {
    let value = this.get("dnft");
    return value!.toString();
  }

  set dnft(value: string) {
    this.set("dnft", Value.fromString(value));
  }

  get derivativeNFT(): string {
    let value = this.get("derivativeNFT");
    return value!.toString();
  }

  set derivativeNFT(value: string) {
    this.set("derivativeNFT", Value.fromString(value));
  }

  get project(): string {
    let value = this.get("project");
    return value!.toString();
  }

  set project(value: string) {
    this.set("project", Value.fromString(value));
  }

  get status(): string {
    let value = this.get("status");
    return value!.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get seller(): string {
    let value = this.get("seller");
    return value!.toString();
  }

  set seller(value: string) {
    this.set("seller", Value.fromString(value));
  }

  get amountInSBTValue(): BigDecimal {
    let value = this.get("amountInSBTValue");
    return value!.toBigDecimal();
  }

  set amountInSBTValue(value: BigDecimal) {
    this.set("amountInSBTValue", Value.fromBigDecimal(value));
  }

  get tokenIdEscrow(): BigInt {
    let value = this.get("tokenIdEscrow");
    return value!.toBigInt();
  }

  set tokenIdEscrow(value: BigInt) {
    this.set("tokenIdEscrow", Value.fromBigInt(value));
  }

  get onSellUnits(): BigInt {
    let value = this.get("onSellUnits");
    return value!.toBigInt();
  }

  set onSellUnits(value: BigInt) {
    this.set("onSellUnits", Value.fromBigInt(value));
  }

  get seledUnits(): BigInt {
    let value = this.get("seledUnits");
    return value!.toBigInt();
  }

  set seledUnits(value: BigInt) {
    this.set("seledUnits", Value.fromBigInt(value));
  }

  get dateCreated(): BigInt {
    let value = this.get("dateCreated");
    return value!.toBigInt();
  }

  set dateCreated(value: BigInt) {
    this.set("dateCreated", Value.fromBigInt(value));
  }

  get transactionHashCreated(): Bytes {
    let value = this.get("transactionHashCreated");
    return value!.toBytes();
  }

  set transactionHashCreated(value: Bytes) {
    this.set("transactionHashCreated", Value.fromBytes(value));
  }

  get buyer(): string | null {
    let value = this.get("buyer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set buyer(value: string | null) {
    if (!value) {
      this.unset("buyer");
    } else {
      this.set("buyer", Value.fromString(<string>value));
    }
  }

  get dateCanceled(): BigInt | null {
    let value = this.get("dateCanceled");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set dateCanceled(value: BigInt | null) {
    if (!value) {
      this.unset("dateCanceled");
    } else {
      this.set("dateCanceled", Value.fromBigInt(<BigInt>value));
    }
  }

  get transactionHashCanceled(): Bytes | null {
    let value = this.get("transactionHashCanceled");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set transactionHashCanceled(value: Bytes | null) {
    if (!value) {
      this.unset("transactionHashCanceled");
    } else {
      this.set("transactionHashCanceled", Value.fromBytes(<Bytes>value));
    }
  }

  get dateAccepted(): BigInt | null {
    let value = this.get("dateAccepted");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set dateAccepted(value: BigInt | null) {
    if (!value) {
      this.unset("dateAccepted");
    } else {
      this.set("dateAccepted", Value.fromBigInt(<BigInt>value));
    }
  }

  get transactionHashAccepted(): Bytes | null {
    let value = this.get("transactionHashAccepted");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set transactionHashAccepted(value: Bytes | null) {
    if (!value) {
      this.unset("transactionHashAccepted");
    } else {
      this.set("transactionHashAccepted", Value.fromBytes(<Bytes>value));
    }
  }

  get dateInvalidated(): BigInt | null {
    let value = this.get("dateInvalidated");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set dateInvalidated(value: BigInt | null) {
    if (!value) {
      this.unset("dateInvalidated");
    } else {
      this.set("dateInvalidated", Value.fromBigInt(<BigInt>value));
    }
  }

  get transactionHashInvalidated(): Bytes | null {
    let value = this.get("transactionHashInvalidated");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set transactionHashInvalidated(value: Bytes | null) {
    if (!value) {
      this.unset("transactionHashInvalidated");
    } else {
      this.set("transactionHashInvalidated", Value.fromBytes(<Bytes>value));
    }
  }

  get creatorRevenueInSBTValue(): BigDecimal | null {
    let value = this.get("creatorRevenueInSBTValue");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set creatorRevenueInSBTValue(value: BigDecimal | null) {
    if (!value) {
      this.unset("creatorRevenueInSBTValue");
    } else {
      this.set(
        "creatorRevenueInSBTValue",
        Value.fromBigDecimal(<BigDecimal>value)
      );
    }
  }

  get previousCreatorRevenueInSBTValue(): BigDecimal | null {
    let value = this.get("previousCreatorRevenueInSBTValue");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set previousCreatorRevenueInSBTValue(value: BigDecimal | null) {
    if (!value) {
      this.unset("previousCreatorRevenueInSBTValue");
    } else {
      this.set(
        "previousCreatorRevenueInSBTValue",
        Value.fromBigDecimal(<BigDecimal>value)
      );
    }
  }

  get foundationRevenueInSBTValue(): BigDecimal | null {
    let value = this.get("foundationRevenueInSBTValue");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set foundationRevenueInSBTValue(value: BigDecimal | null) {
    if (!value) {
      this.unset("foundationRevenueInSBTValue");
    } else {
      this.set(
        "foundationRevenueInSBTValue",
        Value.fromBigDecimal(<BigDecimal>value)
      );
    }
  }

  get ownerRevenueInSBTValue(): BigDecimal | null {
    let value = this.get("ownerRevenueInSBTValue");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set ownerRevenueInSBTValue(value: BigDecimal | null) {
    if (!value) {
      this.unset("ownerRevenueInSBTValue");
    } else {
      this.set(
        "ownerRevenueInSBTValue",
        Value.fromBigDecimal(<BigDecimal>value)
      );
    }
  }

  get isPrimarySale(): boolean {
    let value = this.get("isPrimarySale");
    return value!.toBoolean();
  }

  set isPrimarySale(value: boolean) {
    this.set("isPrimarySale", Value.fromBoolean(value));
  }

  get buyReferrer(): string | null {
    let value = this.get("buyReferrer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set buyReferrer(value: string | null) {
    if (!value) {
      this.unset("buyReferrer");
    } else {
      this.set("buyReferrer", Value.fromString(<string>value));
    }
  }

  get buyReferrerFee(): BigDecimal | null {
    let value = this.get("buyReferrerFee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set buyReferrerFee(value: BigDecimal | null) {
    if (!value) {
      this.unset("buyReferrerFee");
    } else {
      this.set("buyReferrerFee", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get buyReferrerSellerFee(): BigDecimal | null {
    let value = this.get("buyReferrerSellerFee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set buyReferrerSellerFee(value: BigDecimal | null) {
    if (!value) {
      this.unset("buyReferrerSellerFee");
    } else {
      this.set("buyReferrerSellerFee", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get foundationProtocolFeeInSBTValue(): BigDecimal | null {
    let value = this.get("foundationProtocolFeeInSBTValue");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set foundationProtocolFeeInSBTValue(value: BigDecimal | null) {
    if (!value) {
      this.unset("foundationProtocolFeeInSBTValue");
    } else {
      this.set(
        "foundationProtocolFeeInSBTValue",
        Value.fromBigDecimal(<BigDecimal>value)
      );
    }
  }
}

export class DNFT extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DNFT entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DNFT must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DNFT", id.toString(), this);
    }
  }

  static load(id: string): DNFT | null {
    return changetype<DNFT | null>(store.get("DNFT", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get derivativeNFT(): string {
    let value = this.get("derivativeNFT");
    return value!.toString();
  }

  set derivativeNFT(value: string) {
    this.set("derivativeNFT", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get project(): string {
    let value = this.get("project");
    return value!.toString();
  }

  set project(value: string) {
    this.set("project", Value.fromString(value));
  }

  get publish(): string {
    let value = this.get("publish");
    return value!.toString();
  }

  set publish(value: string) {
    this.set("publish", Value.fromString(value));
  }

  get imageURI(): string | null {
    let value = this.get("imageURI");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set imageURI(value: string | null) {
    if (!value) {
      this.unset("imageURI");
    } else {
      this.set("imageURI", Value.fromString(<string>value));
    }
  }

  get tokenIPFSPath(): string | null {
    let value = this.get("tokenIPFSPath");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tokenIPFSPath(value: string | null) {
    if (!value) {
      this.unset("tokenIPFSPath");
    } else {
      this.set("tokenIPFSPath", Value.fromString(<string>value));
    }
  }

  get creator(): string | null {
    let value = this.get("creator");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set creator(value: string | null) {
    if (!value) {
      this.unset("creator");
    } else {
      this.set("creator", Value.fromString(<string>value));
    }
  }

  get dateMinted(): BigInt {
    let value = this.get("dateMinted");
    return value!.toBigInt();
  }

  set dateMinted(value: BigInt) {
    this.set("dateMinted", Value.fromBigInt(value));
  }

  get mintedTransfer(): string | null {
    let value = this.get("mintedTransfer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set mintedTransfer(value: string | null) {
    if (!value) {
      this.unset("mintedTransfer");
    } else {
      this.set("mintedTransfer", Value.fromString(<string>value));
    }
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get ownedOrListedBy(): string {
    let value = this.get("ownedOrListedBy");
    return value!.toString();
  }

  set ownedOrListedBy(value: string) {
    this.set("ownedOrListedBy", Value.fromString(value));
  }

  get approvedSpender(): string | null {
    let value = this.get("approvedSpender");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set approvedSpender(value: string | null) {
    if (!value) {
      this.unset("approvedSpender");
    } else {
      this.set("approvedSpender", Value.fromString(<string>value));
    }
  }

  get dnftCollections(): Array<string> | null {
    let value = this.get("dnftCollections");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set dnftCollections(value: Array<string> | null) {
    if (!value) {
      this.unset("dnftCollections");
    } else {
      this.set("dnftCollections", Value.fromStringArray(<Array<string>>value));
    }
  }

  get transfers(): Array<string> | null {
    let value = this.get("transfers");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set transfers(value: Array<string> | null) {
    if (!value) {
      this.unset("transfers");
    } else {
      this.set("transfers", Value.fromStringArray(<Array<string>>value));
    }
  }

  get transferValues(): Array<string> | null {
    let value = this.get("transferValues");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set transferValues(value: Array<string> | null) {
    if (!value) {
      this.unset("transferValues");
    } else {
      this.set("transferValues", Value.fromStringArray(<Array<string>>value));
    }
  }

  get bids(): Array<string> {
    let value = this.get("bids");
    return value!.toStringArray();
  }

  set bids(value: Array<string>) {
    this.set("bids", Value.fromStringArray(value));
  }

  get collectedHistories(): Array<string> {
    let value = this.get("collectedHistories");
    return value!.toStringArray();
  }

  set collectedHistories(value: Array<string>) {
    this.set("collectedHistories", Value.fromStringArray(value));
  }

  get netSalesInSBTValue(): BigDecimal {
    let value = this.get("netSalesInSBTValue");
    return value!.toBigDecimal();
  }

  set netSalesInSBTValue(value: BigDecimal) {
    this.set("netSalesInSBTValue", Value.fromBigDecimal(value));
  }

  get netSalesPendingInSBTValue(): BigDecimal {
    let value = this.get("netSalesPendingInSBTValue");
    return value!.toBigDecimal();
  }

  set netSalesPendingInSBTValue(value: BigDecimal) {
    this.set("netSalesPendingInSBTValue", Value.fromBigDecimal(value));
  }

  get netRevenueInSBTValue(): BigDecimal {
    let value = this.get("netRevenueInSBTValue");
    return value!.toBigDecimal();
  }

  set netRevenueInSBTValue(value: BigDecimal) {
    this.set("netRevenueInSBTValue", Value.fromBigDecimal(value));
  }

  get netRevenuePendingInSBTValue(): BigDecimal {
    let value = this.get("netRevenuePendingInSBTValue");
    return value!.toBigDecimal();
  }

  set netRevenuePendingInSBTValue(value: BigDecimal) {
    this.set("netRevenuePendingInSBTValue", Value.fromBigDecimal(value));
  }

  get isFirstSale(): boolean {
    let value = this.get("isFirstSale");
    return value!.toBoolean();
  }

  set isFirstSale(value: boolean) {
    this.set("isFirstSale", Value.fromBoolean(value));
  }

  get auctions(): Array<string> {
    let value = this.get("auctions");
    return value!.toStringArray();
  }

  set auctions(value: Array<string>) {
    this.set("auctions", Value.fromStringArray(value));
  }

  get mostRecentAuction(): string | null {
    let value = this.get("mostRecentAuction");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set mostRecentAuction(value: string | null) {
    if (!value) {
      this.unset("mostRecentAuction");
    } else {
      this.set("mostRecentAuction", Value.fromString(<string>value));
    }
  }

  get mostRecentActiveAuction(): string | null {
    let value = this.get("mostRecentActiveAuction");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set mostRecentActiveAuction(value: string | null) {
    if (!value) {
      this.unset("mostRecentActiveAuction");
    } else {
      this.set("mostRecentActiveAuction", Value.fromString(<string>value));
    }
  }

  get latestFinalizedAuction(): string | null {
    let value = this.get("latestFinalizedAuction");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set latestFinalizedAuction(value: string | null) {
    if (!value) {
      this.unset("latestFinalizedAuction");
    } else {
      this.set("latestFinalizedAuction", Value.fromString(<string>value));
    }
  }

  get dnftHistory(): Array<string> {
    let value = this.get("dnftHistory");
    return value!.toStringArray();
  }

  set dnftHistory(value: Array<string>) {
    this.set("dnftHistory", Value.fromStringArray(value));
  }

  get tokenCreatorPaymentAddress(): Bytes | null {
    let value = this.get("tokenCreatorPaymentAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set tokenCreatorPaymentAddress(value: Bytes | null) {
    if (!value) {
      this.unset("tokenCreatorPaymentAddress");
    } else {
      this.set("tokenCreatorPaymentAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get percentSplit(): string | null {
    let value = this.get("percentSplit");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set percentSplit(value: string | null) {
    if (!value) {
      this.unset("percentSplit");
    } else {
      this.set("percentSplit", Value.fromString(<string>value));
    }
  }

  get lastSalePriceInSBTValue(): BigDecimal | null {
    let value = this.get("lastSalePriceInSBTValue");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set lastSalePriceInSBTValue(value: BigDecimal | null) {
    if (!value) {
      this.unset("lastSalePriceInSBTValue");
    } else {
      this.set(
        "lastSalePriceInSBTValue",
        Value.fromBigDecimal(<BigDecimal>value)
      );
    }
  }

  get nftOffers(): Array<string> {
    let value = this.get("nftOffers");
    return value!.toStringArray();
  }

  set nftOffers(value: Array<string>) {
    this.set("nftOffers", Value.fromStringArray(value));
  }

  get mostRecentOffer(): string | null {
    let value = this.get("mostRecentOffer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set mostRecentOffer(value: string | null) {
    if (!value) {
      this.unset("mostRecentOffer");
    } else {
      this.set("mostRecentOffer", Value.fromString(<string>value));
    }
  }

  get mostRecentBuyNow(): string | null {
    let value = this.get("mostRecentBuyNow");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set mostRecentBuyNow(value: string | null) {
    if (!value) {
      this.unset("mostRecentBuyNow");
    } else {
      this.set("mostRecentBuyNow", Value.fromString(<string>value));
    }
  }

  get nftBuyNows(): Array<string> {
    let value = this.get("nftBuyNows");
    return value!.toStringArray();
  }

  set nftBuyNows(value: Array<string>) {
    this.set("nftBuyNows", Value.fromStringArray(value));
  }
}

export class DnftTransfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DnftTransfer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DnftTransfer must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DnftTransfer", id.toString(), this);
    }
  }

  static load(id: string): DnftTransfer | null {
    return changetype<DnftTransfer | null>(store.get("DnftTransfer", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get dnft(): string {
    let value = this.get("dnft");
    return value!.toString();
  }

  set dnft(value: string) {
    this.set("dnft", Value.fromString(value));
  }

  get from(): string {
    let value = this.get("from");
    return value!.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get to(): string {
    let value = this.get("to");
    return value!.toString();
  }

  set to(value: string) {
    this.set("to", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get dateTransferred(): BigInt {
    let value = this.get("dateTransferred");
    return value!.toBigInt();
  }

  set dateTransferred(value: BigInt) {
    this.set("dateTransferred", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DnftCollectedHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DnftCollectedHistory entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DnftCollectedHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DnftCollectedHistory", id.toString(), this);
    }
  }

  static load(id: string): DnftCollectedHistory | null {
    return changetype<DnftCollectedHistory | null>(
      store.get("DnftCollectedHistory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get project(): string {
    let value = this.get("project");
    return value!.toString();
  }

  set project(value: string) {
    this.set("project", Value.fromString(value));
  }

  get derivativeNFT(): string {
    let value = this.get("derivativeNFT");
    return value!.toString();
  }

  set derivativeNFT(value: string) {
    this.set("derivativeNFT", Value.fromString(value));
  }

  get dnft(): string {
    let value = this.get("dnft");
    return value!.toString();
  }

  set dnft(value: string) {
    this.set("dnft", Value.fromString(value));
  }

  get from(): string {
    let value = this.get("from");
    return value!.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get to(): string {
    let value = this.get("to");
    return value!.toString();
  }

  set to(value: string) {
    this.set("to", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get units(): BigInt {
    let value = this.get("units");
    return value!.toBigInt();
  }

  set units(value: BigInt) {
    this.set("units", Value.fromBigInt(value));
  }

  get newTokenId(): BigInt {
    let value = this.get("newTokenId");
    return value!.toBigInt();
  }

  set newTokenId(value: BigInt) {
    this.set("newTokenId", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class DnftCollection extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DnftCollection entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DnftCollection must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DnftCollection", id.toString(), this);
    }
  }

  static load(id: string): DnftCollection | null {
    return changetype<DnftCollection | null>(store.get("DnftCollection", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get dnft(): string {
    let value = this.get("dnft");
    return value!.toString();
  }

  set dnft(value: string) {
    this.set("dnft", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class DnftTransferValue extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DnftTransferValue entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DnftTransferValue must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DnftTransferValue", id.toString(), this);
    }
  }

  static load(id: string): DnftTransferValue | null {
    return changetype<DnftTransferValue | null>(
      store.get("DnftTransferValue", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get dnft(): string {
    let value = this.get("dnft");
    return value!.toString();
  }

  set dnft(value: string) {
    this.set("dnft", Value.fromString(value));
  }

  get from(): string {
    let value = this.get("from");
    return value!.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get to(): string {
    let value = this.get("to");
    return value!.toString();
  }

  set to(value: string) {
    this.set("to", Value.fromString(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class DnftSlotChanged extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DnftSlotChanged entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DnftSlotChanged must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DnftSlotChanged", id.toString(), this);
    }
  }

  static load(id: string): DnftSlotChanged | null {
    return changetype<DnftSlotChanged | null>(store.get("DnftSlotChanged", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get derivativeNFT(): string {
    let value = this.get("derivativeNFT");
    return value!.toString();
  }

  set derivativeNFT(value: string) {
    this.set("derivativeNFT", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get oldSlot(): BigInt {
    let value = this.get("oldSlot");
    return value!.toBigInt();
  }

  set oldSlot(value: BigInt) {
    this.set("oldSlot", Value.fromBigInt(value));
  }

  get newSlot(): BigInt {
    let value = this.get("newSlot");
    return value!.toBigInt();
  }

  set newSlot(value: BigInt) {
    this.set("newSlot", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class DnftBurn extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DnftBurn entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DnftBurn must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DnftBurn", id.toString(), this);
    }
  }

  static load(id: string): DnftBurn | null {
    return changetype<DnftBurn | null>(store.get("DnftBurn", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get derivativeNFT(): string {
    let value = this.get("derivativeNFT");
    return value!.toString();
  }

  set derivativeNFT(value: string) {
    this.set("derivativeNFT", Value.fromString(value));
  }

  get project(): string {
    let value = this.get("project");
    return value!.toString();
  }

  set project(value: string) {
    this.set("project", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class DnftAccountApproval extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DnftAccountApproval entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DnftAccountApproval must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DnftAccountApproval", id.toString(), this);
    }
  }

  static load(id: string): DnftAccountApproval | null {
    return changetype<DnftAccountApproval | null>(
      store.get("DnftAccountApproval", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get derivativeNFT(): string {
    let value = this.get("derivativeNFT");
    return value!.toString();
  }

  set derivativeNFT(value: string) {
    this.set("derivativeNFT", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get spender(): string {
    let value = this.get("spender");
    return value!.toString();
  }

  set spender(value: string) {
    this.set("spender", Value.fromString(value));
  }
}

export class DnftApprovalValue extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DnftApprovalValue entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DnftApprovalValue must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DnftApprovalValue", id.toString(), this);
    }
  }

  static load(id: string): DnftApprovalValue | null {
    return changetype<DnftApprovalValue | null>(
      store.get("DnftApprovalValue", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get derivativeNFT(): string {
    let value = this.get("derivativeNFT");
    return value!.toString();
  }

  set derivativeNFT(value: string) {
    this.set("derivativeNFT", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get operator(): string {
    let value = this.get("operator");
    return value!.toString();
  }

  set operator(value: string) {
    this.set("operator", Value.fromString(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class DnftImageURI extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DnftImageURI entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DnftImageURI must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DnftImageURI", id.toString(), this);
    }
  }

  static load(id: string): DnftImageURI | null {
    return changetype<DnftImageURI | null>(store.get("DnftImageURI", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get derivativeNFT(): string {
    let value = this.get("derivativeNFT");
    return value!.toString();
  }

  set derivativeNFT(value: string) {
    this.set("derivativeNFT", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get imageURI(): string {
    let value = this.get("imageURI");
    return value!.toString();
  }

  set imageURI(value: string) {
    this.set("imageURI", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}
