// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Profile extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Profile entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Profile must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Profile", id.toString(), this);
    }
  }

  static load(id: string): Profile | null {
    return changetype<Profile | null>(store.get("Profile", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get soulBoundTokenId(): BigInt {
    let value = this.get("soulBoundTokenId");
    return value!.toBigInt();
  }

  set soulBoundTokenId(value: BigInt) {
    this.set("soulBoundTokenId", Value.fromBigInt(value));
  }

  get creator(): Bytes {
    let value = this.get("creator");
    return value!.toBytes();
  }

  set creator(value: Bytes) {
    this.set("creator", Value.fromBytes(value));
  }

  get wallet(): Bytes {
    let value = this.get("wallet");
    return value!.toBytes();
  }

  set wallet(value: Bytes) {
    this.set("wallet", Value.fromBytes(value));
  }

  get nickName(): string {
    let value = this.get("nickName");
    return value!.toString();
  }

  set nickName(value: string) {
    this.set("nickName", Value.fromString(value));
  }

  get imageURI(): string {
    let value = this.get("imageURI");
    return value!.toString();
  }

  set imageURI(value: string) {
    this.set("imageURI", Value.fromString(value));
  }

  get isRemove(): boolean {
    let value = this.get("isRemove");
    return value!.toBoolean();
  }

  set isRemove(value: boolean) {
    this.set("isRemove", Value.fromBoolean(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class SBTTransferHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SBTTransferHistory entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SBTTransferHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SBTTransferHistory", id.toString(), this);
    }
  }

  static load(id: string): SBTTransferHistory | null {
    return changetype<SBTTransferHistory | null>(
      store.get("SBTTransferHistory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value!.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value!.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class SBTAsset extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SBTAsset entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SBTAsset must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SBTAsset", id.toString(), this);
    }
  }

  static load(id: string): SBTAsset | null {
    return changetype<SBTAsset | null>(store.get("SBTAsset", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get wallet(): Bytes {
    let value = this.get("wallet");
    return value!.toBytes();
  }

  set wallet(value: Bytes) {
    this.set("wallet", Value.fromBytes(value));
  }

  get soulBoundTokenId(): BigInt {
    let value = this.get("soulBoundTokenId");
    return value!.toBigInt();
  }

  set soulBoundTokenId(value: BigInt) {
    this.set("soulBoundTokenId", Value.fromBigInt(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class SBTTransferValueHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save SBTTransferValueHistory entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SBTTransferValueHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SBTTransferValueHistory", id.toString(), this);
    }
  }

  static load(id: string): SBTTransferValueHistory | null {
    return changetype<SBTTransferValueHistory | null>(
      store.get("SBTTransferValueHistory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get fromSoulBoundTokenId(): BigInt {
    let value = this.get("fromSoulBoundTokenId");
    return value!.toBigInt();
  }

  set fromSoulBoundTokenId(value: BigInt) {
    this.set("fromSoulBoundTokenId", Value.fromBigInt(value));
  }

  get toSoulBoundTokenId(): BigInt {
    let value = this.get("toSoulBoundTokenId");
    return value!.toBigInt();
  }

  set toSoulBoundTokenId(value: BigInt) {
    this.set("toSoulBoundTokenId", Value.fromBigInt(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class SBTSlotChangedHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save SBTSlotChangedHistory entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SBTSlotChangedHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SBTSlotChangedHistory", id.toString(), this);
    }
  }

  static load(id: string): SBTSlotChangedHistory | null {
    return changetype<SBTSlotChangedHistory | null>(
      store.get("SBTSlotChangedHistory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get soulBoundTokenId(): BigInt {
    let value = this.get("soulBoundTokenId");
    return value!.toBigInt();
  }

  set soulBoundTokenId(value: BigInt) {
    this.set("soulBoundTokenId", Value.fromBigInt(value));
  }

  get oldSlot(): BigInt {
    let value = this.get("oldSlot");
    return value!.toBigInt();
  }

  set oldSlot(value: BigInt) {
    this.set("oldSlot", Value.fromBigInt(value));
  }

  get newSlot(): BigInt {
    let value = this.get("newSlot");
    return value!.toBigInt();
  }

  set newSlot(value: BigInt) {
    this.set("newSlot", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class MintSBTValueHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MintSBTValueHistory entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MintSBTValueHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MintSBTValueHistory", id.toString(), this);
    }
  }

  static load(id: string): MintSBTValueHistory | null {
    return changetype<MintSBTValueHistory | null>(
      store.get("MintSBTValueHistory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get caller(): Bytes {
    let value = this.get("caller");
    return value!.toBytes();
  }

  set caller(value: Bytes) {
    this.set("caller", Value.fromBytes(value));
  }

  get soulBoundTokenId(): BigInt {
    let value = this.get("soulBoundTokenId");
    return value!.toBigInt();
  }

  set soulBoundTokenId(value: BigInt) {
    this.set("soulBoundTokenId", Value.fromBigInt(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class BurnSBTHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BurnSBTHistory entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BurnSBTHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("BurnSBTHistory", id.toString(), this);
    }
  }

  static load(id: string): BurnSBTHistory | null {
    return changetype<BurnSBTHistory | null>(store.get("BurnSBTHistory", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get caller(): Bytes {
    let value = this.get("caller");
    return value!.toBytes();
  }

  set caller(value: Bytes) {
    this.set("caller", Value.fromBytes(value));
  }

  get soulBoundTokenId(): BigInt {
    let value = this.get("soulBoundTokenId");
    return value!.toBigInt();
  }

  set soulBoundTokenId(value: BigInt) {
    this.set("soulBoundTokenId", Value.fromBigInt(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    return value!.toBigInt();
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class ApprovalRecord extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ApprovalRecord entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ApprovalRecord must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ApprovalRecord", id.toString(), this);
    }
  }

  static load(id: string): ApprovalRecord | null {
    return changetype<ApprovalRecord | null>(store.get("ApprovalRecord", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get approved(): Bytes {
    let value = this.get("approved");
    return value!.toBytes();
  }

  set approved(value: Bytes) {
    this.set("approved", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class ApprovalForAllRecord extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ApprovalForAllRecord entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ApprovalForAllRecord must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ApprovalForAllRecord", id.toString(), this);
    }
  }

  static load(id: string): ApprovalForAllRecord | null {
    return changetype<ApprovalForAllRecord | null>(
      store.get("ApprovalForAllRecord", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get operator(): Bytes {
    let value = this.get("operator");
    return value!.toBytes();
  }

  set operator(value: Bytes) {
    this.set("operator", Value.fromBytes(value));
  }

  get approved(): boolean {
    let value = this.get("approved");
    return value!.toBoolean();
  }

  set approved(value: boolean) {
    this.set("approved", Value.fromBoolean(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class ApprovalValueRecord extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ApprovalValueRecord entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ApprovalValueRecord must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ApprovalValueRecord", id.toString(), this);
    }
  }

  static load(id: string): ApprovalValueRecord | null {
    return changetype<ApprovalValueRecord | null>(
      store.get("ApprovalValueRecord", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get operator(): Bytes {
    let value = this.get("operator");
    return value!.toBytes();
  }

  set operator(value: Bytes) {
    this.set("operator", Value.fromBytes(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class DerivativeNFTImageURISetHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save DerivativeNFTImageURISetHistory entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DerivativeNFTImageURISetHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DerivativeNFTImageURISetHistory", id.toString(), this);
    }
  }

  static load(id: string): DerivativeNFTImageURISetHistory | null {
    return changetype<DerivativeNFTImageURISetHistory | null>(
      store.get("DerivativeNFTImageURISetHistory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get soulBoundTokenId(): BigInt {
    let value = this.get("soulBoundTokenId");
    return value!.toBigInt();
  }

  set soulBoundTokenId(value: BigInt) {
    this.set("soulBoundTokenId", Value.fromBigInt(value));
  }

  get imageURI(): string {
    let value = this.get("imageURI");
    return value!.toString();
  }

  set imageURI(value: string) {
    this.set("imageURI", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Hub extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Hub entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Hub must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Hub", id.toString(), this);
    }
  }

  static load(id: string): Hub | null {
    return changetype<Hub | null>(store.get("Hub", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get soulBoundTokenId(): BigInt {
    let value = this.get("soulBoundTokenId");
    return value!.toBigInt();
  }

  set soulBoundTokenId(value: BigInt) {
    this.set("soulBoundTokenId", Value.fromBigInt(value));
  }

  get creator(): Bytes {
    let value = this.get("creator");
    return value!.toBytes();
  }

  set creator(value: Bytes) {
    this.set("creator", Value.fromBytes(value));
  }

  get hubId(): BigInt {
    let value = this.get("hubId");
    return value!.toBigInt();
  }

  set hubId(value: BigInt) {
    this.set("hubId", Value.fromBigInt(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get description(): string {
    let value = this.get("description");
    return value!.toString();
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get imageURI(): string {
    let value = this.get("imageURI");
    return value!.toString();
  }

  set imageURI(value: string) {
    this.set("imageURI", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Publication extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Publication entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Publication must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Publication", id.toString(), this);
    }
  }

  static load(id: string): Publication | null {
    return changetype<Publication | null>(store.get("Publication", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get soulBoundTokenId(): BigInt {
    let value = this.get("soulBoundTokenId");
    return value!.toBigInt();
  }

  set soulBoundTokenId(value: BigInt) {
    this.set("soulBoundTokenId", Value.fromBigInt(value));
  }

  get hubId(): BigInt {
    let value = this.get("hubId");
    return value!.toBigInt();
  }

  set hubId(value: BigInt) {
    this.set("hubId", Value.fromBigInt(value));
  }

  get projectId(): BigInt {
    let value = this.get("projectId");
    return value!.toBigInt();
  }

  set projectId(value: BigInt) {
    this.set("projectId", Value.fromBigInt(value));
  }

  get salePrice(): BigInt {
    let value = this.get("salePrice");
    return value!.toBigInt();
  }

  set salePrice(value: BigInt) {
    this.set("salePrice", Value.fromBigInt(value));
  }

  get royaltyBasisPoints(): BigInt {
    let value = this.get("royaltyBasisPoints");
    return value!.toBigInt();
  }

  set royaltyBasisPoints(value: BigInt) {
    this.set("royaltyBasisPoints", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get description(): string {
    let value = this.get("description");
    return value!.toString();
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get materialURIs(): Array<string> {
    let value = this.get("materialURIs");
    return value!.toStringArray();
  }

  set materialURIs(value: Array<string>) {
    this.set("materialURIs", Value.fromStringArray(value));
  }

  get fromTokenIds(): Array<BigInt> {
    let value = this.get("fromTokenIds");
    return value!.toBigIntArray();
  }

  set fromTokenIds(value: Array<BigInt>) {
    this.set("fromTokenIds", Value.fromBigIntArray(value));
  }

  get collectModule(): Bytes {
    let value = this.get("collectModule");
    return value!.toBytes();
  }

  set collectModule(value: Bytes) {
    this.set("collectModule", Value.fromBytes(value));
  }

  get collectModuleInitData(): Bytes {
    let value = this.get("collectModuleInitData");
    return value!.toBytes();
  }

  set collectModuleInitData(value: Bytes) {
    this.set("collectModuleInitData", Value.fromBytes(value));
  }

  get publishModule(): Bytes {
    let value = this.get("publishModule");
    return value!.toBytes();
  }

  set publishModule(value: Bytes) {
    this.set("publishModule", Value.fromBytes(value));
  }

  get publishModuleInitData(): Bytes {
    let value = this.get("publishModuleInitData");
    return value!.toBytes();
  }

  set publishModuleInitData(value: Bytes) {
    this.set("publishModuleInitData", Value.fromBytes(value));
  }

  get publishId(): BigInt {
    let value = this.get("publishId");
    return value!.toBigInt();
  }

  set publishId(value: BigInt) {
    this.set("publishId", Value.fromBigInt(value));
  }

  get previousPublishId(): BigInt {
    let value = this.get("previousPublishId");
    return value!.toBigInt();
  }

  set previousPublishId(value: BigInt) {
    this.set("previousPublishId", Value.fromBigInt(value));
  }

  get publishTaxAmount(): BigInt {
    let value = this.get("publishTaxAmount");
    return value!.toBigInt();
  }

  set publishTaxAmount(value: BigInt) {
    this.set("publishTaxAmount", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Project extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Project entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Project must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Project", id.toString(), this);
    }
  }

  static load(id: string): Project | null {
    return changetype<Project | null>(store.get("Project", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get projectId(): BigInt {
    let value = this.get("projectId");
    return value!.toBigInt();
  }

  set projectId(value: BigInt) {
    this.set("projectId", Value.fromBigInt(value));
  }

  get soulBoundTokenId(): BigInt {
    let value = this.get("soulBoundTokenId");
    return value!.toBigInt();
  }

  set soulBoundTokenId(value: BigInt) {
    this.set("soulBoundTokenId", Value.fromBigInt(value));
  }

  get derivativeNFT(): Bytes {
    let value = this.get("derivativeNFT");
    return value!.toBytes();
  }

  set derivativeNFT(value: Bytes) {
    this.set("derivativeNFT", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class PublishRecord extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PublishRecord entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PublishRecord must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PublishRecord", id.toString(), this);
    }
  }

  static load(id: string): PublishRecord | null {
    return changetype<PublishRecord | null>(store.get("PublishRecord", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get publishId(): BigInt {
    let value = this.get("publishId");
    return value!.toBigInt();
  }

  set publishId(value: BigInt) {
    this.set("publishId", Value.fromBigInt(value));
  }

  get soulBoundTokenId(): BigInt {
    let value = this.get("soulBoundTokenId");
    return value!.toBigInt();
  }

  set soulBoundTokenId(value: BigInt) {
    this.set("soulBoundTokenId", Value.fromBigInt(value));
  }

  get hubId(): BigInt {
    let value = this.get("hubId");
    return value!.toBigInt();
  }

  set hubId(value: BigInt) {
    this.set("hubId", Value.fromBigInt(value));
  }

  get projectId(): BigInt {
    let value = this.get("projectId");
    return value!.toBigInt();
  }

  set projectId(value: BigInt) {
    this.set("projectId", Value.fromBigInt(value));
  }

  get newTokenId(): BigInt {
    let value = this.get("newTokenId");
    return value!.toBigInt();
  }

  set newTokenId(value: BigInt) {
    this.set("newTokenId", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get collectModuleInitData(): Bytes {
    let value = this.get("collectModuleInitData");
    return value!.toBytes();
  }

  set collectModuleInitData(value: Bytes) {
    this.set("collectModuleInitData", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class DerivativeNFTCollectedHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save DerivativeNFTCollectedHistory entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DerivativeNFTCollectedHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DerivativeNFTCollectedHistory", id.toString(), this);
    }
  }

  static load(id: string): DerivativeNFTCollectedHistory | null {
    return changetype<DerivativeNFTCollectedHistory | null>(
      store.get("DerivativeNFTCollectedHistory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get projectId(): BigInt {
    let value = this.get("projectId");
    return value!.toBigInt();
  }

  set projectId(value: BigInt) {
    this.set("projectId", Value.fromBigInt(value));
  }

  get derivativeNFT(): Bytes {
    let value = this.get("derivativeNFT");
    return value!.toBytes();
  }

  set derivativeNFT(value: Bytes) {
    this.set("derivativeNFT", Value.fromBytes(value));
  }

  get fromSoulBoundTokenId(): BigInt {
    let value = this.get("fromSoulBoundTokenId");
    return value!.toBigInt();
  }

  set fromSoulBoundTokenId(value: BigInt) {
    this.set("fromSoulBoundTokenId", Value.fromBigInt(value));
  }

  get toSoulBoundTokenId(): BigInt {
    let value = this.get("toSoulBoundTokenId");
    return value!.toBigInt();
  }

  set toSoulBoundTokenId(value: BigInt) {
    this.set("toSoulBoundTokenId", Value.fromBigInt(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get newTokenId(): BigInt {
    let value = this.get("newTokenId");
    return value!.toBigInt();
  }

  set newTokenId(value: BigInt) {
    this.set("newTokenId", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class WithdrawERC3525History extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save WithdrawERC3525History entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type WithdrawERC3525History must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("WithdrawERC3525History", id.toString(), this);
    }
  }

  static load(id: string): WithdrawERC3525History | null {
    return changetype<WithdrawERC3525History | null>(
      store.get("WithdrawERC3525History", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get fromTokenId(): BigInt {
    let value = this.get("fromTokenId");
    return value!.toBigInt();
  }

  set fromTokenId(value: BigInt) {
    this.set("fromTokenId", Value.fromBigInt(value));
  }

  get toTokenId(): BigInt {
    let value = this.get("toTokenId");
    return value!.toBigInt();
  }

  set toTokenId(value: BigInt) {
    this.set("toTokenId", Value.fromBigInt(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transaction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Transaction must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Transaction", id.toString(), this);
    }
  }

  static load(id: string): Transaction | null {
    return changetype<Transaction | null>(store.get("Transaction", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get txIndex(): BigInt {
    let value = this.get("txIndex");
    return value!.toBigInt();
  }

  set txIndex(value: BigInt) {
    this.set("txIndex", Value.fromBigInt(value));
  }

  get to(): Bytes | null {
    let value = this.get("to");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set to(value: Bytes | null) {
    if (!value) {
      this.unset("to");
    } else {
      this.set("to", Value.fromBytes(<Bytes>value));
    }
  }

  get value(): BigInt | null {
    let value = this.get("value");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set value(value: BigInt | null) {
    if (!value) {
      this.unset("value");
    } else {
      this.set("value", Value.fromBigInt(<BigInt>value));
    }
  }

  get data(): Bytes | null {
    let value = this.get("data");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set data(value: Bytes | null) {
    if (!value) {
      this.unset("data");
    } else {
      this.set("data", Value.fromBytes(<Bytes>value));
    }
  }

  get isConfirmed(): boolean {
    let value = this.get("isConfirmed");
    return value!.toBoolean();
  }

  set isConfirmed(value: boolean) {
    this.set("isConfirmed", Value.fromBoolean(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class ExecuteTransactionHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ExecuteTransactionHistory entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ExecuteTransactionHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ExecuteTransactionHistory", id.toString(), this);
    }
  }

  static load(id: string): ExecuteTransactionHistory | null {
    return changetype<ExecuteTransactionHistory | null>(
      store.get("ExecuteTransactionHistory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get txIndex(): BigInt {
    let value = this.get("txIndex");
    return value!.toBigInt();
  }

  set txIndex(value: BigInt) {
    this.set("txIndex", Value.fromBigInt(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value!.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class ExchangeVoucherHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ExchangeVoucherHistory entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ExchangeVoucherHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ExchangeVoucherHistory", id.toString(), this);
    }
  }

  static load(id: string): ExchangeVoucherHistory | null {
    return changetype<ExchangeVoucherHistory | null>(
      store.get("ExchangeVoucherHistory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get soulBoundTokenId(): BigInt {
    let value = this.get("soulBoundTokenId");
    return value!.toBigInt();
  }

  set soulBoundTokenId(value: BigInt) {
    this.set("soulBoundTokenId", Value.fromBigInt(value));
  }

  get operator(): Bytes {
    let value = this.get("operator");
    return value!.toBytes();
  }

  set operator(value: Bytes) {
    this.set("operator", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get sbtValue(): BigInt {
    let value = this.get("sbtValue");
    return value!.toBigInt();
  }

  set sbtValue(value: BigInt) {
    this.set("sbtValue", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class ExecuteTransactionERC3525History extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ExecuteTransactionERC3525History entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ExecuteTransactionERC3525History must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ExecuteTransactionERC3525History", id.toString(), this);
    }
  }

  static load(id: string): ExecuteTransactionERC3525History | null {
    return changetype<ExecuteTransactionERC3525History | null>(
      store.get("ExecuteTransactionERC3525History", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get txIndex(): BigInt {
    let value = this.get("txIndex");
    return value!.toBigInt();
  }

  set txIndex(value: BigInt) {
    this.set("txIndex", Value.fromBigInt(value));
  }

  get fromTokenId(): BigInt {
    let value = this.get("fromTokenId");
    return value!.toBigInt();
  }

  set fromTokenId(value: BigInt) {
    this.set("fromTokenId", Value.fromBigInt(value));
  }

  get toTokenId(): BigInt {
    let value = this.get("toTokenId");
    return value!.toBigInt();
  }

  set toTokenId(value: BigInt) {
    this.set("toTokenId", Value.fromBigInt(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class NFTVoucherHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NFTVoucherHistory entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NFTVoucherHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("NFTVoucherHistory", id.toString(), this);
    }
  }

  static load(id: string): NFTVoucherHistory | null {
    return changetype<NFTVoucherHistory | null>(
      store.get("NFTVoucherHistory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get soulBoundTokenId(): BigInt {
    let value = this.get("soulBoundTokenId");
    return value!.toBigInt();
  }

  set soulBoundTokenId(value: BigInt) {
    this.set("soulBoundTokenId", Value.fromBigInt(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    return value!.toBytes();
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get vouchType(): i32 {
    let value = this.get("vouchType");
    return value!.toI32();
  }

  set vouchType(value: i32) {
    this.set("vouchType", Value.fromI32(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get sbtValue(): BigInt {
    let value = this.get("sbtValue");
    return value!.toBigInt();
  }

  set sbtValue(value: BigInt) {
    this.set("sbtValue", Value.fromBigInt(value));
  }

  get generateTimestamp(): BigInt {
    let value = this.get("generateTimestamp");
    return value!.toBigInt();
  }

  set generateTimestamp(value: BigInt) {
    this.set("generateTimestamp", Value.fromBigInt(value));
  }
}

export class VoucherAsset extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save VoucherAsset entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type VoucherAsset must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("VoucherAsset", id.toString(), this);
    }
  }

  static load(id: string): VoucherAsset | null {
    return changetype<VoucherAsset | null>(store.get("VoucherAsset", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get wallet(): Bytes {
    let value = this.get("wallet");
    return value!.toBytes();
  }

  set wallet(value: Bytes) {
    this.set("wallet", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class VoucherRecord extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save VoucherRecord entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type VoucherRecord must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("VoucherRecord", id.toString(), this);
    }
  }

  static load(id: string): VoucherRecord | null {
    return changetype<VoucherRecord | null>(store.get("VoucherRecord", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get vouchType(): i32 {
    let value = this.get("vouchType");
    return value!.toI32();
  }

  set vouchType(value: i32) {
    this.set("vouchType", Value.fromI32(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get etherValue(): BigInt {
    let value = this.get("etherValue");
    return value!.toBigInt();
  }

  set etherValue(value: BigInt) {
    this.set("etherValue", Value.fromBigInt(value));
  }

  get sbtValue(): BigInt {
    let value = this.get("sbtValue");
    return value!.toBigInt();
  }

  set sbtValue(value: BigInt) {
    this.set("sbtValue", Value.fromBigInt(value));
  }

  get generateTimestamp(): BigInt {
    let value = this.get("generateTimestamp");
    return value!.toBigInt();
  }

  set generateTimestamp(value: BigInt) {
    this.set("generateTimestamp", Value.fromBigInt(value));
  }

  get endTimestamp(): BigInt {
    let value = this.get("endTimestamp");
    return value!.toBigInt();
  }

  set endTimestamp(value: BigInt) {
    this.set("endTimestamp", Value.fromBigInt(value));
  }
}

export class ProfileCreatorWhitelistedRecord extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ProfileCreatorWhitelistedRecord entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ProfileCreatorWhitelistedRecord must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ProfileCreatorWhitelistedRecord", id.toString(), this);
    }
  }

  static load(id: string): ProfileCreatorWhitelistedRecord | null {
    return changetype<ProfileCreatorWhitelistedRecord | null>(
      store.get("ProfileCreatorWhitelistedRecord", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get profileCreator(): Bytes {
    let value = this.get("profileCreator");
    return value!.toBytes();
  }

  set profileCreator(value: Bytes) {
    this.set("profileCreator", Value.fromBytes(value));
  }

  get whitelisted(): boolean {
    let value = this.get("whitelisted");
    return value!.toBoolean();
  }

  set whitelisted(value: boolean) {
    this.set("whitelisted", Value.fromBoolean(value));
  }

  get caller(): Bytes {
    let value = this.get("caller");
    return value!.toBytes();
  }

  set caller(value: Bytes) {
    this.set("caller", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class FeesForCollectHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save FeesForCollectHistory entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type FeesForCollectHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("FeesForCollectHistory", id.toString(), this);
    }
  }

  static load(id: string): FeesForCollectHistory | null {
    return changetype<FeesForCollectHistory | null>(
      store.get("FeesForCollectHistory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ownershipSoulBoundTokenId(): BigInt {
    let value = this.get("ownershipSoulBoundTokenId");
    return value!.toBigInt();
  }

  set ownershipSoulBoundTokenId(value: BigInt) {
    this.set("ownershipSoulBoundTokenId", Value.fromBigInt(value));
  }

  get collectorSoulBoundTokenId(): BigInt {
    let value = this.get("collectorSoulBoundTokenId");
    return value!.toBigInt();
  }

  set collectorSoulBoundTokenId(value: BigInt) {
    this.set("collectorSoulBoundTokenId", Value.fromBigInt(value));
  }

  get genesisSoulBoundTokenId(): BigInt {
    let value = this.get("genesisSoulBoundTokenId");
    return value!.toBigInt();
  }

  set genesisSoulBoundTokenId(value: BigInt) {
    this.set("genesisSoulBoundTokenId", Value.fromBigInt(value));
  }

  get previousSoulBoundTokenId(): BigInt {
    let value = this.get("previousSoulBoundTokenId");
    return value!.toBigInt();
  }

  set previousSoulBoundTokenId(value: BigInt) {
    this.set("previousSoulBoundTokenId", Value.fromBigInt(value));
  }

  get publishId(): BigInt {
    let value = this.get("publishId");
    return value!.toBigInt();
  }

  set publishId(value: BigInt) {
    this.set("publishId", Value.fromBigInt(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get collectUnits(): BigInt {
    let value = this.get("collectUnits");
    return value!.toBigInt();
  }

  set collectUnits(value: BigInt) {
    this.set("collectUnits", Value.fromBigInt(value));
  }

  get treasuryAmount(): BigInt {
    let value = this.get("treasuryAmount");
    return value!.toBigInt();
  }

  set treasuryAmount(value: BigInt) {
    this.set("treasuryAmount", Value.fromBigInt(value));
  }

  get genesisAmount(): BigInt {
    let value = this.get("genesisAmount");
    return value!.toBigInt();
  }

  set genesisAmount(value: BigInt) {
    this.set("genesisAmount", Value.fromBigInt(value));
  }

  get previousAmount(): BigInt {
    let value = this.get("previousAmount");
    return value!.toBigInt();
  }

  set previousAmount(value: BigInt) {
    this.set("previousAmount", Value.fromBigInt(value));
  }

  get adjustedAmount(): BigInt {
    let value = this.get("adjustedAmount");
    return value!.toBigInt();
  }

  set adjustedAmount(value: BigInt) {
    this.set("adjustedAmount", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class DerivativeNFTAirdropedHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save DerivativeNFTAirdropedHistory entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DerivativeNFTAirdropedHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DerivativeNFTAirdropedHistory", id.toString(), this);
    }
  }

  static load(id: string): DerivativeNFTAirdropedHistory | null {
    return changetype<DerivativeNFTAirdropedHistory | null>(
      store.get("DerivativeNFTAirdropedHistory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get projectId(): BigInt {
    let value = this.get("projectId");
    return value!.toBigInt();
  }

  set projectId(value: BigInt) {
    this.set("projectId", Value.fromBigInt(value));
  }

  get derivativeNFT(): Bytes {
    let value = this.get("derivativeNFT");
    return value!.toBytes();
  }

  set derivativeNFT(value: Bytes) {
    this.set("derivativeNFT", Value.fromBytes(value));
  }

  get fromSoulBoundTokenId(): BigInt {
    let value = this.get("fromSoulBoundTokenId");
    return value!.toBigInt();
  }

  set fromSoulBoundTokenId(value: BigInt) {
    this.set("fromSoulBoundTokenId", Value.fromBigInt(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get toSoulBoundTokenIds(): Array<BigInt> {
    let value = this.get("toSoulBoundTokenIds");
    return value!.toBigIntArray();
  }

  set toSoulBoundTokenIds(value: Array<BigInt>) {
    this.set("toSoulBoundTokenIds", Value.fromBigIntArray(value));
  }

  get values(): Array<BigInt> {
    let value = this.get("values");
    return value!.toBigIntArray();
  }

  set values(value: Array<BigInt>) {
    this.set("values", Value.fromBigIntArray(value));
  }

  get newTokenIds(): Array<BigInt> {
    let value = this.get("newTokenIds");
    return value!.toBigIntArray();
  }

  set newTokenIds(value: Array<BigInt>) {
    this.set("newTokenIds", Value.fromBigIntArray(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class ReceiverReceivedHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ReceiverReceivedHistory entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ReceiverReceivedHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ReceiverReceivedHistory", id.toString(), this);
    }
  }

  static load(id: string): ReceiverReceivedHistory | null {
    return changetype<ReceiverReceivedHistory | null>(
      store.get("ReceiverReceivedHistory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get operator(): Bytes {
    let value = this.get("operator");
    return value!.toBytes();
  }

  set operator(value: Bytes) {
    this.set("operator", Value.fromBytes(value));
  }

  get fromTokenId(): BigInt {
    let value = this.get("fromTokenId");
    return value!.toBigInt();
  }

  set fromTokenId(value: BigInt) {
    this.set("fromTokenId", Value.fromBigInt(value));
  }

  get toTokenId(): BigInt {
    let value = this.get("toTokenId");
    return value!.toBigInt();
  }

  set toTokenId(value: BigInt) {
    this.set("toTokenId", Value.fromBigInt(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get data(): Bytes | null {
    let value = this.get("data");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set data(value: Bytes | null) {
    if (!value) {
      this.unset("data");
    } else {
      this.set("data", Value.fromBytes(<Bytes>value));
    }
  }

  get gas(): BigInt {
    let value = this.get("gas");
    return value!.toBigInt();
  }

  set gas(value: BigInt) {
    this.set("gas", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Dispatcher extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Dispatcher entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Dispatcher must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Dispatcher", id.toString(), this);
    }
  }

  static load(id: string): Dispatcher | null {
    return changetype<Dispatcher | null>(store.get("Dispatcher", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get soulBoundTokenId(): BigInt {
    let value = this.get("soulBoundTokenId");
    return value!.toBigInt();
  }

  set soulBoundTokenId(value: BigInt) {
    this.set("soulBoundTokenId", Value.fromBigInt(value));
  }

  get dispatcher(): Bytes {
    let value = this.get("dispatcher");
    return value!.toBytes();
  }

  set dispatcher(value: Bytes) {
    this.set("dispatcher", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class StateSetHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save StateSetHistory entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type StateSetHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("StateSetHistory", id.toString(), this);
    }
  }

  static load(id: string): StateSetHistory | null {
    return changetype<StateSetHistory | null>(store.get("StateSetHistory", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get caller(): Bytes {
    let value = this.get("caller");
    return value!.toBytes();
  }

  set caller(value: Bytes) {
    this.set("caller", Value.fromBytes(value));
  }

  get prevState(): i32 {
    let value = this.get("prevState");
    return value!.toI32();
  }

  set prevState(value: i32) {
    this.set("prevState", Value.fromI32(value));
  }

  get newState(): i32 {
    let value = this.get("newState");
    return value!.toI32();
  }

  set newState(value: i32) {
    this.set("newState", Value.fromI32(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class ERC3525ReceivedHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ERC3525ReceivedHistory entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ERC3525ReceivedHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ERC3525ReceivedHistory", id.toString(), this);
    }
  }

  static load(id: string): ERC3525ReceivedHistory | null {
    return changetype<ERC3525ReceivedHistory | null>(
      store.get("ERC3525ReceivedHistory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get operator(): Bytes {
    let value = this.get("operator");
    return value!.toBytes();
  }

  set operator(value: Bytes) {
    this.set("operator", Value.fromBytes(value));
  }

  get fromTokenId(): BigInt {
    let value = this.get("fromTokenId");
    return value!.toBigInt();
  }

  set fromTokenId(value: BigInt) {
    this.set("fromTokenId", Value.fromBigInt(value));
  }

  get toTokenId(): BigInt {
    let value = this.get("toTokenId");
    return value!.toBigInt();
  }

  set toTokenId(value: BigInt) {
    this.set("toTokenId", Value.fromBigInt(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get data(): Bytes {
    let value = this.get("data");
    return value!.toBytes();
  }

  set data(value: Bytes) {
    this.set("data", Value.fromBytes(value));
  }

  get gas(): BigInt {
    let value = this.get("gas");
    return value!.toBigInt();
  }

  set gas(value: BigInt) {
    this.set("gas", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class EmergencyAdminSetHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save EmergencyAdminSetHistory entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type EmergencyAdminSetHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("EmergencyAdminSetHistory", id.toString(), this);
    }
  }

  static load(id: string): EmergencyAdminSetHistory | null {
    return changetype<EmergencyAdminSetHistory | null>(
      store.get("EmergencyAdminSetHistory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get caller(): Bytes {
    let value = this.get("caller");
    return value!.toBytes();
  }

  set caller(value: Bytes) {
    this.set("caller", Value.fromBytes(value));
  }

  get oldEmergencyAdmin(): Bytes {
    let value = this.get("oldEmergencyAdmin");
    return value!.toBytes();
  }

  set oldEmergencyAdmin(value: Bytes) {
    this.set("oldEmergencyAdmin", Value.fromBytes(value));
  }

  get newEmergencyAdmin(): Bytes {
    let value = this.get("newEmergencyAdmin");
    return value!.toBytes();
  }

  set newEmergencyAdmin(value: Bytes) {
    this.set("newEmergencyAdmin", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class ManagerGovernanceSetHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ManagerGovernanceSetHistory entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ManagerGovernanceSetHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ManagerGovernanceSetHistory", id.toString(), this);
    }
  }

  static load(id: string): ManagerGovernanceSetHistory | null {
    return changetype<ManagerGovernanceSetHistory | null>(
      store.get("ManagerGovernanceSetHistory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get caller(): Bytes {
    let value = this.get("caller");
    return value!.toBytes();
  }

  set caller(value: Bytes) {
    this.set("caller", Value.fromBytes(value));
  }

  get prevGovernance(): Bytes {
    let value = this.get("prevGovernance");
    return value!.toBytes();
  }

  set prevGovernance(value: Bytes) {
    this.set("prevGovernance", Value.fromBytes(value));
  }

  get newGovernance(): Bytes {
    let value = this.get("newGovernance");
    return value!.toBytes();
  }

  set newGovernance(value: Bytes) {
    this.set("newGovernance", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class HubCreatorWhitelistedRecord extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save HubCreatorWhitelistedRecord entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type HubCreatorWhitelistedRecord must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("HubCreatorWhitelistedRecord", id.toString(), this);
    }
  }

  static load(id: string): HubCreatorWhitelistedRecord | null {
    return changetype<HubCreatorWhitelistedRecord | null>(
      store.get("HubCreatorWhitelistedRecord", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get soulBoundTokenId(): BigInt {
    let value = this.get("soulBoundTokenId");
    return value!.toBigInt();
  }

  set soulBoundTokenId(value: BigInt) {
    this.set("soulBoundTokenId", Value.fromBigInt(value));
  }

  get whitelisted(): boolean {
    let value = this.get("whitelisted");
    return value!.toBoolean();
  }

  set whitelisted(value: boolean) {
    this.set("whitelisted", Value.fromBoolean(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class ModuleGlobalsTreasurySetHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ModuleGlobalsTreasurySetHistory entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ModuleGlobalsTreasurySetHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ModuleGlobalsTreasurySetHistory", id.toString(), this);
    }
  }

  static load(id: string): ModuleGlobalsTreasurySetHistory | null {
    return changetype<ModuleGlobalsTreasurySetHistory | null>(
      store.get("ModuleGlobalsTreasurySetHistory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get prevTreasury(): Bytes {
    let value = this.get("prevTreasury");
    return value!.toBytes();
  }

  set prevTreasury(value: Bytes) {
    this.set("prevTreasury", Value.fromBytes(value));
  }

  get newTreasury(): Bytes {
    let value = this.get("newTreasury");
    return value!.toBytes();
  }

  set newTreasury(value: Bytes) {
    this.set("newTreasury", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class ModuleGlobalsVoucherSetHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ModuleGlobalsVoucherSetHistory entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ModuleGlobalsVoucherSetHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ModuleGlobalsVoucherSetHistory", id.toString(), this);
    }
  }

  static load(id: string): ModuleGlobalsVoucherSetHistory | null {
    return changetype<ModuleGlobalsVoucherSetHistory | null>(
      store.get("ModuleGlobalsVoucherSetHistory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get prevVoucher(): Bytes {
    let value = this.get("prevVoucher");
    return value!.toBytes();
  }

  set prevVoucher(value: Bytes) {
    this.set("prevVoucher", Value.fromBytes(value));
  }

  get newVoucher(): Bytes {
    let value = this.get("newVoucher");
    return value!.toBytes();
  }

  set newVoucher(value: Bytes) {
    this.set("newVoucher", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class UserAmountLimitSetHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save UserAmountLimitSetHistory entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UserAmountLimitSetHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UserAmountLimitSetHistory", id.toString(), this);
    }
  }

  static load(id: string): UserAmountLimitSetHistory | null {
    return changetype<UserAmountLimitSetHistory | null>(
      store.get("UserAmountLimitSetHistory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get preUserAmountLimit(): BigInt {
    let value = this.get("preUserAmountLimit");
    return value!.toBigInt();
  }

  set preUserAmountLimit(value: BigInt) {
    this.set("preUserAmountLimit", Value.fromBigInt(value));
  }

  get userAmountLimit(): BigInt {
    let value = this.get("userAmountLimit");
    return value!.toBigInt();
  }

  set userAmountLimit(value: BigInt) {
    this.set("userAmountLimit", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class ModuleGlobalsManagerSetHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ModuleGlobalsManagerSetHistory entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ModuleGlobalsManagerSetHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ModuleGlobalsManagerSetHistory", id.toString(), this);
    }
  }

  static load(id: string): ModuleGlobalsManagerSetHistory | null {
    return changetype<ModuleGlobalsManagerSetHistory | null>(
      store.get("ModuleGlobalsManagerSetHistory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get prevManager(): Bytes {
    let value = this.get("prevManager");
    return value!.toBytes();
  }

  set prevManager(value: Bytes) {
    this.set("prevManager", Value.fromBytes(value));
  }

  get newManager(): Bytes {
    let value = this.get("newManager");
    return value!.toBytes();
  }

  set newManager(value: Bytes) {
    this.set("newManager", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class ModuleGlobalsSBTSetHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ModuleGlobalsSBTSetHistory entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ModuleGlobalsSBTSetHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ModuleGlobalsSBTSetHistory", id.toString(), this);
    }
  }

  static load(id: string): ModuleGlobalsSBTSetHistory | null {
    return changetype<ModuleGlobalsSBTSetHistory | null>(
      store.get("ModuleGlobalsSBTSetHistory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get prevSBT(): Bytes {
    let value = this.get("prevSBT");
    return value!.toBytes();
  }

  set prevSBT(value: Bytes) {
    this.set("prevSBT", Value.fromBytes(value));
  }

  get newSBT(): Bytes {
    let value = this.get("newSBT");
    return value!.toBytes();
  }

  set newSBT(value: Bytes) {
    this.set("newSBT", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class ModuleGlobalsGovernanceSetHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ModuleGlobalsGovernanceSetHistory entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ModuleGlobalsGovernanceSetHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ModuleGlobalsGovernanceSetHistory", id.toString(), this);
    }
  }

  static load(id: string): ModuleGlobalsGovernanceSetHistory | null {
    return changetype<ModuleGlobalsGovernanceSetHistory | null>(
      store.get("ModuleGlobalsGovernanceSetHistory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get prevGovernance(): Bytes {
    let value = this.get("prevGovernance");
    return value!.toBytes();
  }

  set prevGovernance(value: Bytes) {
    this.set("prevGovernance", Value.fromBytes(value));
  }

  get newGovernance(): Bytes {
    let value = this.get("newGovernance");
    return value!.toBytes();
  }

  set newGovernance(value: Bytes) {
    this.set("newGovernance", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class PublishRoyalty extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PublishRoyalty entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PublishRoyalty must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PublishRoyalty", id.toString(), this);
    }
  }

  static load(id: string): PublishRoyalty | null {
    return changetype<PublishRoyalty | null>(store.get("PublishRoyalty", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get publishRoyalty(): BigInt {
    let value = this.get("publishRoyalty");
    return value!.toBigInt();
  }

  set publishRoyalty(value: BigInt) {
    this.set("publishRoyalty", Value.fromBigInt(value));
  }
}

export class TreasuryFeeRecord extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TreasuryFeeRecord entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TreasuryFeeRecord must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TreasuryFeeRecord", id.toString(), this);
    }
  }

  static load(id: string): TreasuryFeeRecord | null {
    return changetype<TreasuryFeeRecord | null>(
      store.get("TreasuryFeeRecord", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get prevTreasuryFee(): i32 {
    let value = this.get("prevTreasuryFee");
    return value!.toI32();
  }

  set prevTreasuryFee(value: i32) {
    this.set("prevTreasuryFee", Value.fromI32(value));
  }

  get newTreasuryFee(): i32 {
    let value = this.get("newTreasuryFee");
    return value!.toI32();
  }

  set newTreasuryFee(value: i32) {
    this.set("newTreasuryFee", Value.fromI32(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class PublishRoyaltyRecord extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PublishRoyaltyRecord entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PublishRoyaltyRecord must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PublishRoyaltyRecord", id.toString(), this);
    }
  }

  static load(id: string): PublishRoyaltyRecord | null {
    return changetype<PublishRoyaltyRecord | null>(
      store.get("PublishRoyaltyRecord", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get prevPublishRoyalty(): BigInt {
    let value = this.get("prevPublishRoyalty");
    return value!.toBigInt();
  }

  set prevPublishRoyalty(value: BigInt) {
    this.set("prevPublishRoyalty", Value.fromBigInt(value));
  }

  get newPublishRoyalty(): BigInt {
    let value = this.get("newPublishRoyalty");
    return value!.toBigInt();
  }

  set newPublishRoyalty(value: BigInt) {
    this.set("newPublishRoyalty", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class CollectModuleWhitelistedRecord extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CollectModuleWhitelistedRecord entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CollectModuleWhitelistedRecord must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CollectModuleWhitelistedRecord", id.toString(), this);
    }
  }

  static load(id: string): CollectModuleWhitelistedRecord | null {
    return changetype<CollectModuleWhitelistedRecord | null>(
      store.get("CollectModuleWhitelistedRecord", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get collectModule(): Bytes {
    let value = this.get("collectModule");
    return value!.toBytes();
  }

  set collectModule(value: Bytes) {
    this.set("collectModule", Value.fromBytes(value));
  }

  get whitelisted(): boolean {
    let value = this.get("whitelisted");
    return value!.toBoolean();
  }

  set whitelisted(value: boolean) {
    this.set("whitelisted", Value.fromBoolean(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class PublishModuleWhitelistedRecord extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save PublishModuleWhitelistedRecord entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PublishModuleWhitelistedRecord must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PublishModuleWhitelistedRecord", id.toString(), this);
    }
  }

  static load(id: string): PublishModuleWhitelistedRecord | null {
    return changetype<PublishModuleWhitelistedRecord | null>(
      store.get("PublishModuleWhitelistedRecord", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get publishModule(): Bytes {
    let value = this.get("publishModule");
    return value!.toBytes();
  }

  set publishModule(value: Bytes) {
    this.set("publishModule", Value.fromBytes(value));
  }

  get whitelisted(): boolean {
    let value = this.get("whitelisted");
    return value!.toBoolean();
  }

  set whitelisted(value: boolean) {
    this.set("whitelisted", Value.fromBoolean(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class TemplateWhitelistedRecord extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save TemplateWhitelistedRecord entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TemplateWhitelistedRecord must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TemplateWhitelistedRecord", id.toString(), this);
    }
  }

  static load(id: string): TemplateWhitelistedRecord | null {
    return changetype<TemplateWhitelistedRecord | null>(
      store.get("TemplateWhitelistedRecord", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get template(): Bytes {
    let value = this.get("template");
    return value!.toBytes();
  }

  set template(value: Bytes) {
    this.set("template", Value.fromBytes(value));
  }

  get whitelisted(): boolean {
    let value = this.get("whitelisted");
    return value!.toBoolean();
  }

  set whitelisted(value: boolean) {
    this.set("whitelisted", Value.fromBoolean(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class ExchangeSBTByEthHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ExchangeSBTByEthHistory entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ExchangeSBTByEthHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ExchangeSBTByEthHistory", id.toString(), this);
    }
  }

  static load(id: string): ExchangeSBTByEthHistory | null {
    return changetype<ExchangeSBTByEthHistory | null>(
      store.get("ExchangeSBTByEthHistory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get soulBoundTokenId(): BigInt {
    let value = this.get("soulBoundTokenId");
    return value!.toBigInt();
  }

  set soulBoundTokenId(value: BigInt) {
    this.set("soulBoundTokenId", Value.fromBigInt(value));
  }

  get exchangeWallet(): Bytes {
    let value = this.get("exchangeWallet");
    return value!.toBytes();
  }

  set exchangeWallet(value: Bytes) {
    this.set("exchangeWallet", Value.fromBytes(value));
  }

  get sbtValue(): BigInt {
    let value = this.get("sbtValue");
    return value!.toBigInt();
  }

  set sbtValue(value: BigInt) {
    this.set("sbtValue", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class ExchangeEthBySBTHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ExchangeEthBySBTHistory entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ExchangeEthBySBTHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ExchangeEthBySBTHistory", id.toString(), this);
    }
  }

  static load(id: string): ExchangeEthBySBTHistory | null {
    return changetype<ExchangeEthBySBTHistory | null>(
      store.get("ExchangeEthBySBTHistory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get soulBoundTokenId(): BigInt {
    let value = this.get("soulBoundTokenId");
    return value!.toBigInt();
  }

  set soulBoundTokenId(value: BigInt) {
    this.set("soulBoundTokenId", Value.fromBigInt(value));
  }

  get toWallet(): Bytes {
    let value = this.get("toWallet");
    return value!.toBytes();
  }

  set toWallet(value: Bytes) {
    this.set("toWallet", Value.fromBytes(value));
  }

  get sbtValue(): BigInt {
    let value = this.get("sbtValue");
    return value!.toBigInt();
  }

  set sbtValue(value: BigInt) {
    this.set("sbtValue", Value.fromBigInt(value));
  }

  get exchangePrice(): BigInt {
    let value = this.get("exchangePrice");
    return value!.toBigInt();
  }

  set exchangePrice(value: BigInt) {
    this.set("exchangePrice", Value.fromBigInt(value));
  }

  get ethAmount(): BigInt {
    let value = this.get("ethAmount");
    return value!.toBigInt();
  }

  set ethAmount(value: BigInt) {
    this.set("ethAmount", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Market extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Market entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Market must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Market", id.toString(), this);
    }
  }

  static load(id: string): Market | null {
    return changetype<Market | null>(store.get("Market", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get derivativeNFT(): Bytes {
    let value = this.get("derivativeNFT");
    return value!.toBytes();
  }

  set derivativeNFT(value: Bytes) {
    this.set("derivativeNFT", Value.fromBytes(value));
  }

  get feePayType(): i32 {
    let value = this.get("feePayType");
    return value!.toI32();
  }

  set feePayType(value: i32) {
    this.set("feePayType", Value.fromI32(value));
  }

  get feeShareType(): i32 {
    let value = this.get("feeShareType");
    return value!.toI32();
  }

  set feeShareType(value: i32) {
    this.set("feeShareType", Value.fromI32(value));
  }

  get royaltyBasisPoints(): i32 {
    let value = this.get("royaltyBasisPoints");
    return value!.toI32();
  }

  set royaltyBasisPoints(value: i32) {
    this.set("royaltyBasisPoints", Value.fromI32(value));
  }

  get isRemove(): boolean {
    let value = this.get("isRemove");
    return value!.toBoolean();
  }

  set isRemove(value: boolean) {
    this.set("isRemove", Value.fromBoolean(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class MarketPlaceERC3525ReceivedHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save MarketPlaceERC3525ReceivedHistory entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MarketPlaceERC3525ReceivedHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MarketPlaceERC3525ReceivedHistory", id.toString(), this);
    }
  }

  static load(id: string): MarketPlaceERC3525ReceivedHistory | null {
    return changetype<MarketPlaceERC3525ReceivedHistory | null>(
      store.get("MarketPlaceERC3525ReceivedHistory", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get operator(): Bytes {
    let value = this.get("operator");
    return value!.toBytes();
  }

  set operator(value: Bytes) {
    this.set("operator", Value.fromBytes(value));
  }

  get fromTokenId(): BigInt {
    let value = this.get("fromTokenId");
    return value!.toBigInt();
  }

  set fromTokenId(value: BigInt) {
    this.set("fromTokenId", Value.fromBigInt(value));
  }

  get toTokenId(): BigInt {
    let value = this.get("toTokenId");
    return value!.toBigInt();
  }

  set toTokenId(value: BigInt) {
    this.set("toTokenId", Value.fromBigInt(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get data(): Bytes | null {
    let value = this.get("data");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set data(value: Bytes | null) {
    if (!value) {
      this.unset("data");
    } else {
      this.set("data", Value.fromBytes(<Bytes>value));
    }
  }

  get gas(): BigInt {
    let value = this.get("gas");
    return value!.toBigInt();
  }

  set gas(value: BigInt) {
    this.set("gas", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class PublishSaleRecord extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PublishSaleRecord entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PublishSaleRecord must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PublishSaleRecord", id.toString(), this);
    }
  }

  static load(id: string): PublishSaleRecord | null {
    return changetype<PublishSaleRecord | null>(
      store.get("PublishSaleRecord", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get soulBoundTokenId(): BigInt {
    let value = this.get("soulBoundTokenId");
    return value!.toBigInt();
  }

  set soulBoundTokenId(value: BigInt) {
    this.set("soulBoundTokenId", Value.fromBigInt(value));
  }

  get projectId(): BigInt {
    let value = this.get("projectId");
    return value!.toBigInt();
  }

  set projectId(value: BigInt) {
    this.set("projectId", Value.fromBigInt(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get onSellUnits(): BigInt {
    let value = this.get("onSellUnits");
    return value!.toBigInt();
  }

  set onSellUnits(value: BigInt) {
    this.set("onSellUnits", Value.fromBigInt(value));
  }

  get saledUnits(): BigInt {
    let value = this.get("saledUnits");
    return value!.toBigInt();
  }

  set saledUnits(value: BigInt) {
    this.set("saledUnits", Value.fromBigInt(value));
  }

  get startTime(): BigInt {
    let value = this.get("startTime");
    return value!.toBigInt();
  }

  set startTime(value: BigInt) {
    this.set("startTime", Value.fromBigInt(value));
  }

  get preSalePrice(): BigInt {
    let value = this.get("preSalePrice");
    return value!.toBigInt();
  }

  set preSalePrice(value: BigInt) {
    this.set("preSalePrice", Value.fromBigInt(value));
  }

  get salePrice(): BigInt {
    let value = this.get("salePrice");
    return value!.toBigInt();
  }

  set salePrice(value: BigInt) {
    this.set("salePrice", Value.fromBigInt(value));
  }

  get priceType(): i32 {
    let value = this.get("priceType");
    return value!.toI32();
  }

  set priceType(value: i32) {
    this.set("priceType", Value.fromI32(value));
  }

  get min(): BigInt {
    let value = this.get("min");
    return value!.toBigInt();
  }

  set min(value: BigInt) {
    this.set("min", Value.fromBigInt(value));
  }

  get max(): BigInt {
    let value = this.get("max");
    return value!.toBigInt();
  }

  set max(value: BigInt) {
    this.set("max", Value.fromBigInt(value));
  }

  get derivativeNFT(): Bytes {
    let value = this.get("derivativeNFT");
    return value!.toBytes();
  }

  set derivativeNFT(value: Bytes) {
    this.set("derivativeNFT", Value.fromBytes(value));
  }

  get tokenIdOfMarket(): BigInt {
    let value = this.get("tokenIdOfMarket");
    return value!.toBigInt();
  }

  set tokenIdOfMarket(value: BigInt) {
    this.set("tokenIdOfMarket", Value.fromBigInt(value));
  }

  get saleId(): BigInt {
    let value = this.get("saleId");
    return value!.toBigInt();
  }

  set saleId(value: BigInt) {
    this.set("saleId", Value.fromBigInt(value));
  }

  get isRemove(): boolean {
    let value = this.get("isRemove");
    return value!.toBoolean();
  }

  set isRemove(value: boolean) {
    this.set("isRemove", Value.fromBoolean(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class TradedHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TradedHistory entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TradedHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TradedHistory", id.toString(), this);
    }
  }

  static load(id: string): TradedHistory | null {
    return changetype<TradedHistory | null>(store.get("TradedHistory", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get saleId(): i32 {
    let value = this.get("saleId");
    return value!.toI32();
  }

  set saleId(value: i32) {
    this.set("saleId", Value.fromI32(value));
  }

  get buyer(): Bytes {
    let value = this.get("buyer");
    return value!.toBytes();
  }

  set buyer(value: Bytes) {
    this.set("buyer", Value.fromBytes(value));
  }

  get tradeId(): BigInt {
    let value = this.get("tradeId");
    return value!.toBigInt();
  }

  set tradeId(value: BigInt) {
    this.set("tradeId", Value.fromBigInt(value));
  }

  get tradeTime(): BigInt {
    let value = this.get("tradeTime");
    return value!.toBigInt();
  }

  set tradeTime(value: BigInt) {
    this.set("tradeTime", Value.fromBigInt(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    return value!.toBigInt();
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get newTokenIdBuyer(): BigInt {
    let value = this.get("newTokenIdBuyer");
    return value!.toBigInt();
  }

  set newTokenIdBuyer(value: BigInt) {
    this.set("newTokenIdBuyer", Value.fromBigInt(value));
  }

  get tradedUnits(): BigInt {
    let value = this.get("tradedUnits");
    return value!.toBigInt();
  }

  set tradedUnits(value: BigInt) {
    this.set("tradedUnits", Value.fromBigInt(value));
  }

  get treasuryAmount(): BigInt {
    let value = this.get("treasuryAmount");
    return value!.toBigInt();
  }

  set treasuryAmount(value: BigInt) {
    this.set("treasuryAmount", Value.fromBigInt(value));
  }

  get genesisAmount(): BigInt {
    let value = this.get("genesisAmount");
    return value!.toBigInt();
  }

  set genesisAmount(value: BigInt) {
    this.set("genesisAmount", Value.fromBigInt(value));
  }

  get previousAmount(): BigInt {
    let value = this.get("previousAmount");
    return value!.toBigInt();
  }

  set previousAmount(value: BigInt) {
    this.set("previousAmount", Value.fromBigInt(value));
  }

  get adjustedAmount(): BigInt {
    let value = this.get("adjustedAmount");
    return value!.toBigInt();
  }

  set adjustedAmount(value: BigInt) {
    this.set("adjustedAmount", Value.fromBigInt(value));
  }
}

export class DepositHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DepositHistory entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DepositHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DepositHistory", id.toString(), this);
    }
  }

  static load(id: string): DepositHistory | null {
    return changetype<DepositHistory | null>(store.get("DepositHistory", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    return value!.toBytes();
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get receiver(): Bytes {
    let value = this.get("receiver");
    return value!.toBytes();
  }

  set receiver(value: Bytes) {
    this.set("receiver", Value.fromBytes(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    return value!.toBigInt();
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}
