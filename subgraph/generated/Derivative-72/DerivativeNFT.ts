// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get _owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get _owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class ApprovalValue extends ethereum.Event {
  get params(): ApprovalValue__Params {
    return new ApprovalValue__Params(this);
  }
}

export class ApprovalValue__Params {
  _event: ApprovalValue;

  constructor(event: ApprovalValue) {
    this._event = event;
  }

  get _tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DefaultRoyaltiesUpdated extends ethereum.Event {
  get params(): DefaultRoyaltiesUpdated__Params {
    return new DefaultRoyaltiesUpdated__Params(this);
  }
}

export class DefaultRoyaltiesUpdated__Params {
  _event: DefaultRoyaltiesUpdated;

  constructor(event: DefaultRoyaltiesUpdated) {
    this._event = event;
  }

  get projectId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get receiver(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get basisPoint(): i32 {
    return this._event.parameters[2].value.toI32();
  }
}

export class DerivativeNFTImageURISet extends ethereum.Event {
  get params(): DerivativeNFTImageURISet__Params {
    return new DerivativeNFTImageURISet__Params(this);
  }
}

export class DerivativeNFTImageURISet__Params {
  _event: DerivativeNFTImageURISet;

  constructor(event: DerivativeNFTImageURISet) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get imageURI(): string {
    return this._event.parameters[1].value.toString();
  }

  get timestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class RoyaltiesUpdated extends ethereum.Event {
  get params(): RoyaltiesUpdated__Params {
    return new RoyaltiesUpdated__Params(this);
  }
}

export class RoyaltiesUpdated__Params {
  _event: RoyaltiesUpdated;

  constructor(event: RoyaltiesUpdated) {
    this._event = event;
  }

  get publishId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get receiver(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get basisPoint(): i32 {
    return this._event.parameters[3].value.toI32();
  }
}

export class SetMetadataDescriptor extends ethereum.Event {
  get params(): SetMetadataDescriptor__Params {
    return new SetMetadataDescriptor__Params(this);
  }
}

export class SetMetadataDescriptor__Params {
  _event: SetMetadataDescriptor;

  constructor(event: SetMetadataDescriptor) {
    this._event = event;
  }

  get metadataDescriptor(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SlotChanged extends ethereum.Event {
  get params(): SlotChanged__Params {
    return new SlotChanged__Params(this);
  }
}

export class SlotChanged__Params {
  _event: SlotChanged;

  constructor(event: SlotChanged) {
    this._event = event;
  }

  get _tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _oldSlot(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _newSlot(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get _from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TransferValue extends ethereum.Event {
  get params(): TransferValue__Params {
    return new TransferValue__Params(this);
  }
}

export class TransferValue__Params {
  _event: TransferValue;

  constructor(event: TransferValue) {
    this._event = event;
  }

  get _fromTokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _toTokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DerivativeNFT__getFeesResult {
  value0: Array<Address>;
  value1: Array<BigInt>;

  constructor(value0: Array<Address>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }

  getValue0(): Array<Address> {
    return this.value0;
  }

  getValue1(): Array<BigInt> {
    return this.value1;
  }
}

export class DerivativeNFT__getRoyaltiesResult {
  value0: Array<Address>;
  value1: Array<BigInt>;

  constructor(value0: Array<Address>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }

  getValue0(): Array<Address> {
    return this.value0;
  }

  getValue1(): Array<BigInt> {
    return this.value1;
  }
}

export class DerivativeNFT__getSlotDetailResultValue0Struct extends ethereum.Tuple {
  get publication(): DerivativeNFT__getSlotDetailResultValue0PublicationStruct {
    return changetype<
      DerivativeNFT__getSlotDetailResultValue0PublicationStruct
    >(this[0].toTuple());
  }

  get imageURI(): string {
    return this[1].toString();
  }

  get timestamp(): BigInt {
    return this[2].toBigInt();
  }
}

export class DerivativeNFT__getSlotDetailResultValue0PublicationStruct extends ethereum.Tuple {
  get soulBoundTokenId(): BigInt {
    return this[0].toBigInt();
  }

  get hubId(): BigInt {
    return this[1].toBigInt();
  }

  get projectId(): BigInt {
    return this[2].toBigInt();
  }

  get salePrice(): BigInt {
    return this[3].toBigInt();
  }

  get royaltyBasisPoints(): i32 {
    return this[4].toI32();
  }

  get currency(): Address {
    return this[5].toAddress();
  }

  get amount(): BigInt {
    return this[6].toBigInt();
  }

  get name(): string {
    return this[7].toString();
  }

  get description(): string {
    return this[8].toString();
  }

  get canCollect(): boolean {
    return this[9].toBoolean();
  }

  get materialURIs(): Array<string> {
    return this[10].toStringArray();
  }

  get fromTokenIds(): Array<BigInt> {
    return this[11].toBigIntArray();
  }

  get collectModule(): Address {
    return this[12].toAddress();
  }

  get collectModuleInitData(): Bytes {
    return this[13].toBytes();
  }

  get publishModule(): Address {
    return this[14].toAddress();
  }

  get publishModuleInitData(): Bytes {
    return this[15].toBytes();
  }
}

export class DerivativeNFT__publishInputPublicationStruct extends ethereum.Tuple {
  get soulBoundTokenId(): BigInt {
    return this[0].toBigInt();
  }

  get hubId(): BigInt {
    return this[1].toBigInt();
  }

  get projectId(): BigInt {
    return this[2].toBigInt();
  }

  get salePrice(): BigInt {
    return this[3].toBigInt();
  }

  get royaltyBasisPoints(): i32 {
    return this[4].toI32();
  }

  get currency(): Address {
    return this[5].toAddress();
  }

  get amount(): BigInt {
    return this[6].toBigInt();
  }

  get name(): string {
    return this[7].toString();
  }

  get description(): string {
    return this[8].toString();
  }

  get canCollect(): boolean {
    return this[9].toBoolean();
  }

  get materialURIs(): Array<string> {
    return this[10].toStringArray();
  }

  get fromTokenIds(): Array<BigInt> {
    return this[11].toBigIntArray();
  }

  get collectModule(): Address {
    return this[12].toAddress();
  }

  get collectModuleInitData(): Bytes {
    return this[13].toBytes();
  }

  get publishModule(): Address {
    return this[14].toAddress();
  }

  get publishModuleInitData(): Bytes {
    return this[15].toBytes();
  }
}

export class DerivativeNFT__royaltyInfoResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): Address {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class DerivativeNFT extends ethereum.SmartContract {
  static bind(address: Address): DerivativeNFT {
    return new DerivativeNFT("DerivativeNFT", address);
  }

  allowance(tokenId_: BigInt, operator_: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId_),
        ethereum.Value.fromAddress(operator_)
      ]
    );

    return result[0].toBigInt();
  }

  try_allowance(
    tokenId_: BigInt,
    operator_: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId_),
        ethereum.Value.fromAddress(operator_)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(owner_: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner_)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner_: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner_)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf1(tokenId_: BigInt): BigInt {
    let result = super.call("balanceOf", "balanceOf(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf1(tokenId_: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  contractURI(): string {
    let result = super.call("contractURI", "contractURI():(string)", []);

    return result[0].toString();
  }

  try_contractURI(): ethereum.CallResult<string> {
    let result = super.tryCall("contractURI", "contractURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getApproved(tokenId_: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId_: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCreator(): Address {
    let result = super.call("getCreator", "getCreator():(address)", []);

    return result[0].toAddress();
  }

  try_getCreator(): ethereum.CallResult<Address> {
    let result = super.tryCall("getCreator", "getCreator():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getFeeBps(tokenId: BigInt): Array<BigInt> {
    let result = super.call("getFeeBps", "getFeeBps(uint256):(uint256[])", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toBigIntArray();
  }

  try_getFeeBps(tokenId: BigInt): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall("getFeeBps", "getFeeBps(uint256):(uint256[])", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getFeeRecipients(tokenId: BigInt): Array<Address> {
    let result = super.call(
      "getFeeRecipients",
      "getFeeRecipients(uint256):(address[])",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return result[0].toAddressArray();
  }

  try_getFeeRecipients(tokenId: BigInt): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getFeeRecipients",
      "getFeeRecipients(uint256):(address[])",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getFees(tokenId: BigInt): DerivativeNFT__getFeesResult {
    let result = super.call(
      "getFees",
      "getFees(uint256):(address[],uint256[])",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return new DerivativeNFT__getFeesResult(
      result[0].toAddressArray(),
      result[1].toBigIntArray()
    );
  }

  try_getFees(
    tokenId: BigInt
  ): ethereum.CallResult<DerivativeNFT__getFeesResult> {
    let result = super.tryCall(
      "getFees",
      "getFees(uint256):(address[],uint256[])",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DerivativeNFT__getFeesResult(
        value[0].toAddressArray(),
        value[1].toBigIntArray()
      )
    );
  }

  getPublishIdByTokenId(tokenId: BigInt): BigInt {
    let result = super.call(
      "getPublishIdByTokenId",
      "getPublishIdByTokenId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return result[0].toBigInt();
  }

  try_getPublishIdByTokenId(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPublishIdByTokenId",
      "getPublishIdByTokenId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRoyalties(tokenId: BigInt): DerivativeNFT__getRoyaltiesResult {
    let result = super.call(
      "getRoyalties",
      "getRoyalties(uint256):(address[],uint256[])",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return new DerivativeNFT__getRoyaltiesResult(
      result[0].toAddressArray(),
      result[1].toBigIntArray()
    );
  }

  try_getRoyalties(
    tokenId: BigInt
  ): ethereum.CallResult<DerivativeNFT__getRoyaltiesResult> {
    let result = super.tryCall(
      "getRoyalties",
      "getRoyalties(uint256):(address[],uint256[])",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DerivativeNFT__getRoyaltiesResult(
        value[0].toAddressArray(),
        value[1].toBigIntArray()
      )
    );
  }

  getSlot(publishId: BigInt): BigInt {
    let result = super.call("getSlot", "getSlot(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(publishId)
    ]);

    return result[0].toBigInt();
  }

  try_getSlot(publishId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getSlot", "getSlot(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(publishId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSlotDetail(slot_: BigInt): DerivativeNFT__getSlotDetailResultValue0Struct {
    let result = super.call(
      "getSlotDetail",
      "getSlotDetail(uint256):(((uint256,uint256,uint256,uint256,uint16,address,uint256,string,string,bool,string[],uint256[],address,bytes,address,bytes),string,uint256))",
      [ethereum.Value.fromUnsignedBigInt(slot_)]
    );

    return changetype<DerivativeNFT__getSlotDetailResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getSlotDetail(
    slot_: BigInt
  ): ethereum.CallResult<DerivativeNFT__getSlotDetailResultValue0Struct> {
    let result = super.tryCall(
      "getSlotDetail",
      "getSlotDetail(uint256):(((uint256,uint256,uint256,uint256,uint16,address,uint256,string,string,bool,string[],uint256[],address,bytes,address,bytes),string,uint256))",
      [ethereum.Value.fromUnsignedBigInt(slot_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<DerivativeNFT__getSlotDetailResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getState(): i32 {
    let result = super.call("getState", "getState():(uint8)", []);

    return result[0].toI32();
  }

  try_getState(): ethereum.CallResult<i32> {
    let result = super.tryCall("getState", "getState():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  isApprovedForAll(owner_: Address, operator_: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(owner_),
        ethereum.Value.fromAddress(operator_)
      ]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner_: Address,
    operator_: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(owner_),
        ethereum.Value.fromAddress(operator_)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  metadataDescriptor(): Address {
    let result = super.call(
      "metadataDescriptor",
      "metadataDescriptor():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_metadataDescriptor(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "metadataDescriptor",
      "metadataDescriptor():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  ownerOf(tokenId_: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId_: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  publish(
    publishId: BigInt,
    publication: DerivativeNFT__publishInputPublicationStruct,
    publisher: Address,
    bps: i32
  ): BigInt {
    let result = super.call(
      "publish",
      "publish(uint256,(uint256,uint256,uint256,uint256,uint16,address,uint256,string,string,bool,string[],uint256[],address,bytes,address,bytes),address,uint16):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(publishId),
        ethereum.Value.fromTuple(publication),
        ethereum.Value.fromAddress(publisher),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(bps))
      ]
    );

    return result[0].toBigInt();
  }

  try_publish(
    publishId: BigInt,
    publication: DerivativeNFT__publishInputPublicationStruct,
    publisher: Address,
    bps: i32
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "publish",
      "publish(uint256,(uint256,uint256,uint256,uint256,uint16,address,uint256,string,string,bool,string[],uint256[],address,bytes,address,bytes),address,uint16):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(publishId),
        ethereum.Value.fromTuple(publication),
        ethereum.Value.fromAddress(publisher),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(bps))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  royaltyInfo(
    tokenId: BigInt,
    value: BigInt
  ): DerivativeNFT__royaltyInfoResult {
    let result = super.call(
      "royaltyInfo",
      "royaltyInfo(uint256,uint256):(address,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(value)
      ]
    );

    return new DerivativeNFT__royaltyInfoResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_royaltyInfo(
    tokenId: BigInt,
    value: BigInt
  ): ethereum.CallResult<DerivativeNFT__royaltyInfoResult> {
    let result = super.tryCall(
      "royaltyInfo",
      "royaltyInfo(uint256,uint256):(address,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(value)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DerivativeNFT__royaltyInfoResult(
        value[0].toAddress(),
        value[1].toBigInt()
      )
    );
  }

  sigNonces(param0: Address): BigInt {
    let result = super.call("sigNonces", "sigNonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_sigNonces(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("sigNonces", "sigNonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  slotOf(tokenId_: BigInt): BigInt {
    let result = super.call("slotOf", "slotOf(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_)
    ]);

    return result[0].toBigInt();
  }

  try_slotOf(tokenId_: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("slotOf", "slotOf(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  slotURI(slot_: BigInt): string {
    let result = super.call("slotURI", "slotURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(slot_)
    ]);

    return result[0].toString();
  }

  try_slotURI(slot_: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("slotURI", "slotURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(slot_)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  split(
    publishId_: BigInt,
    fromTokenId_: BigInt,
    to_: Address,
    value_: BigInt
  ): BigInt {
    let result = super.call(
      "split",
      "split(uint256,uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(publishId_),
        ethereum.Value.fromUnsignedBigInt(fromTokenId_),
        ethereum.Value.fromAddress(to_),
        ethereum.Value.fromUnsignedBigInt(value_)
      ]
    );

    return result[0].toBigInt();
  }

  try_split(
    publishId_: BigInt,
    fromTokenId_: BigInt,
    to_: Address,
    value_: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "split",
      "split(uint256,uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(publishId_),
        ethereum.Value.fromUnsignedBigInt(fromTokenId_),
        ethereum.Value.fromAddress(to_),
        ethereum.Value.fromUnsignedBigInt(value_)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenByIndex(index_: BigInt): BigInt {
    let result = super.call("tokenByIndex", "tokenByIndex(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(index_)
    ]);

    return result[0].toBigInt();
  }

  try_tokenByIndex(index_: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenByIndex",
      "tokenByIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(index_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenCreator(tokenId: BigInt): Address {
    let result = super.call("tokenCreator", "tokenCreator(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_tokenCreator(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "tokenCreator",
      "tokenCreator(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenOfOwnerByIndex(owner_: Address, index_: BigInt): BigInt {
    let result = super.call(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner_),
        ethereum.Value.fromUnsignedBigInt(index_)
      ]
    );

    return result[0].toBigInt();
  }

  try_tokenOfOwnerByIndex(
    owner_: Address,
    index_: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner_),
        ethereum.Value.fromUnsignedBigInt(index_)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(tokenId_: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId_: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId_)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  valueDecimals(): i32 {
    let result = super.call("valueDecimals", "valueDecimals():(uint8)", []);

    return result[0].toI32();
  }

  try_valueDecimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("valueDecimals", "valueDecimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get manager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class Approve1Call extends ethereum.Call {
  get inputs(): Approve1Call__Inputs {
    return new Approve1Call__Inputs(this);
  }

  get outputs(): Approve1Call__Outputs {
    return new Approve1Call__Outputs(this);
  }
}

export class Approve1Call__Inputs {
  _call: Approve1Call;

  constructor(call: Approve1Call) {
    this._call = call;
  }

  get tokenId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get to_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class Approve1Call__Outputs {
  _call: Approve1Call;

  constructor(call: Approve1Call) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get tokenId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get sbt(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get bankTreasury(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get marketPlace(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get name_(): string {
    return this._call.inputValues[3].value.toString();
  }

  get symbol_(): string {
    return this._call.inputValues[4].value.toString();
  }

  get projectId_(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get soulBoundTokenId_(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get metadataDescriptor_(): Address {
    return this._call.inputValues[7].value.toAddress();
  }

  get receiver_(): Address {
    return this._call.inputValues[8].value.toAddress();
  }

  get defaultRoyaltyBPS_(): BigInt {
    return this._call.inputValues[9].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class PublishCall extends ethereum.Call {
  get inputs(): PublishCall__Inputs {
    return new PublishCall__Inputs(this);
  }

  get outputs(): PublishCall__Outputs {
    return new PublishCall__Outputs(this);
  }
}

export class PublishCall__Inputs {
  _call: PublishCall;

  constructor(call: PublishCall) {
    this._call = call;
  }

  get publishId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get publication(): PublishCallPublicationStruct {
    return changetype<PublishCallPublicationStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }

  get publisher(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get bps(): i32 {
    return this._call.inputValues[3].value.toI32();
  }
}

export class PublishCall__Outputs {
  _call: PublishCall;

  constructor(call: PublishCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PublishCallPublicationStruct extends ethereum.Tuple {
  get soulBoundTokenId(): BigInt {
    return this[0].toBigInt();
  }

  get hubId(): BigInt {
    return this[1].toBigInt();
  }

  get projectId(): BigInt {
    return this[2].toBigInt();
  }

  get salePrice(): BigInt {
    return this[3].toBigInt();
  }

  get royaltyBasisPoints(): i32 {
    return this[4].toI32();
  }

  get currency(): Address {
    return this[5].toAddress();
  }

  get amount(): BigInt {
    return this[6].toBigInt();
  }

  get name(): string {
    return this[7].toString();
  }

  get description(): string {
    return this[8].toString();
  }

  get canCollect(): boolean {
    return this[9].toBoolean();
  }

  get materialURIs(): Array<string> {
    return this[10].toStringArray();
  }

  get fromTokenIds(): Array<BigInt> {
    return this[11].toBigIntArray();
  }

  get collectModule(): Address {
    return this[12].toAddress();
  }

  get collectModuleInitData(): Bytes {
    return this[13].toBytes();
  }

  get publishModule(): Address {
    return this[14].toAddress();
  }

  get publishModuleInitData(): Bytes {
    return this[15].toBytes();
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data_(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved_(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetMetadataDescriptorCall extends ethereum.Call {
  get inputs(): SetMetadataDescriptorCall__Inputs {
    return new SetMetadataDescriptorCall__Inputs(this);
  }

  get outputs(): SetMetadataDescriptorCall__Outputs {
    return new SetMetadataDescriptorCall__Outputs(this);
  }
}

export class SetMetadataDescriptorCall__Inputs {
  _call: SetMetadataDescriptorCall;

  constructor(call: SetMetadataDescriptorCall) {
    this._call = call;
  }

  get metadataDescriptor_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetMetadataDescriptorCall__Outputs {
  _call: SetMetadataDescriptorCall;

  constructor(call: SetMetadataDescriptorCall) {
    this._call = call;
  }
}

export class SetStateCall extends ethereum.Call {
  get inputs(): SetStateCall__Inputs {
    return new SetStateCall__Inputs(this);
  }

  get outputs(): SetStateCall__Outputs {
    return new SetStateCall__Outputs(this);
  }
}

export class SetStateCall__Inputs {
  _call: SetStateCall;

  constructor(call: SetStateCall) {
    this._call = call;
  }

  get newState(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class SetStateCall__Outputs {
  _call: SetStateCall;

  constructor(call: SetStateCall) {
    this._call = call;
  }
}

export class SetTokenImageURICall extends ethereum.Call {
  get inputs(): SetTokenImageURICall__Inputs {
    return new SetTokenImageURICall__Inputs(this);
  }

  get outputs(): SetTokenImageURICall__Outputs {
    return new SetTokenImageURICall__Outputs(this);
  }
}

export class SetTokenImageURICall__Inputs {
  _call: SetTokenImageURICall;

  constructor(call: SetTokenImageURICall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get imageURI(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class SetTokenImageURICall__Outputs {
  _call: SetTokenImageURICall;

  constructor(call: SetTokenImageURICall) {
    this._call = call;
  }
}

export class SplitCall extends ethereum.Call {
  get inputs(): SplitCall__Inputs {
    return new SplitCall__Inputs(this);
  }

  get outputs(): SplitCall__Outputs {
    return new SplitCall__Outputs(this);
  }
}

export class SplitCall__Inputs {
  _call: SplitCall;

  constructor(call: SplitCall) {
    this._call = call;
  }

  get publishId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get fromTokenId_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get to_(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get value_(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SplitCall__Outputs {
  _call: SplitCall;

  constructor(call: SplitCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get fromTokenId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get to_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TransferFrom1Call extends ethereum.Call {
  get inputs(): TransferFrom1Call__Inputs {
    return new TransferFrom1Call__Inputs(this);
  }

  get outputs(): TransferFrom1Call__Outputs {
    return new TransferFrom1Call__Outputs(this);
  }
}

export class TransferFrom1Call__Inputs {
  _call: TransferFrom1Call;

  constructor(call: TransferFrom1Call) {
    this._call = call;
  }

  get from_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFrom1Call__Outputs {
  _call: TransferFrom1Call;

  constructor(call: TransferFrom1Call) {
    this._call = call;
  }
}

export class TransferFrom2Call extends ethereum.Call {
  get inputs(): TransferFrom2Call__Inputs {
    return new TransferFrom2Call__Inputs(this);
  }

  get outputs(): TransferFrom2Call__Outputs {
    return new TransferFrom2Call__Outputs(this);
  }
}

export class TransferFrom2Call__Inputs {
  _call: TransferFrom2Call;

  constructor(call: TransferFrom2Call) {
    this._call = call;
  }

  get fromTokenId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get toTokenId_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get value_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFrom2Call__Outputs {
  _call: TransferFrom2Call;

  constructor(call: TransferFrom2Call) {
    this._call = call;
  }
}

export class TransferValueCall extends ethereum.Call {
  get inputs(): TransferValueCall__Inputs {
    return new TransferValueCall__Inputs(this);
  }

  get outputs(): TransferValueCall__Outputs {
    return new TransferValueCall__Outputs(this);
  }
}

export class TransferValueCall__Inputs {
  _call: TransferValueCall;

  constructor(call: TransferValueCall) {
    this._call = call;
  }

  get fromTokenId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get toTokenId_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get value_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferValueCall__Outputs {
  _call: TransferValueCall;

  constructor(call: TransferValueCall) {
    this._call = call;
  }
}

export class UpdateDefaultRoyaltyBPSCall extends ethereum.Call {
  get inputs(): UpdateDefaultRoyaltyBPSCall__Inputs {
    return new UpdateDefaultRoyaltyBPSCall__Inputs(this);
  }

  get outputs(): UpdateDefaultRoyaltyBPSCall__Outputs {
    return new UpdateDefaultRoyaltyBPSCall__Outputs(this);
  }
}

export class UpdateDefaultRoyaltyBPSCall__Inputs {
  _call: UpdateDefaultRoyaltyBPSCall;

  constructor(call: UpdateDefaultRoyaltyBPSCall) {
    this._call = call;
  }

  get defaultRoyaltyBPS_(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class UpdateDefaultRoyaltyBPSCall__Outputs {
  _call: UpdateDefaultRoyaltyBPSCall;

  constructor(call: UpdateDefaultRoyaltyBPSCall) {
    this._call = call;
  }
}
