// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class MarketPlace__getBuyPriceResultValue0Struct extends ethereum.Tuple {
  get soulBoundTokenIdSeller(): BigInt {
    return this[0].toBigInt();
  }

  get seller(): Address {
    return this[1].toAddress();
  }

  get derivativeNFT(): Address {
    return this[2].toAddress();
  }

  get projectId(): BigInt {
    return this[3].toBigInt();
  }

  get publishId(): BigInt {
    return this[4].toBigInt();
  }

  get tokenId(): BigInt {
    return this[5].toBigInt();
  }

  get currency(): Address {
    return this[6].toAddress();
  }

  get salePrice(): BigInt {
    return this[7].toBigInt();
  }

  get units(): BigInt {
    return this[8].toBigInt();
  }

  get amount(): BigInt {
    return this[9].toBigInt();
  }
}

export class MarketPlace__getMarketInfoResultValue0Struct extends ethereum.Tuple {
  get isOpen(): boolean {
    return this[0].toBoolean();
  }

  get feeShareType(): i32 {
    return this[1].toI32();
  }

  get feePayType(): i32 {
    return this[2].toI32();
  }

  get royaltySharesPoints(): i32 {
    return this[3].toI32();
  }

  get projectId(): BigInt {
    return this[4].toBigInt();
  }

  get collectModule(): Address {
    return this[5].toAddress();
  }
}

export class MarketPlace__getOfferResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: Address, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getBuyer(): Address {
    return this.value0;
  }

  getExpiration(): BigInt {
    return this.value1;
  }

  getAmount(): BigInt {
    return this.value2;
  }

  getSoulBoundTokenIdReferrer(): BigInt {
    return this.value3;
  }
}

export class MarketPlace__getReserveAuctionResultAuctionStruct extends ethereum.Tuple {
  get soulBoundTokenId(): BigInt {
    return this[0].toBigInt();
  }

  get derivativeNFT(): Address {
    return this[1].toAddress();
  }

  get projectId(): BigInt {
    return this[2].toBigInt();
  }

  get publishId(): BigInt {
    return this[3].toBigInt();
  }

  get tokenId(): BigInt {
    return this[4].toBigInt();
  }

  get units(): BigInt {
    return this[5].toBigInt();
  }

  get seller(): Address {
    return this[6].toAddress();
  }

  get duration(): BigInt {
    return this[7].toBigInt();
  }

  get extensionDuration(): BigInt {
    return this[8].toBigInt();
  }

  get endTime(): BigInt {
    return this[9].toBigInt();
  }

  get bidder(): Address {
    return this[10].toAddress();
  }

  get soulBoundTokenIdBidder(): BigInt {
    return this[11].toBigInt();
  }

  get currency(): Address {
    return this[12].toAddress();
  }

  get reservePrice(): BigInt {
    return this[13].toBigInt();
  }

  get amount(): BigInt {
    return this[14].toBigInt();
  }
}

export class MarketPlace__makeOfferInputOfferParamStruct extends ethereum.Tuple {
  get soulBoundTokenIdBuyer(): BigInt {
    return this[0].toBigInt();
  }

  get derivativeNFT(): Address {
    return this[1].toAddress();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get currency(): Address {
    return this[3].toAddress();
  }

  get amount(): BigInt {
    return this[4].toBigInt();
  }

  get soulBoundTokenIdReferrer(): BigInt {
    return this[5].toBigInt();
  }
}

export class MarketPlace extends ethereum.SmartContract {
  static bind(address: Address): MarketPlace {
    return new MarketPlace("MarketPlace", address);
  }

  getAdminMember(index: BigInt): Address {
    let result = super.call(
      "getAdminMember",
      "getAdminMember(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );

    return result[0].toAddress();
  }

  try_getAdminMember(index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getAdminMember",
      "getAdminMember(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAdminMemberCount(): BigInt {
    let result = super.call(
      "getAdminMemberCount",
      "getAdminMemberCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getAdminMemberCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAdminMemberCount",
      "getAdminMemberCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBuyPrice(
    derivativeNFT: Address,
    tokenId: BigInt
  ): MarketPlace__getBuyPriceResultValue0Struct {
    let result = super.call(
      "getBuyPrice",
      "getBuyPrice(address,uint256):((uint256,address,address,uint256,uint256,uint256,address,uint128,uint128,uint96))",
      [
        ethereum.Value.fromAddress(derivativeNFT),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );

    return changetype<MarketPlace__getBuyPriceResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getBuyPrice(
    derivativeNFT: Address,
    tokenId: BigInt
  ): ethereum.CallResult<MarketPlace__getBuyPriceResultValue0Struct> {
    let result = super.tryCall(
      "getBuyPrice",
      "getBuyPrice(address,uint256):((uint256,address,address,uint256,uint256,uint256,address,uint128,uint128,uint96))",
      [
        ethereum.Value.fromAddress(derivativeNFT),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<MarketPlace__getBuyPriceResultValue0Struct>(value[0].toTuple())
    );
  }

  getGlobalModule(): Address {
    let result = super.call(
      "getGlobalModule",
      "getGlobalModule():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getGlobalModule(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getGlobalModule",
      "getGlobalModule():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getMarketInfo(
    derivativeNFT: Address
  ): MarketPlace__getMarketInfoResultValue0Struct {
    let result = super.call(
      "getMarketInfo",
      "getMarketInfo(address):((bool,uint8,uint8,uint16,uint256,address))",
      [ethereum.Value.fromAddress(derivativeNFT)]
    );

    return changetype<MarketPlace__getMarketInfoResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getMarketInfo(
    derivativeNFT: Address
  ): ethereum.CallResult<MarketPlace__getMarketInfoResultValue0Struct> {
    let result = super.tryCall(
      "getMarketInfo",
      "getMarketInfo(address):((bool,uint8,uint8,uint16,uint256,address))",
      [ethereum.Value.fromAddress(derivativeNFT)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<MarketPlace__getMarketInfoResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getMinBidAmount(auctionId: BigInt): BigInt {
    let result = super.call(
      "getMinBidAmount",
      "getMinBidAmount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(auctionId)]
    );

    return result[0].toBigInt();
  }

  try_getMinBidAmount(auctionId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMinBidAmount",
      "getMinBidAmount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(auctionId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMinOfferAmount(derivativeNFT: Address, tokenId: BigInt): BigInt {
    let result = super.call(
      "getMinOfferAmount",
      "getMinOfferAmount(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(derivativeNFT),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );

    return result[0].toBigInt();
  }

  try_getMinOfferAmount(
    derivativeNFT: Address,
    tokenId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMinOfferAmount",
      "getMinOfferAmount(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(derivativeNFT),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOffer(
    derivativeNFT: Address,
    tokenId: BigInt
  ): MarketPlace__getOfferResult {
    let result = super.call(
      "getOffer",
      "getOffer(address,uint256):(address,uint256,uint96,uint256)",
      [
        ethereum.Value.fromAddress(derivativeNFT),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );

    return new MarketPlace__getOfferResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_getOffer(
    derivativeNFT: Address,
    tokenId: BigInt
  ): ethereum.CallResult<MarketPlace__getOfferResult> {
    let result = super.tryCall(
      "getOffer",
      "getOffer(address,uint256):(address,uint256,uint96,uint256)",
      [
        ethereum.Value.fromAddress(derivativeNFT),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MarketPlace__getOfferResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  getOperatorMember(index: BigInt): Address {
    let result = super.call(
      "getOperatorMember",
      "getOperatorMember(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );

    return result[0].toAddress();
  }

  try_getOperatorMember(index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getOperatorMember",
      "getOperatorMember(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getOperatorMemberCount(): BigInt {
    let result = super.call(
      "getOperatorMemberCount",
      "getOperatorMemberCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getOperatorMemberCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getOperatorMemberCount",
      "getOperatorMemberCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getReserveAuction(
    auctionId: BigInt
  ): MarketPlace__getReserveAuctionResultAuctionStruct {
    let result = super.call(
      "getReserveAuction",
      "getReserveAuction(uint256):((uint256,address,uint256,uint256,uint256,uint128,address,uint256,uint256,uint256,address,uint256,address,uint256,uint96))",
      [ethereum.Value.fromUnsignedBigInt(auctionId)]
    );

    return changetype<MarketPlace__getReserveAuctionResultAuctionStruct>(
      result[0].toTuple()
    );
  }

  try_getReserveAuction(
    auctionId: BigInt
  ): ethereum.CallResult<MarketPlace__getReserveAuctionResultAuctionStruct> {
    let result = super.tryCall(
      "getReserveAuction",
      "getReserveAuction(uint256):((uint256,address,uint256,uint256,uint256,uint128,address,uint256,uint256,uint256,address,uint256,address,uint256,uint96))",
      [ethereum.Value.fromUnsignedBigInt(auctionId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<MarketPlace__getReserveAuctionResultAuctionStruct>(
        value[0].toTuple()
      )
    );
  }

  getReserveAuctionBidReferrer(auctionId: BigInt): BigInt {
    let result = super.call(
      "getReserveAuctionBidReferrer",
      "getReserveAuctionBidReferrer(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(auctionId)]
    );

    return result[0].toBigInt();
  }

  try_getReserveAuctionBidReferrer(
    auctionId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getReserveAuctionBidReferrer",
      "getReserveAuctionBidReferrer(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(auctionId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getReserveAuctionIdFor(derivativeNFT: Address, tokenId: BigInt): BigInt {
    let result = super.call(
      "getReserveAuctionIdFor",
      "getReserveAuctionIdFor(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(derivativeNFT),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );

    return result[0].toBigInt();
  }

  try_getReserveAuctionIdFor(
    derivativeNFT: Address,
    tokenId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getReserveAuctionIdFor",
      "getReserveAuctionIdFor(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(derivativeNFT),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isAdmin(account: Address): boolean {
    let result = super.call("isAdmin", "isAdmin(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_isAdmin(account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isAdmin", "isAdmin(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isOperator(account: Address): boolean {
    let result = super.call("isOperator", "isOperator(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_isOperator(account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOperator", "isOperator(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  makeOffer(offerParam: MarketPlace__makeOfferInputOfferParamStruct): BigInt {
    let result = super.call(
      "makeOffer",
      "makeOffer((uint256,address,uint256,address,uint96,uint256)):(uint256)",
      [ethereum.Value.fromTuple(offerParam)]
    );

    return result[0].toBigInt();
  }

  try_makeOffer(
    offerParam: MarketPlace__makeOfferInputOfferParamStruct
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "makeOffer",
      "makeOffer((uint256,address,uint256,address,uint96,uint256)):(uint256)",
      [ethereum.Value.fromTuple(offerParam)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  onERC3525Received(
    operator: Address,
    fromTokenId: BigInt,
    toTokenId: BigInt,
    value: BigInt,
    data: Bytes
  ): Bytes {
    let result = super.call(
      "onERC3525Received",
      "onERC3525Received(address,uint256,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromUnsignedBigInt(fromTokenId),
        ethereum.Value.fromUnsignedBigInt(toTokenId),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromBytes(data)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC3525Received(
    operator: Address,
    fromTokenId: BigInt,
    toTokenId: BigInt,
    value: BigInt,
    data: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC3525Received",
      "onERC3525Received(address,uint256,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromUnsignedBigInt(fromTokenId),
        ethereum.Value.fromUnsignedBigInt(toTokenId),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  sigNonces(param0: Address): BigInt {
    let result = super.call("sigNonces", "sigNonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_sigNonces(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("sigNonces", "sigNonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class AcceptOfferCall extends ethereum.Call {
  get inputs(): AcceptOfferCall__Inputs {
    return new AcceptOfferCall__Inputs(this);
  }

  get outputs(): AcceptOfferCall__Outputs {
    return new AcceptOfferCall__Outputs(this);
  }
}

export class AcceptOfferCall__Inputs {
  _call: AcceptOfferCall;

  constructor(call: AcceptOfferCall) {
    this._call = call;
  }

  get soulBoundTokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get derivativeNFT(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get offerFrom(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get minAmount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class AcceptOfferCall__Outputs {
  _call: AcceptOfferCall;

  constructor(call: AcceptOfferCall) {
    this._call = call;
  }
}

export class AddMarketCall extends ethereum.Call {
  get inputs(): AddMarketCall__Inputs {
    return new AddMarketCall__Inputs(this);
  }

  get outputs(): AddMarketCall__Outputs {
    return new AddMarketCall__Outputs(this);
  }
}

export class AddMarketCall__Inputs {
  _call: AddMarketCall;

  constructor(call: AddMarketCall) {
    this._call = call;
  }

  get derivativeNFT_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get projectId_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get collectModule_(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get feePayType_(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get feeShareType_(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get royaltySharesPoints_(): i32 {
    return this._call.inputValues[5].value.toI32();
  }
}

export class AddMarketCall__Outputs {
  _call: AddMarketCall;

  constructor(call: AddMarketCall) {
    this._call = call;
  }
}

export class BuyCall extends ethereum.Call {
  get inputs(): BuyCall__Inputs {
    return new BuyCall__Inputs(this);
  }

  get outputs(): BuyCall__Outputs {
    return new BuyCall__Outputs(this);
  }
}

export class BuyCall__Inputs {
  _call: BuyCall;

  constructor(call: BuyCall) {
    this._call = call;
  }

  get soulBoundTokenIdBuyer(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get derivativeNFT(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get maxPrice(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get soulBoundTokenIdReferrer(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class BuyCall__Outputs {
  _call: BuyCall;

  constructor(call: BuyCall) {
    this._call = call;
  }
}

export class CancelBuyPriceCall extends ethereum.Call {
  get inputs(): CancelBuyPriceCall__Inputs {
    return new CancelBuyPriceCall__Inputs(this);
  }

  get outputs(): CancelBuyPriceCall__Outputs {
    return new CancelBuyPriceCall__Outputs(this);
  }
}

export class CancelBuyPriceCall__Inputs {
  _call: CancelBuyPriceCall;

  constructor(call: CancelBuyPriceCall) {
    this._call = call;
  }

  get derivativeNFT(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CancelBuyPriceCall__Outputs {
  _call: CancelBuyPriceCall;

  constructor(call: CancelBuyPriceCall) {
    this._call = call;
  }
}

export class CancelReserveAuctionCall extends ethereum.Call {
  get inputs(): CancelReserveAuctionCall__Inputs {
    return new CancelReserveAuctionCall__Inputs(this);
  }

  get outputs(): CancelReserveAuctionCall__Outputs {
    return new CancelReserveAuctionCall__Outputs(this);
  }
}

export class CancelReserveAuctionCall__Inputs {
  _call: CancelReserveAuctionCall;

  constructor(call: CancelReserveAuctionCall) {
    this._call = call;
  }

  get auctionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelReserveAuctionCall__Outputs {
  _call: CancelReserveAuctionCall;

  constructor(call: CancelReserveAuctionCall) {
    this._call = call;
  }
}

export class CreateReserveAuctionCall extends ethereum.Call {
  get inputs(): CreateReserveAuctionCall__Inputs {
    return new CreateReserveAuctionCall__Inputs(this);
  }

  get outputs(): CreateReserveAuctionCall__Outputs {
    return new CreateReserveAuctionCall__Outputs(this);
  }
}

export class CreateReserveAuctionCall__Inputs {
  _call: CreateReserveAuctionCall;

  constructor(call: CreateReserveAuctionCall) {
    this._call = call;
  }

  get soulBoundTokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get derivativeNFT(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get currency(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get reservePrice(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class CreateReserveAuctionCall__Outputs {
  _call: CreateReserveAuctionCall;

  constructor(call: CreateReserveAuctionCall) {
    this._call = call;
  }
}

export class FinalizeReserveAuctionCall extends ethereum.Call {
  get inputs(): FinalizeReserveAuctionCall__Inputs {
    return new FinalizeReserveAuctionCall__Inputs(this);
  }

  get outputs(): FinalizeReserveAuctionCall__Outputs {
    return new FinalizeReserveAuctionCall__Outputs(this);
  }
}

export class FinalizeReserveAuctionCall__Inputs {
  _call: FinalizeReserveAuctionCall;

  constructor(call: FinalizeReserveAuctionCall) {
    this._call = call;
  }

  get auctionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class FinalizeReserveAuctionCall__Outputs {
  _call: FinalizeReserveAuctionCall;

  constructor(call: FinalizeReserveAuctionCall) {
    this._call = call;
  }
}

export class GrantAdminCall extends ethereum.Call {
  get inputs(): GrantAdminCall__Inputs {
    return new GrantAdminCall__Inputs(this);
  }

  get outputs(): GrantAdminCall__Outputs {
    return new GrantAdminCall__Outputs(this);
  }
}

export class GrantAdminCall__Inputs {
  _call: GrantAdminCall;

  constructor(call: GrantAdminCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class GrantAdminCall__Outputs {
  _call: GrantAdminCall;

  constructor(call: GrantAdminCall) {
    this._call = call;
  }
}

export class GrantOperatorCall extends ethereum.Call {
  get inputs(): GrantOperatorCall__Inputs {
    return new GrantOperatorCall__Inputs(this);
  }

  get outputs(): GrantOperatorCall__Outputs {
    return new GrantOperatorCall__Outputs(this);
  }
}

export class GrantOperatorCall__Inputs {
  _call: GrantOperatorCall;

  constructor(call: GrantOperatorCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class GrantOperatorCall__Outputs {
  _call: GrantOperatorCall;

  constructor(call: GrantOperatorCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get admin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get duration(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get treasury(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MakeOfferCall extends ethereum.Call {
  get inputs(): MakeOfferCall__Inputs {
    return new MakeOfferCall__Inputs(this);
  }

  get outputs(): MakeOfferCall__Outputs {
    return new MakeOfferCall__Outputs(this);
  }
}

export class MakeOfferCall__Inputs {
  _call: MakeOfferCall;

  constructor(call: MakeOfferCall) {
    this._call = call;
  }

  get offerParam(): MakeOfferCallOfferParamStruct {
    return changetype<MakeOfferCallOfferParamStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class MakeOfferCall__Outputs {
  _call: MakeOfferCall;

  constructor(call: MakeOfferCall) {
    this._call = call;
  }

  get expiration(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class MakeOfferCallOfferParamStruct extends ethereum.Tuple {
  get soulBoundTokenIdBuyer(): BigInt {
    return this[0].toBigInt();
  }

  get derivativeNFT(): Address {
    return this[1].toAddress();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get currency(): Address {
    return this[3].toAddress();
  }

  get amount(): BigInt {
    return this[4].toBigInt();
  }

  get soulBoundTokenIdReferrer(): BigInt {
    return this[5].toBigInt();
  }
}

export class OnERC3525ReceivedCall extends ethereum.Call {
  get inputs(): OnERC3525ReceivedCall__Inputs {
    return new OnERC3525ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC3525ReceivedCall__Outputs {
    return new OnERC3525ReceivedCall__Outputs(this);
  }
}

export class OnERC3525ReceivedCall__Inputs {
  _call: OnERC3525ReceivedCall;

  constructor(call: OnERC3525ReceivedCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get fromTokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get toTokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC3525ReceivedCall__Outputs {
  _call: OnERC3525ReceivedCall;

  constructor(call: OnERC3525ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PlaceBidCall extends ethereum.Call {
  get inputs(): PlaceBidCall__Inputs {
    return new PlaceBidCall__Inputs(this);
  }

  get outputs(): PlaceBidCall__Outputs {
    return new PlaceBidCall__Outputs(this);
  }
}

export class PlaceBidCall__Inputs {
  _call: PlaceBidCall;

  constructor(call: PlaceBidCall) {
    this._call = call;
  }

  get soulBoundTokenIdBidder(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get auctionId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get soulBoundTokenIdReferrer(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class PlaceBidCall__Outputs {
  _call: PlaceBidCall;

  constructor(call: PlaceBidCall) {
    this._call = call;
  }
}

export class RemoveMarketCall extends ethereum.Call {
  get inputs(): RemoveMarketCall__Inputs {
    return new RemoveMarketCall__Inputs(this);
  }

  get outputs(): RemoveMarketCall__Outputs {
    return new RemoveMarketCall__Outputs(this);
  }
}

export class RemoveMarketCall__Inputs {
  _call: RemoveMarketCall;

  constructor(call: RemoveMarketCall) {
    this._call = call;
  }

  get derivativeNFT_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveMarketCall__Outputs {
  _call: RemoveMarketCall;

  constructor(call: RemoveMarketCall) {
    this._call = call;
  }
}

export class RevokeAdminCall extends ethereum.Call {
  get inputs(): RevokeAdminCall__Inputs {
    return new RevokeAdminCall__Inputs(this);
  }

  get outputs(): RevokeAdminCall__Outputs {
    return new RevokeAdminCall__Outputs(this);
  }
}

export class RevokeAdminCall__Inputs {
  _call: RevokeAdminCall;

  constructor(call: RevokeAdminCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RevokeAdminCall__Outputs {
  _call: RevokeAdminCall;

  constructor(call: RevokeAdminCall) {
    this._call = call;
  }
}

export class RevokeOperatorCall extends ethereum.Call {
  get inputs(): RevokeOperatorCall__Inputs {
    return new RevokeOperatorCall__Inputs(this);
  }

  get outputs(): RevokeOperatorCall__Outputs {
    return new RevokeOperatorCall__Outputs(this);
  }
}

export class RevokeOperatorCall__Inputs {
  _call: RevokeOperatorCall;

  constructor(call: RevokeOperatorCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RevokeOperatorCall__Outputs {
  _call: RevokeOperatorCall;

  constructor(call: RevokeOperatorCall) {
    this._call = call;
  }
}

export class SetBuyPriceCall extends ethereum.Call {
  get inputs(): SetBuyPriceCall__Inputs {
    return new SetBuyPriceCall__Inputs(this);
  }

  get outputs(): SetBuyPriceCall__Outputs {
    return new SetBuyPriceCall__Outputs(this);
  }
}

export class SetBuyPriceCall__Inputs {
  _call: SetBuyPriceCall;

  constructor(call: SetBuyPriceCall) {
    this._call = call;
  }

  get buyPriceParam(): SetBuyPriceCallBuyPriceParamStruct {
    return changetype<SetBuyPriceCallBuyPriceParamStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class SetBuyPriceCall__Outputs {
  _call: SetBuyPriceCall;

  constructor(call: SetBuyPriceCall) {
    this._call = call;
  }
}

export class SetBuyPriceCallBuyPriceParamStruct extends ethereum.Tuple {
  get soulBoundTokenId(): BigInt {
    return this[0].toBigInt();
  }

  get derivativeNFT(): Address {
    return this[1].toAddress();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get currency(): Address {
    return this[3].toAddress();
  }

  get salePrice(): BigInt {
    return this[4].toBigInt();
  }
}

export class SetGlobalModulesCall extends ethereum.Call {
  get inputs(): SetGlobalModulesCall__Inputs {
    return new SetGlobalModulesCall__Inputs(this);
  }

  get outputs(): SetGlobalModulesCall__Outputs {
    return new SetGlobalModulesCall__Outputs(this);
  }
}

export class SetGlobalModulesCall__Inputs {
  _call: SetGlobalModulesCall;

  constructor(call: SetGlobalModulesCall) {
    this._call = call;
  }

  get moduleGlobals(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetGlobalModulesCall__Outputs {
  _call: SetGlobalModulesCall;

  constructor(call: SetGlobalModulesCall) {
    this._call = call;
  }
}

export class SetMarketOpenCall extends ethereum.Call {
  get inputs(): SetMarketOpenCall__Inputs {
    return new SetMarketOpenCall__Inputs(this);
  }

  get outputs(): SetMarketOpenCall__Outputs {
    return new SetMarketOpenCall__Outputs(this);
  }
}

export class SetMarketOpenCall__Inputs {
  _call: SetMarketOpenCall;

  constructor(call: SetMarketOpenCall) {
    this._call = call;
  }

  get derivativeNFT(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get isOpen(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetMarketOpenCall__Outputs {
  _call: SetMarketOpenCall;

  constructor(call: SetMarketOpenCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UpdateReserveAuctionCall extends ethereum.Call {
  get inputs(): UpdateReserveAuctionCall__Inputs {
    return new UpdateReserveAuctionCall__Inputs(this);
  }

  get outputs(): UpdateReserveAuctionCall__Outputs {
    return new UpdateReserveAuctionCall__Outputs(this);
  }
}

export class UpdateReserveAuctionCall__Inputs {
  _call: UpdateReserveAuctionCall;

  constructor(call: UpdateReserveAuctionCall) {
    this._call = call;
  }

  get auctionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get reservePrice(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateReserveAuctionCall__Outputs {
  _call: UpdateReserveAuctionCall;

  constructor(call: UpdateReserveAuctionCall) {
    this._call = call;
  }
}
